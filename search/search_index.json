{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"documentation/contributing/","text":"First and foremost thanks to anyone who contributes, very much appreciated. Guidelines \u00b6 If you add new faker classes like Address , Country , and Number they should be accompanied by a unit test. New faker classes should be placed in the relevant group of providers. For example: Minecraft class will be in the videogame group, Address in the base group. If you add a new faker class, update the README.md . Submit a PR with your change and if there are no comments, changes will be merged in. If you're not sure about the change, raise an issue and have a discussion before spending time coding it up. Try and make one logical change per PR. That is not make many changes in one PR. Submit multiple PRs instead. Starting with Datafaker 2.x, Java 17 is our target version. If you need anything older than that, we recommend using the 1.x versions of Datafaker instead. Note that while the 1.x is stable and free of known bugs, this branch won't receive future updates. Building \u00b6 Should be as easy as running mvnw clean install on the root directory.","title":"Contributing"},{"location":"documentation/contributing/#guidelines","text":"If you add new faker classes like Address , Country , and Number they should be accompanied by a unit test. New faker classes should be placed in the relevant group of providers. For example: Minecraft class will be in the videogame group, Address in the base group. If you add a new faker class, update the README.md . Submit a PR with your change and if there are no comments, changes will be merged in. If you're not sure about the change, raise an issue and have a discussion before spending time coding it up. Try and make one logical change per PR. That is not make many changes in one PR. Submit multiple PRs instead. Starting with Datafaker 2.x, Java 17 is our target version. If you need anything older than that, we recommend using the 1.x versions of Datafaker instead. Note that while the 1.x is stable and free of known bugs, this branch won't receive future updates.","title":"Guidelines"},{"location":"documentation/contributing/#building","text":"Should be as easy as running mvnw clean install on the root directory.","title":"Building"},{"location":"documentation/custom-providers/","text":"Custom providers \u00b6 Since version 1.2.0 of Datafaker it's possible create your own provider of data. A full example can be found in the source code. Custom hardcoded provider \u00b6 To create a custom provider of data, you'll need to do the following steps: Create custom provider of data Create your own custom faker which extends Faker and register custom provider In code, this would look like the following: Hardcoded provider \u00b6 Create a custom provider of data: Java public static class Insect extends AbstractProvider < BaseProviders > { private static final String [] INSECT_NAMES = new String [] { \"Ant\" , \"Beetle\" , \"Butterfly\" , \"Wasp\" }; public Insect ( BaseProviders faker ) { super ( faker ); } public String nextInsectName () { return INSECT_NAMES [ faker . random (). nextInt ( INSECT_NAMES . length ) ] ; } } Register provider \u00b6 Create your own custom faker, which extends Faker , and register the custom provider: Java public static class MyCustomFaker extends Faker { public Insect insect () { return getProvider ( Insect . class , Insect :: new , this ); } } Usage \u00b6 To use the custom faker, you can do the following: Java MyCustomFaker myFaker = new MyCustomFaker (); System . out . println ( myFaker . insect (). nextInsectName ()); This will print something like the following: Wasp Custom provider using Yaml file \u00b6 In case you have a large set of data to load, it might be better to use a Yaml file. To create a custom provider of data fom a file, you'll need to do the following steps: Create a custom provider of data Create your own custom faker which extends Faker and register custom provider Yaml provider \u00b6 First, create the custom provider which loads the data from a file: Java public static class InsectFromFile extends AbstractProvider < BaseProviders > { private static final String KEY = \"insectsfromfile\" ; public InsectFromFile ( BaseProviders faker ) { super ( faker ); faker . addPath ( Locale . ENGLISH , Paths . get ( \"src/test/ants.yml\" )); faker . addPath ( Locale . ENGLISH , Paths . get ( \"src/test/bees.yml\" )); } public String ant () { return resolve ( KEY + \".ants\" , null , faker ); } public String bee () { return resolve ( KEY + \".bees\" , null , faker ); } } The ants.yml would look like the following: en : faker : insectsfromfile : ants : [ 'Driver ant' , 'Fire ant' , 'Harvester ant' , 'Honey ant' , 'Leafcutter ant' , 'Sahara desert ant' ] And if you want to use multiple YAML files, the bees.yml would look like this: en : faker : insectsfromfile : bees : [ 'Bumblebee' , 'Euglossine bee' , 'Honeybee' , 'Carpenter bee' , 'Leaf-cutter bee' , 'Mining bee' ] Register provider \u00b6 Registering the provider would happen like this: Java public static class MyCustomFaker extends Faker { public InsectFromFile insectFromFile () { return getProvider ( InsectFromFile . class , InsectFromFile :: new , this ); } } Usage \u00b6 To use the custom faker, you can do the following: Java MyCustomFaker myFaker = new MyCustomFaker (); System . out . println ( myFaker . insectFromFile (). ant ()); This will print something like the following: Honey ant","title":"Custom providers"},{"location":"documentation/custom-providers/#custom-providers","text":"Since version 1.2.0 of Datafaker it's possible create your own provider of data. A full example can be found in the source code.","title":"Custom providers"},{"location":"documentation/custom-providers/#custom-hardcoded-provider","text":"To create a custom provider of data, you'll need to do the following steps: Create custom provider of data Create your own custom faker which extends Faker and register custom provider In code, this would look like the following:","title":"Custom hardcoded provider"},{"location":"documentation/custom-providers/#hardcoded-provider","text":"Create a custom provider of data: Java public static class Insect extends AbstractProvider < BaseProviders > { private static final String [] INSECT_NAMES = new String [] { \"Ant\" , \"Beetle\" , \"Butterfly\" , \"Wasp\" }; public Insect ( BaseProviders faker ) { super ( faker ); } public String nextInsectName () { return INSECT_NAMES [ faker . random (). nextInt ( INSECT_NAMES . length ) ] ; } }","title":"Hardcoded provider"},{"location":"documentation/custom-providers/#register-provider","text":"Create your own custom faker, which extends Faker , and register the custom provider: Java public static class MyCustomFaker extends Faker { public Insect insect () { return getProvider ( Insect . class , Insect :: new , this ); } }","title":"Register provider"},{"location":"documentation/custom-providers/#usage","text":"To use the custom faker, you can do the following: Java MyCustomFaker myFaker = new MyCustomFaker (); System . out . println ( myFaker . insect (). nextInsectName ()); This will print something like the following: Wasp","title":"Usage"},{"location":"documentation/custom-providers/#custom-provider-using-yaml-file","text":"In case you have a large set of data to load, it might be better to use a Yaml file. To create a custom provider of data fom a file, you'll need to do the following steps: Create a custom provider of data Create your own custom faker which extends Faker and register custom provider","title":"Custom provider using Yaml file"},{"location":"documentation/custom-providers/#yaml-provider","text":"First, create the custom provider which loads the data from a file: Java public static class InsectFromFile extends AbstractProvider < BaseProviders > { private static final String KEY = \"insectsfromfile\" ; public InsectFromFile ( BaseProviders faker ) { super ( faker ); faker . addPath ( Locale . ENGLISH , Paths . get ( \"src/test/ants.yml\" )); faker . addPath ( Locale . ENGLISH , Paths . get ( \"src/test/bees.yml\" )); } public String ant () { return resolve ( KEY + \".ants\" , null , faker ); } public String bee () { return resolve ( KEY + \".bees\" , null , faker ); } } The ants.yml would look like the following: en : faker : insectsfromfile : ants : [ 'Driver ant' , 'Fire ant' , 'Harvester ant' , 'Honey ant' , 'Leafcutter ant' , 'Sahara desert ant' ] And if you want to use multiple YAML files, the bees.yml would look like this: en : faker : insectsfromfile : bees : [ 'Bumblebee' , 'Euglossine bee' , 'Honeybee' , 'Carpenter bee' , 'Leaf-cutter bee' , 'Mining bee' ]","title":"Yaml provider"},{"location":"documentation/custom-providers/#register-provider_1","text":"Registering the provider would happen like this: Java public static class MyCustomFaker extends Faker { public InsectFromFile insectFromFile () { return getProvider ( InsectFromFile . class , InsectFromFile :: new , this ); } }","title":"Register provider"},{"location":"documentation/custom-providers/#usage_1","text":"To use the custom faker, you can do the following: Java MyCustomFaker myFaker = new MyCustomFaker (); System . out . println ( myFaker . insectFromFile (). ant ()); This will print something like the following: Honey ant","title":"Usage"},{"location":"documentation/date-format/","text":"Date formats \u00b6 Since 1.2.0 Datafaker supports specifying of date formats for dates and timestamps. Java Faker faker = new Faker (); System . out . println ( faker . date (). future ( 1 , TimeUnit . HOURS , \"YYYY MM.dd mm:hh:ss\" ); System . out . println ( faker . date (). past ( 1 , TimeUnit . HOURS , \"YYYY-MM-dd mm:hh:ss\" ); System . out . println ( faker . date (). birthday ( 1 , 99 , \"YYYY/MM/dd\" ); And also this feature could be used in expressions like Java faker . expression ( \"#{date.past '15','SECONDS','dd/MM/yyyy hh:mm:ss'}\" ) List of available time units: Name Time unit Since NANO NANOSECOND 1.2.0 NANOS NANOSECOND 1.2.0 MICRO MICROSECOND 1.2.0 MICROS MICROSECOND 1.2.0 MILLI MILLISECOND 1.2.0 MILLIS MILLISECOND 1.2.0 SECOND SECOND 1.2.0 SECONDS SECOND 1.2.0 MINUTE MINUTE 1.2.0 MINUTES MINUTE 1.2.0 HOUR HOUR 1.2.0 HOURS HOUR 1.2.0 DAY DAY 1.2.0 DAYS DAY 1.2.0","title":"Date format"},{"location":"documentation/date-format/#date-formats","text":"Since 1.2.0 Datafaker supports specifying of date formats for dates and timestamps. Java Faker faker = new Faker (); System . out . println ( faker . date (). future ( 1 , TimeUnit . HOURS , \"YYYY MM.dd mm:hh:ss\" ); System . out . println ( faker . date (). past ( 1 , TimeUnit . HOURS , \"YYYY-MM-dd mm:hh:ss\" ); System . out . println ( faker . date (). birthday ( 1 , 99 , \"YYYY/MM/dd\" ); And also this feature could be used in expressions like Java faker . expression ( \"#{date.past '15','SECONDS','dd/MM/yyyy hh:mm:ss'}\" ) List of available time units: Name Time unit Since NANO NANOSECOND 1.2.0 NANOS NANOSECOND 1.2.0 MICRO MICROSECOND 1.2.0 MICROS MICROSECOND 1.2.0 MILLI MILLISECOND 1.2.0 MILLIS MILLISECOND 1.2.0 SECOND SECOND 1.2.0 SECONDS SECOND 1.2.0 MINUTE MINUTE 1.2.0 MINUTES MINUTE 1.2.0 HOUR HOUR 1.2.0 HOURS HOUR 1.2.0 DAY DAY 1.2.0 DAYS DAY 1.2.0","title":"Date formats"},{"location":"documentation/expressions/","text":"Expressions \u00b6 Datafaker supports different kind of expressions which allows to customise the output. Letterify \u00b6 This one will replace ? symbols with latin letters e.g. Faker faker = new Faker (); faker . expression ( \"#{letterify 'test????test'}\" ); // could give e.g. testqwastest // Also there could a third argument telling if characters should be uppercase faker . expression ( \"#{letterify 'test????test','true'}\" ); // could give e.g. testSKDLtest Numerify \u00b6 This one will replace # symbols with digits e.g. Faker faker = new Faker (); faker . expression ( \"#{numerify '#test#'}\" ); // could give e.g. 3test5 faker . expression ( \"#{numerify '####'}\" ); // could give e.g. 1234 Bothify \u00b6 Applies both letterify and numerify e.g. Faker faker = new Faker (); faker . expression ( \"#{bothify '?#?#?#?#'}\" ); // could give a1b2c3d4 faker . expression ( \"#{bothify '?#?#?#?#', 'true'}\" ); // could give A1B2C3D4 Templatify \u00b6 This is available since 1.2.0 This one will replace symbol mentioned in the second args with one of symbols mentioned after it. Faker faker = new Faker (); // e.g. there is expression test and we want to replace t with q or @ faker . expression ( \"#{templatify 'test','t','q','@'}\" ); // could give @esq // another example there is expression test and we want to replace t with q or @ or $ or * faker . expression ( \"#{templatify 'test','t','q','@','$','*'}\" ); // could give @esq Examplify \u00b6 This one will replace symbols by example: uppercase with uppercase, digit with digit, lowercase with lowercase. Faker faker = new Faker (); faker . expression ( \"#{examplify 'ABC'}\" ); // could give QWE faker . expression ( \"#{examplify 'test'}\" ); // could give ghjk Regexify \u00b6 This one allows generating output based on regexp, e.g. Faker faker = new Faker (); faker . expression ( \"#{regexify '(a|b){2,3}'}\" ); // could give ab faker . regexify ( \"[a-z]{4,10}\" ); // could give wbevoa Options \u00b6 This is available since 1.2.0 This will return one from the provided options e.g. Faker faker = new Faker (); faker . expression ( \"#{options.option 'ABC','2','5','$'}\" ); // could give $ faker . expression ( \"#{options.option '23','2','5','$','%','*'}\" ); // could give * Csv \u00b6 This is available since 1.4.0 The expression will return generated csv based on input parameters faker . expression ( \"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\" ); // \"name_column\",\"last_name_column\" // \"Sabrina\",\"Kihn\" faker . expression ( \"#{csv ' ### ','\\\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\" ); // \"Thad\" ### \"Crist\" // \"Kathryne\" ### \"Wuckert\" // \"Sybil\" ### \"Connelly\" Json \u00b6 This is available since 1.4.0 The expression will return generated json based on input parameters faker . expression ( \"#{json 'person','#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}','address','#{json ''country'',''#{Address.country}'',''city'',''#{Address.city}''}'}\" ); // {\"person\": {\"first_name\": \"Barbie\", \"last_name\": \"Durgan\"}, \"address\": {\"country\": \"Albania\", \"city\": \"East Catarinahaven\"}} Others \u00b6 It is possible to call methods returning string values and taking primitive or string args via expressions e.g. Faker faker = new Faker (); faker . expression ( \"#{date.birthday 'yy DDD hh:mm:ss'}\" ); faker . expression ( \"#{color.name}\" );","title":"Expressions"},{"location":"documentation/expressions/#expressions","text":"Datafaker supports different kind of expressions which allows to customise the output.","title":"Expressions"},{"location":"documentation/expressions/#letterify","text":"This one will replace ? symbols with latin letters e.g. Faker faker = new Faker (); faker . expression ( \"#{letterify 'test????test'}\" ); // could give e.g. testqwastest // Also there could a third argument telling if characters should be uppercase faker . expression ( \"#{letterify 'test????test','true'}\" ); // could give e.g. testSKDLtest","title":"Letterify"},{"location":"documentation/expressions/#numerify","text":"This one will replace # symbols with digits e.g. Faker faker = new Faker (); faker . expression ( \"#{numerify '#test#'}\" ); // could give e.g. 3test5 faker . expression ( \"#{numerify '####'}\" ); // could give e.g. 1234","title":"Numerify"},{"location":"documentation/expressions/#bothify","text":"Applies both letterify and numerify e.g. Faker faker = new Faker (); faker . expression ( \"#{bothify '?#?#?#?#'}\" ); // could give a1b2c3d4 faker . expression ( \"#{bothify '?#?#?#?#', 'true'}\" ); // could give A1B2C3D4","title":"Bothify"},{"location":"documentation/expressions/#templatify","text":"This is available since 1.2.0 This one will replace symbol mentioned in the second args with one of symbols mentioned after it. Faker faker = new Faker (); // e.g. there is expression test and we want to replace t with q or @ faker . expression ( \"#{templatify 'test','t','q','@'}\" ); // could give @esq // another example there is expression test and we want to replace t with q or @ or $ or * faker . expression ( \"#{templatify 'test','t','q','@','$','*'}\" ); // could give @esq","title":"Templatify"},{"location":"documentation/expressions/#examplify","text":"This one will replace symbols by example: uppercase with uppercase, digit with digit, lowercase with lowercase. Faker faker = new Faker (); faker . expression ( \"#{examplify 'ABC'}\" ); // could give QWE faker . expression ( \"#{examplify 'test'}\" ); // could give ghjk","title":"Examplify"},{"location":"documentation/expressions/#regexify","text":"This one allows generating output based on regexp, e.g. Faker faker = new Faker (); faker . expression ( \"#{regexify '(a|b){2,3}'}\" ); // could give ab faker . regexify ( \"[a-z]{4,10}\" ); // could give wbevoa","title":"Regexify"},{"location":"documentation/expressions/#options","text":"This is available since 1.2.0 This will return one from the provided options e.g. Faker faker = new Faker (); faker . expression ( \"#{options.option 'ABC','2','5','$'}\" ); // could give $ faker . expression ( \"#{options.option '23','2','5','$','%','*'}\" ); // could give *","title":"Options"},{"location":"documentation/expressions/#csv","text":"This is available since 1.4.0 The expression will return generated csv based on input parameters faker . expression ( \"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\" ); // \"name_column\",\"last_name_column\" // \"Sabrina\",\"Kihn\" faker . expression ( \"#{csv ' ### ','\\\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\" ); // \"Thad\" ### \"Crist\" // \"Kathryne\" ### \"Wuckert\" // \"Sybil\" ### \"Connelly\"","title":"Csv"},{"location":"documentation/expressions/#json","text":"This is available since 1.4.0 The expression will return generated json based on input parameters faker . expression ( \"#{json 'person','#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}','address','#{json ''country'',''#{Address.country}'',''city'',''#{Address.city}''}'}\" ); // {\"person\": {\"first_name\": \"Barbie\", \"last_name\": \"Durgan\"}, \"address\": {\"country\": \"Albania\", \"city\": \"East Catarinahaven\"}}","title":"Json"},{"location":"documentation/expressions/#others","text":"It is possible to call methods returning string values and taking primitive or string args via expressions e.g. Faker faker = new Faker (); faker . expression ( \"#{date.birthday 'yy DDD hh:mm:ss'}\" ); faker . expression ( \"#{color.name}\" );","title":"Others"},{"location":"documentation/first-time-contributor/","text":"First time contributor guide \u00b6 So you are contributing your first PR, that's great! This guide will help you get started. Getting started \u00b6 To get started, you will need to fork the repository and clone it to your local machine. You can find a guide on how to do this here . If this is your first time contributing to an open source project, you can read this guide . Making changes \u00b6 Before making changes it is recommended to create an issue on the repository. This will allow you to discuss the changes you want to make. This will also allow you to get feedback on your changes before you start. It is also recommended to create to read the documentation on contributing to Datafaker. This will help you get started. See CONTRIBUTING.md Creating a branch \u00b6 You are free to name the branch as you see fit. It could be descriptive to give an idea of what you are working on but there are no strict rules. Committing changes \u00b6 When committing changes, there are no strict rules. However, descriptive commit messages are welcomed. This will help others understand what you are working on. Creating a pull request \u00b6 When your changes are ready and pushed to your fork, you can create a pull request. This will allow you to discuss your changes and get feedback.","title":"First time contributor"},{"location":"documentation/first-time-contributor/#first-time-contributor-guide","text":"So you are contributing your first PR, that's great! This guide will help you get started.","title":"First time contributor guide"},{"location":"documentation/first-time-contributor/#getting-started","text":"To get started, you will need to fork the repository and clone it to your local machine. You can find a guide on how to do this here . If this is your first time contributing to an open source project, you can read this guide .","title":"Getting started"},{"location":"documentation/first-time-contributor/#making-changes","text":"Before making changes it is recommended to create an issue on the repository. This will allow you to discuss the changes you want to make. This will also allow you to get feedback on your changes before you start. It is also recommended to create to read the documentation on contributing to Datafaker. This will help you get started. See CONTRIBUTING.md","title":"Making changes"},{"location":"documentation/first-time-contributor/#creating-a-branch","text":"You are free to name the branch as you see fit. It could be descriptive to give an idea of what you are working on but there are no strict rules.","title":"Creating a branch"},{"location":"documentation/first-time-contributor/#committing-changes","text":"When committing changes, there are no strict rules. However, descriptive commit messages are welcomed. This will help others understand what you are working on.","title":"Committing changes"},{"location":"documentation/first-time-contributor/#creating-a-pull-request","text":"When your changes are ready and pushed to your fork, you can create a pull request. This will allow you to discuss your changes and get feedback.","title":"Creating a pull request"},{"location":"documentation/formats/","text":"Formats (This is DEPRECATED functionality! Please have a look at Transformation Schemas instead) \u00b6 Since version 1.2.0 of Datafaker it's possible to export generated data to a file format of your choice. The currently supported file formats are: XML XML \u00b6 Elements and attributes \u00b6 In case you want to generate XML, Datafaker provides a facility to build XML elements and attributes using randomly generated data in the following way: Java public static void main ( String [] args ) { Faker faker = new Faker (); Collection < Xml . XmlNode > address = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"address\" , map ( entry ( \"country\" , faker . address (). country ()), entry ( \"city\" , faker . address (). city ()), entry ( \"streetAddress\" , faker . address (). streetAddress ())), Collections . emptyList ())) . maxLen ( 3 ). build (). get (); Collection < Xml . XmlNode > persons = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"person\" , map ( entry ( \"firstname\" , faker . name (). firstName ()), entry ( \"lastname\" , faker . name (). lastName ())), of ( new Xml . XmlNode ( \"addresses\" , address )))). maxLen ( 3 ). build (). get (); String str = new Xml ( new Xml . XmlNode ( \"persons\" , persons )). generate ( true ); System . out . println ( str ); } private static < T > Collection < T > of ( T ... elems ) { return Arrays . asList ( elems ); } private static Map . Entry < String , String > entry ( String key , String value ) { return new AbstractMap . SimpleEntry <> ( key , value ); } private static Map < String , String > map ( Map . Entry < String , String > ... entries ) { Map < String , String > map = new LinkedHashMap <> (); for ( Map . Entry < String , String > entry : entries ) { map . put ( entry . getKey (), entry . getValue ()); } return map ; } This will produce the following output: <persons> <person firstname= \"Chuck\" lastname= \"Rice\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> <person firstname= \"Brent\" lastname= \"Walter\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> <person firstname= \"Amy\" lastname= \"Parisian\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> </persons> Elements only \u00b6 In case you only want to generate XML elements, without any attributes, that possible too: Java Faker faker = new Faker (); Collection < Xml . XmlNode > address = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"address\" , of ( new Xml . XmlNode ( \"country\" , faker . address (). country ()), new Xml . XmlNode ( \"city\" , faker . address (). city ()), new Xml . XmlNode ( \"streetAddress\" , faker . address (). streetAddress ())))) . maxLen ( 4 ). build (). get (); Collection < Xml . XmlNode > persons = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"person\" , of ( new Xml . XmlNode ( \"firstname\" , faker . name (). firstName ()), new Xml . XmlNode ( \"lastname\" , faker . name (). lastName ()), new Xml . XmlNode ( \"addresses\" , address )))). maxLen ( 2 ). build (). get (); String str = new Xml ( new Xml . XmlNode ( \"persons\" , persons )). generate ( true ); System . out . println ( str ); Executing the above will result in: <persons> <person> <firstname> Shiloh </firstname> <lastname> Witting </lastname> <addresses> <address> <country> Azerbaijan </country> <city> Port Alta </city> <streetAddress> 50808 Rickey Plains </streetAddress> </address> <address> <country> Congo </country> <city> North Eleonoraton </city> <streetAddress> 956 Omer Mountain </streetAddress> </address> <address> <country> Niue </country> <city> Port Darleneshire </city> <streetAddress> 363 Rocco Square </streetAddress> </address> <address> <country> Argentina </country> <city> Maritzamouth </city> <streetAddress> 369 Mosciski Knolls </streetAddress> </address> </addresses> </person> <person> <firstname> Louisa </firstname> <lastname> Howell </lastname> <addresses> <address> <country> Azerbaijan </country> <city> Port Alta </city> <streetAddress> 50808 Rickey Plains </streetAddress> </address> <address> <country> Congo </country> <city> North Eleonoraton </city> <streetAddress> 956 Omer Mountain </streetAddress> </address> <address> <country> Niue </country> <city> Port Darleneshire </city> <streetAddress> 363 Rocco Square </streetAddress> </address> <address> <country> Argentina </country> <city> Maritzamouth </city> <streetAddress> 369 Mosciski Knolls </streetAddress> </address> </addresses> </person> </persons>","title":"Formats"},{"location":"documentation/formats/#formats-this-is-deprecated-functionality-please-have-a-look-at-transformation-schemas-instead","text":"Since version 1.2.0 of Datafaker it's possible to export generated data to a file format of your choice. The currently supported file formats are: XML","title":"Formats (This is DEPRECATED functionality! Please have a look at Transformation Schemas instead)"},{"location":"documentation/formats/#xml","text":"","title":"XML"},{"location":"documentation/formats/#elements-and-attributes","text":"In case you want to generate XML, Datafaker provides a facility to build XML elements and attributes using randomly generated data in the following way: Java public static void main ( String [] args ) { Faker faker = new Faker (); Collection < Xml . XmlNode > address = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"address\" , map ( entry ( \"country\" , faker . address (). country ()), entry ( \"city\" , faker . address (). city ()), entry ( \"streetAddress\" , faker . address (). streetAddress ())), Collections . emptyList ())) . maxLen ( 3 ). build (). get (); Collection < Xml . XmlNode > persons = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"person\" , map ( entry ( \"firstname\" , faker . name (). firstName ()), entry ( \"lastname\" , faker . name (). lastName ())), of ( new Xml . XmlNode ( \"addresses\" , address )))). maxLen ( 3 ). build (). get (); String str = new Xml ( new Xml . XmlNode ( \"persons\" , persons )). generate ( true ); System . out . println ( str ); } private static < T > Collection < T > of ( T ... elems ) { return Arrays . asList ( elems ); } private static Map . Entry < String , String > entry ( String key , String value ) { return new AbstractMap . SimpleEntry <> ( key , value ); } private static Map < String , String > map ( Map . Entry < String , String > ... entries ) { Map < String , String > map = new LinkedHashMap <> (); for ( Map . Entry < String , String > entry : entries ) { map . put ( entry . getKey (), entry . getValue ()); } return map ; } This will produce the following output: <persons> <person firstname= \"Chuck\" lastname= \"Rice\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> <person firstname= \"Brent\" lastname= \"Walter\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> <person firstname= \"Amy\" lastname= \"Parisian\" > <addresses> <address country= \"Croatia\" city= \"South Stacimouth\" streetAddress= \"8958 Ervin Stravenue\" /> <address country= \"Uruguay\" city= \"South Cariefort\" streetAddress= \"59014 Howell Pike\" /> <address country= \"Bahrain\" city= \"New Ian\" streetAddress= \"446 Wuckert Brooks\" /> </addresses> </person> </persons>","title":"Elements and attributes"},{"location":"documentation/formats/#elements-only","text":"In case you only want to generate XML elements, without any attributes, that possible too: Java Faker faker = new Faker (); Collection < Xml . XmlNode > address = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"address\" , of ( new Xml . XmlNode ( \"country\" , faker . address (). country ()), new Xml . XmlNode ( \"city\" , faker . address (). city ()), new Xml . XmlNode ( \"streetAddress\" , faker . address (). streetAddress ())))) . maxLen ( 4 ). build (). get (); Collection < Xml . XmlNode > persons = faker . < Xml . XmlNode > collection () . suppliers (() -> new Xml . XmlNode ( \"person\" , of ( new Xml . XmlNode ( \"firstname\" , faker . name (). firstName ()), new Xml . XmlNode ( \"lastname\" , faker . name (). lastName ()), new Xml . XmlNode ( \"addresses\" , address )))). maxLen ( 2 ). build (). get (); String str = new Xml ( new Xml . XmlNode ( \"persons\" , persons )). generate ( true ); System . out . println ( str ); Executing the above will result in: <persons> <person> <firstname> Shiloh </firstname> <lastname> Witting </lastname> <addresses> <address> <country> Azerbaijan </country> <city> Port Alta </city> <streetAddress> 50808 Rickey Plains </streetAddress> </address> <address> <country> Congo </country> <city> North Eleonoraton </city> <streetAddress> 956 Omer Mountain </streetAddress> </address> <address> <country> Niue </country> <city> Port Darleneshire </city> <streetAddress> 363 Rocco Square </streetAddress> </address> <address> <country> Argentina </country> <city> Maritzamouth </city> <streetAddress> 369 Mosciski Knolls </streetAddress> </address> </addresses> </person> <person> <firstname> Louisa </firstname> <lastname> Howell </lastname> <addresses> <address> <country> Azerbaijan </country> <city> Port Alta </city> <streetAddress> 50808 Rickey Plains </streetAddress> </address> <address> <country> Congo </country> <city> North Eleonoraton </city> <streetAddress> 956 Omer Mountain </streetAddress> </address> <address> <country> Niue </country> <city> Port Darleneshire </city> <streetAddress> 363 Rocco Square </streetAddress> </address> <address> <country> Argentina </country> <city> Maritzamouth </city> <streetAddress> 369 Mosciski Knolls </streetAddress> </address> </addresses> </person> </persons>","title":"Elements only"},{"location":"documentation/getting-started/","text":"Getting started \u00b6 Datafaker is a library for Java and Kotlin to generate fake data. This can be very helpful when generating test data to fill a database, to generate data for a stress test, or anonymize data from production services. Installation \u00b6 The latest version of Datafaker is 2.1.0 and is hosted on Maven Central. Datafaker can be included in your project using most dependency management tools: Maven Gradle (Groovy) Gradle (Kotlin) Ivy <dependency> <groupId>net.datafaker</groupId> <artifactId>datafaker</artifactId> <version>2.1.0</version> </dependency> dependencies { implementation 'net.datafaker:datafaker:2.1.0' } dependencies { implementation ( \"net.datafaker:datafaker:2.1.0\" ) } <dependency org = \"net.datafaker\" name = \"datafaker\" rev = \"2.1.0\" /> Snapshot versions \u00b6 It's also possible to use the latest snapshot version (currently 2.1.1-SNAPSHOT) by including the Sonatype snapshot repository in your configuration. A Gradle example can be found below: repositories { mavenCentral () maven ( url = \"https://s01.oss.sonatype.org/content/repositories/snapshots\" ) } dependencies { implementation ( \"net.datafaker:datafaker:2.1.1-SNAPSHOT\" ) } Usage \u00b6 To use Datafaker to generate fake data, you can use the following code as an example: Java Kotlin import net.datafaker.Faker ; Faker faker = new Faker (); String name = faker . name (). fullName (); // Miss Samanta Schmidt String firstName = faker . name (). firstName (); // Emory String lastName = faker . name (). lastName (); // Barton String streetAddress = faker . address (). streetAddress (); // 60018 Sawayn Brooks Suite 449 import net.datafaker.Faker val faker = Faker() val name = faker.name().fullName() // Miss Samanta Schmidt val firstName = faker.name().firstName() // Emory val lastName = faker.name().lastName() // Barton val streetAddress = faker.address().streetAddress() // 60018 Sawayn Brooks Suite 449 For a full list of all the fake data providers, have a look at the reference documentation.","title":"Getting started"},{"location":"documentation/getting-started/#getting-started","text":"Datafaker is a library for Java and Kotlin to generate fake data. This can be very helpful when generating test data to fill a database, to generate data for a stress test, or anonymize data from production services.","title":"Getting started"},{"location":"documentation/getting-started/#installation","text":"The latest version of Datafaker is 2.1.0 and is hosted on Maven Central. Datafaker can be included in your project using most dependency management tools: Maven Gradle (Groovy) Gradle (Kotlin) Ivy <dependency> <groupId>net.datafaker</groupId> <artifactId>datafaker</artifactId> <version>2.1.0</version> </dependency> dependencies { implementation 'net.datafaker:datafaker:2.1.0' } dependencies { implementation ( \"net.datafaker:datafaker:2.1.0\" ) } <dependency org = \"net.datafaker\" name = \"datafaker\" rev = \"2.1.0\" />","title":"Installation"},{"location":"documentation/getting-started/#snapshot-versions","text":"It's also possible to use the latest snapshot version (currently 2.1.1-SNAPSHOT) by including the Sonatype snapshot repository in your configuration. A Gradle example can be found below: repositories { mavenCentral () maven ( url = \"https://s01.oss.sonatype.org/content/repositories/snapshots\" ) } dependencies { implementation ( \"net.datafaker:datafaker:2.1.1-SNAPSHOT\" ) }","title":"Snapshot versions"},{"location":"documentation/getting-started/#usage","text":"To use Datafaker to generate fake data, you can use the following code as an example: Java Kotlin import net.datafaker.Faker ; Faker faker = new Faker (); String name = faker . name (). fullName (); // Miss Samanta Schmidt String firstName = faker . name (). firstName (); // Emory String lastName = faker . name (). lastName (); // Barton String streetAddress = faker . address (). streetAddress (); // 60018 Sawayn Brooks Suite 449 import net.datafaker.Faker val faker = Faker() val name = faker.name().fullName() // Miss Samanta Schmidt val firstName = faker.name().firstName() // Emory val lastName = faker.name().lastName() // Barton val streetAddress = faker.address().streetAddress() // 60018 Sawayn Brooks Suite 449 For a full list of all the fake data providers, have a look at the reference documentation.","title":"Usage"},{"location":"documentation/license/","text":"License \u00b6 Datafaker is licensed under the Apache License 2.0 Copyright 2023 Datafaker.net Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"documentation/license/#license","text":"Datafaker is licensed under the Apache License 2.0 Copyright 2023 Datafaker.net Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"documentation/performance140/","text":"Performance benchmarks \u00b6 This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects. Hardware & Software \u00b6 All the tests are done with help of JMH at Fedora 36 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics. Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.11.0) vs JFairy (0.6.5) \u00b6 Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other. Recently, the 1.4.0 version of Datafaker has been released, and we'll look into what this says about performance improvements. To demonstrate the performance, we're going to use JMH benchmarks. All the code is available as a separate project because of JMH license reasons. Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases. JDK effects \u00b6 Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk18 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking such improvements from updating java version which partially were fixed in Datafaker. There is also Kotlin-faker , which a performance comparison table in README page. Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking Faker.name().name() performance. Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker Original Kotlin Faker Test \u00b6 (for different libs there should be different classes, for more details look in the code): net.datafaker.benchmark.kotlinfakerbenchmark Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2352.789 \u00b1 61.214 ms/op Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2428.885 \u00b1 19.153 ms/op Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 1985.712 \u00b1 27.692 ms/op Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 12026.367 \u00b1 103.005 ms/op Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 11985.717 \u00b1 202.768 ms/op Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 9910.120 \u00b1 334.016 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2530.238 \u00b1 86.146 ms/op Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2522.862 \u00b1 19.028 ms/op Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 2376.537 \u00b1 28.235 ms/op ATTENTION! In this test we measure not throughput but the average time of one operation => lower is better. In general, we could say that for jdk8 and jdk11 timings for Datafaker and Kotlin Faker are more or less similar and for jdk18 Datafaker is about 20% faster. JFairy and Java Faker are far behind. Initialization \u00b6 It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers. Tests for initialization could be found at net.datafaker.benchmark.initialization Initialization: Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2446.670 \u00b1 15.040 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2633.235 \u00b1 143.345 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3840.849 \u00b1 143.408 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 23.834 \u00b1 0.217 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23.316 \u00b1 0.417 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 27.717 \u00b1 0.575 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.266 \u00b1 0.008 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.253 \u00b1 0.015 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.276 \u00b1 0.006 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.018 \u00b1 0.001 ops/ms Simple methods fullname , firstname , address \u00b6 Performance of simple method calls like fullname , firstname , address . Tests could be found at net.datafaker.benchmark.simplemethods Firstname: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1381.132 \u00b1 9.388 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1523.378 \u00b1 10.667 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1640.834 \u00b1 59.306 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 232.055 \u00b1 2.842 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 257.667 \u00b1 1.610 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 301.318 \u00b1 2.774 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.971 \u00b1 0.881 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 137.098 \u00b1 2.846 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 148.091 \u00b1 2.048 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 904.868 \u00b1 6.883 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 965.916 \u00b1 27.270 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1074.216 \u00b1 98.063 ops/ms Fullname: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 433.824 \u00b1 21.696 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 517.713 \u00b1 24.944 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 535.289 \u00b1 5.651 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 81.282 \u00b1 1.199 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 85.278 \u00b1 2.770 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 106.813 \u00b1 1.710 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.874 \u00b1 0.564 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.762 \u00b1 1.933 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 143.378 \u00b1 1.582 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 407.972 \u00b1 6.095 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 447.162 \u00b1 5.546 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 448.645 \u00b1 28.789 ops/ms StreetAddress: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 291.779 \u00b1 3.699 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 319.959 \u00b1 7.984 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 339.846 \u00b1 9.068 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 42.421 \u00b1 0.497 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 43.939 \u00b1 0.571 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 66.658 \u00b1 0.811 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 113.572 \u00b1 1.644 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.216 \u00b1 0.465 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 145.778 \u00b1 2.186 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 76.850 \u00b1 6.447 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 100.451 \u00b1 0.480 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 99.861 \u00b1 1.799 ops/ms String template operations \u00b6 From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations. So, the tests are done based on Kotlin Faker's doc page Numerify: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 46027.055 \u00b1 4323.326 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 45048.868 \u00b1 1976.526 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 47427.468 \u00b1 423.228 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 27089.972 \u00b1 1244.279 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23325.344 \u00b1 265.684 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 30599.747 \u00b1 548.377 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4503.070 \u00b1 60.716 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4886.276 \u00b1 51.213 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5504.774 \u00b1 57.402 ops/ms Letterify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 41273.044 \u00b1 1247.091 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 47005.203 \u00b1 2799.484 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 48441.249 \u00b1 1040.172 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 30510.549 \u00b1 589.002 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 30869.658 \u00b1 2137.318 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 21462.296 \u00b1 530.481 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4861.635 \u00b1 69.498 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4746.286 \u00b1 71.018 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5223.486 \u00b1 46.612 ops/ms Bothify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 21785.504 \u00b1 596.322 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 22618.331 \u00b1 825.949 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 23757.533 \u00b1 172.493 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 11096.829 \u00b1 574.783 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 9118.489 \u00b1 336.647 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 8296.013 \u00b1 76.493 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1693.124 \u00b1 62.691 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1762.054 \u00b1 78.296 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1908.346 \u00b1 41.831 ops/ms Regexify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2206.095 \u00b1 33.280 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2616.809 \u00b1 34.568 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3454.312 \u00b1 11.464 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 267.981 \u00b1 3.333 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 261.420 \u00b1 0.822 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 325.523 \u00b1 2.777 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 366.627 \u00b1 23.346 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 347.008 \u00b1 3.380 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 434.123 \u00b1 1.089 ops/ms Expressions \u00b6 Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all. net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings Bothify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1918.381 \u00b1 91.410 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1868.298 \u00b1 27.953 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2169.941 \u00b1 45.504 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 207.428 \u00b1 2.923 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.868 \u00b1 2.023 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 298.704 \u00b1 4.315 ops/ms Letterify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1821.056 \u00b1 70.109 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1922.130 \u00b1 16.922 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2104.585 \u00b1 81.704 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 205.280 \u00b1 3.724 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.239 \u00b1 1.535 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 316.426 \u00b1 5.495 ops/ms Regexify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1273.177 \u00b1 8.818 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1235.418 \u00b1 11.646 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1607.923 \u00b1 34.328 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 120.409 \u00b1 0.993 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 121.226 \u00b1 0.670 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 158.919 \u00b1 1.609 ops/ms Method invocations \u00b6 Also, both Java Faker and Datafaker allow invocation of methods from expression. Let's consider an example where in expression it is required to parse and process only one method. In Datafaker, a was added cache for the parsing of methods. Since only Datafaker and Java Faker support method invocations, there are only these 2 projects tested: Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1020.388 \u00b1 12.270 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1057.132 \u00b1 27.611 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1113.307 \u00b1 21.496 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 145.144 \u00b1 2.523 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 147.812 \u00b1 2.206 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 207.275 \u00b1 3.522 ops/ms Similar example as previous, however there are 3 methods. Besides, cache of parsed methods there was also added cache for parsed args. Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 276.175 \u00b1 6.503 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 321.559 \u00b1 12.098 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 334.248 \u00b1 12.733 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 33.567 \u00b1 0.515 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 36.055 \u00b1 0.460 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 49.014 \u00b1 1.994 ops/ms It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis. More Fun \u00b6 There is an issue in Java Faker about generation of 100M of objects. Of course, the task could be solved with concurrent generation in multiple threads. However, here it is interesting how much a 1 thread application can generated in 1 hour. The code below for Datafaker generates a bit more than 170M objects for 1 hour. The same code for Java Faker generates about 38M for 1 hour, meaning on average, Datafaker is about 4x faster than Javafaker. Kotlin Faker does not support setting of birthday and blood. Without these 2 params it generates about 90M for 1 hour. net.datafaker.benchmark.generate_one_hour","title":"Datafaker 1.4.0"},{"location":"documentation/performance140/#performance-benchmarks","text":"This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects.","title":"Performance benchmarks"},{"location":"documentation/performance140/#hardware-software","text":"All the tests are done with help of JMH at Fedora 36 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics.","title":"Hardware &amp; Software"},{"location":"documentation/performance140/#datafaker-140-vs-java-faker-102-vs-kotlin-faker-1110-vs-jfairy-065","text":"Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other. Recently, the 1.4.0 version of Datafaker has been released, and we'll look into what this says about performance improvements. To demonstrate the performance, we're going to use JMH benchmarks. All the code is available as a separate project because of JMH license reasons. Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases.","title":"Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.11.0) vs JFairy (0.6.5)"},{"location":"documentation/performance140/#jdk-effects","text":"Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk18 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking such improvements from updating java version which partially were fixed in Datafaker. There is also Kotlin-faker , which a performance comparison table in README page. Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking Faker.name().name() performance. Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker","title":"JDK effects"},{"location":"documentation/performance140/#original-kotlin-faker-test","text":"(for different libs there should be different classes, for more details look in the code): net.datafaker.benchmark.kotlinfakerbenchmark Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2352.789 \u00b1 61.214 ms/op Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2428.885 \u00b1 19.153 ms/op Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 1985.712 \u00b1 27.692 ms/op Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 12026.367 \u00b1 103.005 ms/op Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 11985.717 \u00b1 202.768 ms/op Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 9910.120 \u00b1 334.016 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 2530.238 \u00b1 86.146 ms/op Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 2522.862 \u00b1 19.028 ms/op Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 2376.537 \u00b1 28.235 ms/op ATTENTION! In this test we measure not throughput but the average time of one operation => lower is better. In general, we could say that for jdk8 and jdk11 timings for Datafaker and Kotlin Faker are more or less similar and for jdk18 Datafaker is about 20% faster. JFairy and Java Faker are far behind.","title":"Original Kotlin Faker Test"},{"location":"documentation/performance140/#initialization","text":"It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers. Tests for initialization could be found at net.datafaker.benchmark.initialization Initialization: Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2446.670 \u00b1 15.040 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2633.235 \u00b1 143.345 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3840.849 \u00b1 143.408 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 23.834 \u00b1 0.217 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23.316 \u00b1 0.417 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 27.717 \u00b1 0.575 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.266 \u00b1 0.008 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.253 \u00b1 0.015 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.276 \u00b1 0.006 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 0.017 \u00b1 0.001 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 0.018 \u00b1 0.001 ops/ms","title":"Initialization"},{"location":"documentation/performance140/#simple-methods-fullname-firstname-address","text":"Performance of simple method calls like fullname , firstname , address . Tests could be found at net.datafaker.benchmark.simplemethods","title":"Simple methods fullname, firstname, address"},{"location":"documentation/performance140/#firstname","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1381.132 \u00b1 9.388 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1523.378 \u00b1 10.667 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1640.834 \u00b1 59.306 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 232.055 \u00b1 2.842 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 257.667 \u00b1 1.610 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 301.318 \u00b1 2.774 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.971 \u00b1 0.881 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 137.098 \u00b1 2.846 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 148.091 \u00b1 2.048 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 904.868 \u00b1 6.883 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 965.916 \u00b1 27.270 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1074.216 \u00b1 98.063 ops/ms","title":"Firstname:"},{"location":"documentation/performance140/#fullname","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 433.824 \u00b1 21.696 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 517.713 \u00b1 24.944 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 535.289 \u00b1 5.651 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 81.282 \u00b1 1.199 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 85.278 \u00b1 2.770 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 106.813 \u00b1 1.710 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 114.874 \u00b1 0.564 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.762 \u00b1 1.933 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 143.378 \u00b1 1.582 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 407.972 \u00b1 6.095 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 447.162 \u00b1 5.546 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 448.645 \u00b1 28.789 ops/ms","title":"Fullname:"},{"location":"documentation/performance140/#streetaddress","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 291.779 \u00b1 3.699 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 319.959 \u00b1 7.984 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 339.846 \u00b1 9.068 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 42.421 \u00b1 0.497 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 43.939 \u00b1 0.571 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 66.658 \u00b1 0.811 ops/ms JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 113.572 \u00b1 1.644 ops/ms JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 136.216 \u00b1 0.465 ops/ms JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 145.778 \u00b1 2.186 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 76.850 \u00b1 6.447 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 100.451 \u00b1 0.480 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 99.861 \u00b1 1.799 ops/ms","title":"StreetAddress:"},{"location":"documentation/performance140/#string-template-operations","text":"From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations. So, the tests are done based on Kotlin Faker's doc page","title":"String template operations"},{"location":"documentation/performance140/#numerify","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 46027.055 \u00b1 4323.326 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 45048.868 \u00b1 1976.526 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 47427.468 \u00b1 423.228 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 27089.972 \u00b1 1244.279 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 23325.344 \u00b1 265.684 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 30599.747 \u00b1 548.377 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4503.070 \u00b1 60.716 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4886.276 \u00b1 51.213 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5504.774 \u00b1 57.402 ops/ms","title":"Numerify:"},{"location":"documentation/performance140/#letterify","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 41273.044 \u00b1 1247.091 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 47005.203 \u00b1 2799.484 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 48441.249 \u00b1 1040.172 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 30510.549 \u00b1 589.002 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 30869.658 \u00b1 2137.318 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 21462.296 \u00b1 530.481 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 4861.635 \u00b1 69.498 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 4746.286 \u00b1 71.018 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 5223.486 \u00b1 46.612 ops/ms","title":"Letterify:"},{"location":"documentation/performance140/#bothify","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 21785.504 \u00b1 596.322 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 22618.331 \u00b1 825.949 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 23757.533 \u00b1 172.493 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 11096.829 \u00b1 574.783 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 9118.489 \u00b1 336.647 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 8296.013 \u00b1 76.493 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1693.124 \u00b1 62.691 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1762.054 \u00b1 78.296 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1908.346 \u00b1 41.831 ops/ms","title":"Bothify:"},{"location":"documentation/performance140/#regexify","text":"Subject Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 2206.095 \u00b1 33.280 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 2616.809 \u00b1 34.568 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 3454.312 \u00b1 11.464 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 267.981 \u00b1 3.333 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 261.420 \u00b1 0.822 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 325.523 \u00b1 2.777 ops/ms Kotlin Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 366.627 \u00b1 23.346 ops/ms Kotlin Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 347.008 \u00b1 3.380 ops/ms Kotlin Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 434.123 \u00b1 1.089 ops/ms","title":"Regexify:"},{"location":"documentation/performance140/#expressions","text":"Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all. net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings","title":"Expressions"},{"location":"documentation/performance140/#bothify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1918.381 \u00b1 91.410 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1868.298 \u00b1 27.953 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2169.941 \u00b1 45.504 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 207.428 \u00b1 2.923 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.868 \u00b1 2.023 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 298.704 \u00b1 4.315 ops/ms","title":"Bothify expression:"},{"location":"documentation/performance140/#letterify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1821.056 \u00b1 70.109 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1922.130 \u00b1 16.922 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 2104.585 \u00b1 81.704 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 205.280 \u00b1 3.724 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 208.239 \u00b1 1.535 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 316.426 \u00b1 5.495 ops/ms","title":"Letterify expression:"},{"location":"documentation/performance140/#regexify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1273.177 \u00b1 8.818 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1235.418 \u00b1 11.646 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1607.923 \u00b1 34.328 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 120.409 \u00b1 0.993 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 121.226 \u00b1 0.670 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 158.919 \u00b1 1.609 ops/ms","title":"Regexify expression:"},{"location":"documentation/performance140/#method-invocations","text":"Also, both Java Faker and Datafaker allow invocation of methods from expression. Let's consider an example where in expression it is required to parse and process only one method. In Datafaker, a was added cache for the parsing of methods. Since only Datafaker and Java Faker support method invocations, there are only these 2 projects tested: Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 1020.388 \u00b1 12.270 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 1057.132 \u00b1 27.611 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 1113.307 \u00b1 21.496 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 145.144 \u00b1 2.523 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 147.812 \u00b1 2.206 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 207.275 \u00b1 3.522 ops/ms Similar example as previous, however there are 3 methods. Besides, cache of parsed methods there was also added cache for parsed args. Project Java Version Mode Cnt Score Units Datafaker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 276.175 \u00b1 6.503 ops/ms Datafaker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 321.559 \u00b1 12.098 ops/ms Datafaker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 334.248 \u00b1 12.733 ops/ms Java Faker openjdk-1.8.0.332.b09-1.fc36.x86_64 thrpt 10 33.567 \u00b1 0.515 ops/ms Java Faker openjdk-11.0.15.0.10-1.fc36.x86_64 thrpt 10 36.055 \u00b1 0.460 ops/ms Java Faker openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 thrpt 10 49.014 \u00b1 1.994 ops/ms It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis.","title":"Method invocations"},{"location":"documentation/performance140/#more-fun","text":"There is an issue in Java Faker about generation of 100M of objects. Of course, the task could be solved with concurrent generation in multiple threads. However, here it is interesting how much a 1 thread application can generated in 1 hour. The code below for Datafaker generates a bit more than 170M objects for 1 hour. The same code for Java Faker generates about 38M for 1 hour, meaning on average, Datafaker is about 4x faster than Javafaker. Kotlin Faker does not support setting of birthday and blood. Without these 2 params it generates about 90M for 1 hour. net.datafaker.benchmark.generate_one_hour","title":"More Fun"},{"location":"documentation/performance170/","text":"Performance benchmarks \u00b6 This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects. Hardware & Software \u00b6 All the tests are done with help of JMH at Fedora 37 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics. Datafaker (1.7.0) vs Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.13.0) vs JFairy (0.6.5) \u00b6 Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other. Recently, the 1.7.0 version of Datafaker has been released, and we'll look into what this says about performance improvements. To demonstrate the performance, we're going to use JMH benchmarks. All the code is available as a separate project because of JMH license reasons. Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases. JDK effects \u00b6 Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk19 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking such improvements from updating java version which partially were fixed in Datafaker. There is also Kotlin-faker , which a performance comparison table in README page. Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking Faker.name().name() performance. Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker Original Kotlin Faker Test \u00b6 (for different libs there should be different classes, for more details look in the code): net.datafaker.benchmark.kotlinfakerbenchmark Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 659.362 \u00b1 65.740 ms/op Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 523.569 \u00b1 14.033 ms/op Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 472.270 \u00b1 45.679 ms/op Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 486.267 \u00b1 14.501 ms/op Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 12146.879 \u00b1 106.738 ms/op Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 11879.473 \u00b1 281.136 ms/op Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 9847.805 \u00b1 292.088 ms/op Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 9411.708 \u00b1 149.752 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 2588.774 \u00b1 160.853 ms/op Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 1909.895 \u00b1 53.884 ms/op Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 1332.293 \u00b1 36.930 ms/op Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 1803.990 \u00b1 26.429 ms/op ATTENTION! In this test we measure not throughput but the average time of one operation => lower is better. 1.7.0 Datafaker looks much faster than others in this test. Initialization \u00b6 It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers. Tests for initialization could be found at net.datafaker.benchmark.initialization Initialization: Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1770.056 \u00b1 23.905 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2189.480 \u00b1 93.875 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2825.415 \u00b1 119.968 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2498.148 \u00b1 21.015 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 24.847 \u00b1 0.520 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 25.630 \u00b1 1.178 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 34.029 \u00b1 1.227 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 30.559 \u00b1 0.179 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 0.260 \u00b1 0.010 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 0.253 \u00b1 0.012 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 0.279 \u00b1 0.004 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 0.273 \u00b1 0.010 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 290.887 \u00b1 0.799 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 271.947 \u00b1 1.289 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 265.584 \u00b1 5.756 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 266.037 \u00b1 2.999 ops/ms Simple methods fullname , firstname , address \u00b6 Performance of simple method calls like fullname , firstname , address . Tests could be found at net.datafaker.benchmark.simplemethods Firstname: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 3087.829 \u00b1 21.698 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 4876.539 \u00b1 262.490 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 4982.802 \u00b1 28.234 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4953.212 \u00b1 177.312 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.796 \u00b1 8.644 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 235.770 \u00b1 1.619 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 294.121 \u00b1 15.599 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 288.382 \u00b1 2.770 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 114.964 \u00b1 0.986 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 139.915 \u00b1 1.446 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 149.559 \u00b1 1.306 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 148.669 \u00b1 0.986 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1327.995 \u00b1 298.392 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1269.240 \u00b1 143.267 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1746.555 \u00b1 104.489 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1421.184 \u00b1 20.329 ops/ms Fullname: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1681.933 \u00b1 25.017 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2144.822 \u00b1 90.151 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2178.651 \u00b1 27.219 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2166.699 \u00b1 106.132 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 81.140 \u00b1 0.570 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 84.408 \u00b1 3.909 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 99.199 \u00b1 2.024 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 104.506 \u00b1 2.861 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 111.744 \u00b1 2.459 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 137.069 \u00b1 1.346 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 147.787 \u00b1 1.270 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 146.856 \u00b1 2.407 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 396.399 \u00b1 3.653 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 522.469 \u00b1 15.708 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 746.832 \u00b1 21.802 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 545.365 \u00b1 23.483 ops/ms StreetAddress: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1124.835 \u00b1 22.068 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1260.726 \u00b1 11.418 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1363.289 \u00b1 37.035 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1219.488 \u00b1 9.408 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 42.751 \u00b1 0.440 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 43.101 \u00b1 0.559 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 59.785 \u00b1 3.270 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 57.944 \u00b1 0.415 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 113.553 \u00b1 1.889 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 138.431 \u00b1 1.314 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 146.255 \u00b1 1.918 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 144.412 \u00b1 0.684 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 78.245 \u00b1 1.265 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 97.818 \u00b1 7.926 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 108.132 \u00b1 4.515 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 101.432 \u00b1 1.645 ops/ms String template operations \u00b6 From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations. So, the tests are done based on Kotlin Faker's doc page Numerify: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 43284.011 \u00b1 2480.512 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 41784.591 \u00b1 930.326 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44165.964 \u00b1 906.038 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 43090.660 \u00b1 1431.219 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 26869.455 \u00b1 171.590 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 24186.835 \u00b1 452.751 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 24898.424 \u00b1 910.303 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 25363.478 \u00b1 995.818 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4710.176 \u00b1 63.139 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 6055.504 \u00b1 306.761 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7172.360 \u00b1 68.914 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6743.303 \u00b1 88.353 ops/ms Letterify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 44238.161 \u00b1 460.133 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 40382.343 \u00b1 169.415 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44153.720 \u00b1 720.553 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 44967.669 \u00b1 1853.888 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 32327.400 \u00b1 267.620 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 30619.871 \u00b1 534.152 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 21062.038 \u00b1 534.198 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 21367.003 \u00b1 120.525 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 5219.411 \u00b1 73.725 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5716.061 \u00b1 210.304 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6906.832 \u00b1 136.554 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6410.062 \u00b1 195.229 ops/ms Bothify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 28442.736 \u00b1 1427.555 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 28309.247 \u00b1 408.859 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 25577.048 \u00b1 496.402 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 28418.711 \u00b1 486.121 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 11220.600 \u00b1 255.977 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 9533.013 \u00b1 176.400 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7527.531 \u00b1 189.662 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 7375.935 \u00b1 78.468 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1741.742 \u00b1 32.551 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2099.828 \u00b1 97.784 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1943.925 \u00b1 115.053 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1906.066 \u00b1 235.425 ops/ms Regexify: \u00b6 Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 2265.164 \u00b1 19.465 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2454.718 \u00b1 24.566 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 3582.163 \u00b1 133.808 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 3530.937 \u00b1 67.913 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 267.510 \u00b1 1.897 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 269.823 \u00b1 5.012 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 315.347 \u00b1 2.404 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 309.691 \u00b1 11.170 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 385.765 \u00b1 3.909 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 391.847 \u00b1 8.465 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 501.743 \u00b1 4.972 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 514.578 \u00b1 9.987 ops/ms Expressions \u00b6 Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all. net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings Bothify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4544.086 \u00b1 163.034 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5085.459 \u00b1 313.491 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5160.930 \u00b1 115.282 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5077.901 \u00b1 19.463 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 221.838 \u00b1 6.682 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 221.997 \u00b1 2.176 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 318.869 \u00b1 10.933 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 318.498 \u00b1 1.566 ops/ms Letterify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4719.075 \u00b1 110.980 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5467.370 \u00b1 415.581 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5852.925 \u00b1 263.841 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4897.141 \u00b1 223.026 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.018 \u00b1 4.009 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.348 \u00b1 1.540 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 339.493 \u00b1 7.604 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 348.010 \u00b1 4.090 ops/ms Numerify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4919.219 \u00b1 173.782 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5706.372 \u00b1 200.001 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6258.169 \u00b1 208.217 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5916.530 \u00b1 119.690 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 233.994 \u00b1 4.356 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.713 \u00b1 1.796 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 334.916 \u00b1 3.537 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 338.545 \u00b1 19.560 ops/ms Regexify expression: \u00b6 Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1843.609 \u00b1 25.113 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2012.095 \u00b1 24.405 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2610.217 \u00b1 101.287 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2616.375 \u00b1 39.477 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 126.065 \u00b1 4.649 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 125.829 \u00b1 0.747 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 163.896 \u00b1 0.420 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 164.620 \u00b1 2.021 ops/ms Method invocations \u00b6 Method invocations for the case of Datafaker and Javafaker are covered by simple method calls like full name and address since under the hood there are method invocations. It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis.","title":"Datafaker 1.7.0"},{"location":"documentation/performance170/#performance-benchmarks","text":"This page is trying to go through some performance metrics and see how better/worse Datafaker is in compare with Java Faker and other similar projects.","title":"Performance benchmarks"},{"location":"documentation/performance170/#hardware-software","text":"All the tests are done with help of JMH at Fedora 37 for different JDKs (mentioned in tables below). The laptop has 32Gb of RAM, AMD Ryzen 7 PRO 5850U with Radeon Graphics.","title":"Hardware &amp; Software"},{"location":"documentation/performance170/#datafaker-170-vs-datafaker-140-vs-java-faker-102-vs-kotlin-faker-1130-vs-jfairy-065","text":"Originally Datafaker started as a fork of java-faker. For java-faker there have been mentions of the poor performance of the library, and this document will compare the performance of the respective libraries against each other. Recently, the 1.7.0 version of Datafaker has been released, and we'll look into what this says about performance improvements. To demonstrate the performance, we're going to use JMH benchmarks. All the code is available as a separate project because of JMH license reasons. Since it's hardly possible and reasonable to compare each method's performance, we'll focus on a subset of features in this article. In the below, you can see that Datafaker is about 10x-100x times faster for several cases.","title":"Datafaker (1.7.0) vs Datafaker (1.4.0) vs Java Faker (1.0.2) vs Kotlin-faker (1.13.0) vs JFairy (0.6.5)"},{"location":"documentation/performance170/#jdk-effects","text":"Also, there is an interesting fact: in case of Datafaker moving from jdk8 to jdk19 performance is improving up to 25%, while for Java Faker it is not happening. It seems in Java Faker there are some time-consuming operations blocking such improvements from updating java version which partially were fixed in Datafaker. There is also Kotlin-faker , which a performance comparison table in README page. Unfortunately there is not so much information what kind of benchmarks have been executed. After some search across the project I was able to find only this page So, it looks like the only test which were done is checking Faker.name().name() performance. Ok, let's start with the similar test here. Similar, because we are going to use JMH which was not used in their test. If applicable we try to execute same tests we did for previous section. So let's start with the original test from Kotlin Faker","title":"JDK effects"},{"location":"documentation/performance170/#original-kotlin-faker-test","text":"(for different libs there should be different classes, for more details look in the code): net.datafaker.benchmark.kotlinfakerbenchmark Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 659.362 \u00b1 65.740 ms/op Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 523.569 \u00b1 14.033 ms/op Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 472.270 \u00b1 45.679 ms/op Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 486.267 \u00b1 14.501 ms/op Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 12146.879 \u00b1 106.738 ms/op Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 11879.473 \u00b1 281.136 ms/op Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 9847.805 \u00b1 292.088 ms/op Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 9411.708 \u00b1 149.752 ms/op JFairy openjdk-1.8.0.332.b09-1.fc36.x86_64 avgt 10 10429.579 \u00b1 79.899 ms/op JFairy openjdk-11.0.15.0.10-1.fc36.x86_64 avgt 10 8921.440 \u00b1 88.582 ms/op JFairy openjdk-18.0.1.0.10-1.rolling.fc36.x86_64 avgt 10 8371.050 \u00b1 47.380 ms/op Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 avgt 10 2588.774 \u00b1 160.853 ms/op Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 avgt 10 1909.895 \u00b1 53.884 ms/op Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 avgt 10 1332.293 \u00b1 36.930 ms/op Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 avgt 10 1803.990 \u00b1 26.429 ms/op ATTENTION! In this test we measure not throughput but the average time of one operation => lower is better. 1.7.0 Datafaker looks much faster than others in this test.","title":"Original Kotlin Faker Test"},{"location":"documentation/performance170/#initialization","text":"It's worth to measure since initially during initialization of Faker object it requires to initialise all the providers objects and read all the yaml files for providers. Tests for initialization could be found at net.datafaker.benchmark.initialization Initialization: Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1770.056 \u00b1 23.905 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2189.480 \u00b1 93.875 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2825.415 \u00b1 119.968 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2498.148 \u00b1 21.015 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 24.847 \u00b1 0.520 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 25.630 \u00b1 1.178 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 34.029 \u00b1 1.227 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 30.559 \u00b1 0.179 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 0.260 \u00b1 0.010 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 0.253 \u00b1 0.012 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 0.279 \u00b1 0.004 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 0.273 \u00b1 0.010 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 290.887 \u00b1 0.799 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 271.947 \u00b1 1.289 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 265.584 \u00b1 5.756 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 266.037 \u00b1 2.999 ops/ms","title":"Initialization"},{"location":"documentation/performance170/#simple-methods-fullname-firstname-address","text":"Performance of simple method calls like fullname , firstname , address . Tests could be found at net.datafaker.benchmark.simplemethods","title":"Simple methods fullname, firstname, address"},{"location":"documentation/performance170/#firstname","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 3087.829 \u00b1 21.698 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 4876.539 \u00b1 262.490 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 4982.802 \u00b1 28.234 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4953.212 \u00b1 177.312 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.796 \u00b1 8.644 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 235.770 \u00b1 1.619 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 294.121 \u00b1 15.599 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 288.382 \u00b1 2.770 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 114.964 \u00b1 0.986 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 139.915 \u00b1 1.446 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 149.559 \u00b1 1.306 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 148.669 \u00b1 0.986 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1327.995 \u00b1 298.392 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1269.240 \u00b1 143.267 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1746.555 \u00b1 104.489 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1421.184 \u00b1 20.329 ops/ms","title":"Firstname:"},{"location":"documentation/performance170/#fullname","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1681.933 \u00b1 25.017 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2144.822 \u00b1 90.151 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2178.651 \u00b1 27.219 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2166.699 \u00b1 106.132 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 81.140 \u00b1 0.570 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 84.408 \u00b1 3.909 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 99.199 \u00b1 2.024 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 104.506 \u00b1 2.861 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 111.744 \u00b1 2.459 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 137.069 \u00b1 1.346 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 147.787 \u00b1 1.270 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 146.856 \u00b1 2.407 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 396.399 \u00b1 3.653 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 522.469 \u00b1 15.708 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 746.832 \u00b1 21.802 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 545.365 \u00b1 23.483 ops/ms","title":"Fullname:"},{"location":"documentation/performance170/#streetaddress","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1124.835 \u00b1 22.068 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 1260.726 \u00b1 11.418 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1363.289 \u00b1 37.035 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1219.488 \u00b1 9.408 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 42.751 \u00b1 0.440 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 43.101 \u00b1 0.559 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 59.785 \u00b1 3.270 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 57.944 \u00b1 0.415 ops/ms JFairy JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 113.553 \u00b1 1.889 ops/ms JFairy JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 138.431 \u00b1 1.314 ops/ms JFairy JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 146.255 \u00b1 1.918 ops/ms JFairy JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 144.412 \u00b1 0.684 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 78.245 \u00b1 1.265 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 97.818 \u00b1 7.926 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 108.132 \u00b1 4.515 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 101.432 \u00b1 1.645 ops/ms","title":"StreetAddress:"},{"location":"documentation/performance170/#string-template-operations","text":"From one side Kotlin Faker and JFairy do not support expressions, from the other side Kotlin Faker supports numerify/bothify/letterify and regexify operations. So, the tests are done based on Kotlin Faker's doc page","title":"String template operations"},{"location":"documentation/performance170/#numerify","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 43284.011 \u00b1 2480.512 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 41784.591 \u00b1 930.326 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44165.964 \u00b1 906.038 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 43090.660 \u00b1 1431.219 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 26869.455 \u00b1 171.590 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 24186.835 \u00b1 452.751 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 24898.424 \u00b1 910.303 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 25363.478 \u00b1 995.818 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4710.176 \u00b1 63.139 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 6055.504 \u00b1 306.761 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7172.360 \u00b1 68.914 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6743.303 \u00b1 88.353 ops/ms","title":"Numerify:"},{"location":"documentation/performance170/#letterify","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 44238.161 \u00b1 460.133 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 40382.343 \u00b1 169.415 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 44153.720 \u00b1 720.553 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 44967.669 \u00b1 1853.888 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 32327.400 \u00b1 267.620 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 30619.871 \u00b1 534.152 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 21062.038 \u00b1 534.198 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 21367.003 \u00b1 120.525 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 5219.411 \u00b1 73.725 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5716.061 \u00b1 210.304 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6906.832 \u00b1 136.554 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 6410.062 \u00b1 195.229 ops/ms","title":"Letterify:"},{"location":"documentation/performance170/#bothify","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 28442.736 \u00b1 1427.555 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 28309.247 \u00b1 408.859 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 25577.048 \u00b1 496.402 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 28418.711 \u00b1 486.121 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 11220.600 \u00b1 255.977 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 9533.013 \u00b1 176.400 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 7527.531 \u00b1 189.662 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 7375.935 \u00b1 78.468 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1741.742 \u00b1 32.551 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2099.828 \u00b1 97.784 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 1943.925 \u00b1 115.053 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 1906.066 \u00b1 235.425 ops/ms","title":"Bothify:"},{"location":"documentation/performance170/#regexify","text":"Subject Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 2265.164 \u00b1 19.465 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2454.718 \u00b1 24.566 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 3582.163 \u00b1 133.808 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 3530.937 \u00b1 67.913 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 267.510 \u00b1 1.897 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 269.823 \u00b1 5.012 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 315.347 \u00b1 2.404 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 309.691 \u00b1 11.170 ops/ms Kotlin Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 385.765 \u00b1 3.909 ops/ms Kotlin Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 391.847 \u00b1 8.465 ops/ms Kotlin Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 501.743 \u00b1 4.972 ops/ms Kotlin Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 514.578 \u00b1 9.987 ops/ms","title":"Regexify:"},{"location":"documentation/performance170/#expressions","text":"Since both Java Faker and Datafaker provide expression functionality like letterify, bothify, regexify, it would make sense to see the difference. Here, it is also worth mentioning that for different patterns score could be different, however it is impossible to check all. net.datafaker.benchmark.templatestrings.DatafakerTemplateStrings","title":"Expressions"},{"location":"documentation/performance170/#bothify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4544.086 \u00b1 163.034 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5085.459 \u00b1 313.491 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5160.930 \u00b1 115.282 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5077.901 \u00b1 19.463 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 221.838 \u00b1 6.682 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 221.997 \u00b1 2.176 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 318.869 \u00b1 10.933 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 318.498 \u00b1 1.566 ops/ms","title":"Bothify expression:"},{"location":"documentation/performance170/#letterify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4719.075 \u00b1 110.980 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5467.370 \u00b1 415.581 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 5852.925 \u00b1 263.841 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 4897.141 \u00b1 223.026 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 231.018 \u00b1 4.009 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.348 \u00b1 1.540 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 339.493 \u00b1 7.604 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 348.010 \u00b1 4.090 ops/ms","title":"Letterify expression:"},{"location":"documentation/performance170/#numerify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 4919.219 \u00b1 173.782 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 5706.372 \u00b1 200.001 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 6258.169 \u00b1 208.217 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 5916.530 \u00b1 119.690 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 233.994 \u00b1 4.356 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 231.713 \u00b1 1.796 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 334.916 \u00b1 3.537 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 338.545 \u00b1 19.560 ops/ms","title":"Numerify expression:"},{"location":"documentation/performance170/#regexify-expression","text":"Project Java Version Mode Cnt Score Units Datafaker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 1843.609 \u00b1 25.113 ops/ms Datafaker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 2012.095 \u00b1 24.405 ops/ms Datafaker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 2610.217 \u00b1 101.287 ops/ms Datafaker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 2616.375 \u00b1 39.477 ops/ms Java Faker JDK 1.8.0_352, OpenJDK 64-Bit Server VM, 25.352-b08 thrpt 10 126.065 \u00b1 4.649 ops/ms Java Faker JDK 11.0.17, OpenJDK 64-Bit Server VM, 11.0.17+8 thrpt 10 125.829 \u00b1 0.747 ops/ms Java Faker JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8 thrpt 10 163.896 \u00b1 0.420 ops/ms Java Faker JDK 19.0.1, OpenJDK 64-Bit Server VM, 19.0.1+10 thrpt 10 164.620 \u00b1 2.021 ops/ms","title":"Regexify expression:"},{"location":"documentation/performance170/#method-invocations","text":"Method invocations for the case of Datafaker and Javafaker are covered by simple method calls like full name and address since under the hood there are method invocations. It makes sense to keep in mind that these tests do not cover all possible use cases and could be considered only as a starting point for analysis.","title":"Method invocations"},{"location":"documentation/providers/","text":"Fake Data Providers \u00b6 Provider groups: \u00b6 Base (Providers of everyday data) Entertainment (Providers for movies, shows, books) Food (Providers for different types of food) Sport (Providers for different types of sport) Videogame (Video game providers) Number of providers per Datafaker version Version Number of new providers Total number of providers 0.8.0 94 94 0.9.0 12 106 1.0.0 4 110 1.1.0 2 112 1.2.0 7 119 1.3.0 9 128 1.4.0 15 143 1.5.0 22 165 1.6.0 10 175 1.7.0 21 196 1.8.0 34 230 2.0.0 3 233 2.0.2 1 234 2.0.3 1 235 2.1.0 1 236 2.2.0 1 237 Datafaker comes with a total of 237 data providers: Name Description Group Since Address Base 0.8.0 Ancient Base 0.8.0 Animal Base 0.8.0 App Base 0.8.0 Appliance Base 1.0.0 Aqua Teen Hunger Force Entertainment 0.8.0 Artist Base 0.8.0 Australia Base 1.2.0 Avatar Entertainment 0.8.0 Aviation Generates aviation related strings. Base 0.8.0 Aws Base 1.3.0 Azure Generates data for Azure services. This is based on the Azure best practices of naming conventions: Base 1.7.0 Babylon5 Entertainment 0.9.0 Back To The Future Entertainment 0.8.0 Barcode Base 0.9.0 Baseball Generate random components of baseball game, e.g. teams, coaches, positions and players. Sport 1.7.0 Basketball Generate random components of basketball game, e.g. teams, coaches, positions and players. Sport 0.8.0 Battlefield1 Battlefield 1 is a first-person shooter game developed by DICE and published by Electronic Arts. Videogame 1.4.0 Beer Food 0.8.0 Big Bang Theory Entertainment 1.5.0 Blood Type Base 1.4.0 Bojack Horseman Generate random parts in BojackHorseman. Entertainment 0.8.0 Book Base 0.8.0 Bool Base 0.8.0 Bossa Nova Bossa nova is a style of samba developed in the late 1950s and early 1960s in Rio de Janeiro, Brazil. Entertainment 1.0.0 Brand Generate random sport wearing brand, car brand or watch brand. Only generate brand by types of products. Base 1.8.0 Breaking Bad Breaking Bad is an American neo-Western crime drama television series. Entertainment 1.0.0 Brooklyn Nine Nine Brooklyn Nine-Nine is an American police procedural comedy television series. Entertainment 1.3.0 Buffy Entertainment 0.8.0 Business Base 0.8.0 CNPJ The Brazil National Registry of Legal Entities number (CNPJ) is a company identification number that must be obtained from the Department of Federal Revenue prior to the start of any business activities. Base 1.1.0 CPF The CPF number (Cadastro de Pessoas F\u00edsicas, [sepe\u02c8\u025bfi]; Portuguese for \"Natural Persons Register\") Base 0.8.0 Camera Base 1.4.0 Cannabis Base 1.5.0 Cat Base 0.8.0 Chess Sport 1.8.0 Chiquito Base 1.6.0 Chuck Norris Entertainment 0.8.0 Clash Of Clans Clash of Clans is a 2012 free-to-play mobile strategy video game developed and published by Finnish game developer Supercell. Videogame 1.6.0 Code Generates codes such as ISBN, gin, ean and others. Base 0.8.0 Coffee Food 1.5.0 Coin Base 0.8.0 Color Base 0.8.0 Commerce Base 0.8.0 Community Community is an American television sitcom created by Dan Harmon. Base 1.6.0 Company Base 0.8.0 Compass Base 1.7.0 Computer Generates different attributes related to computers, such as operating systems, types, platforms and brands. Base 1.5.0 Construction Base 1.5.0 Control Control is an action-adventure game developed by Remedy Entertainment and published by 505 Games. Videogame 1.7.0 Cosmere The cosmere is a fictional shared universe where several of Brandon Sanderson's books take place. Base 1.7.0 Country Base 0.8.0 Cowboy Bebop Cowboy Bebop is a Japanese neo-noir science fiction anime television series, which originally ran from 1998 to 1999. Entertainment 1.8.0 Cricket Sport 1.7.0 Crypto Coin Base 1.3.0 Culture Series The Culture series is a science fiction series written by Scottish author Iain M. Banks and released from 1987 through to 2012. Base 1.7.0 Currency Base 0.8.0 Dark Souls Dark Souls is a series of action role-playing games created by Hidetaka Miyazaki of FromSoftware and published by Bandai Namco Entertainment. Videogame 1.5.0 Date And Time A generator of random dates. Base 0.8.0 Dc Comics Base 1.5.0 Demographic Base 0.8.0 Departed Entertainment 1.5.0 Dessert Food 0.9.0 Detective Conan Case Closed, also known as Detective Conan, is a Japanese detective manga series written and illustrated by Gosho Aoyama. Entertainment 1.7.0 Device Base 1.4.0 Disease Generate random, different kinds of disease. Base 0.8.0 Doctor Who Entertainment 1.8.0 Dog Base 0.8.0 Domain A domain name generator. Base 0.9.0 Doraemon Entertainment 1.7.0 Dragon Ball Entertainment 0.8.0 Driving License Base 1.5.0 Drone An unmanned aerial vehicle (UAV), commonly known as a drone, is an aircraft without any human pilot, crew, or passengers on board. Base 1.7.0 Dumb And Dumber Entertainment 1.6.0 Dune Entertainment 0.8.0 Dungeons And Dragons Dungeons and Dragons is a fantasy tabletop role-playing game originally designed by Gary Gygax and Dave Arneson. Base 1.7.0 Educator Base 0.8.0 Elden Ring Elden Ring is a 2022 action role-playing game developed by FromSoftware and published by Bandai Namco Entertainment. Videogame 1.4.0 Elder Scrolls The Elder Scrolls is a series of action role-playing video games primarily developed by Bethesda Game Studios and published by Bethesda Softworks. Videogame 0.8.0 Electrical Components Base 1.4.0 Emoji Emojis picked from Emoji 1.0 . Base 1.7.0 England Foot Ball Sport 0.9.0 Esports Esports, short for electronic sports, is a form of competition using video games. Videogame 0.8.0 Fake Duration Base 0.8.0 Fallout Fallout: A Post Nuclear Role Playing Game is a 1997 role-playing video game developed and published by Interplay Productions. Videogame 1.6.0 Family Guy Entertainment 1.7.0 Famous Last Words Base 1.5.0 File Base 0.8.0 Final Fantasy XIV Final Fantasy XIV is an MMORPG and features a persistent world in which players can interact with each other and the environment. Videogame 2.0.0 Final Space Final Space is an adult animated space opera comedy drama television series. Entertainment 1.6.0 Finance Base 0.8.0 Food Food 0.8.0 Football Sport 1.5.0 Formula1 Sport 1.2.0 Fresh Prince Of Bel Air The Fresh Prince of Bel-Air is an American television sitcom created by Andy and Susan Borowitz for NBC. Entertainment 1.7.0 Friends Entertainment 0.8.0 Fullmetal Alchemist Entertainment 1.7.0 Funny Name Base 0.8.0 Futurama Futurama is an American animated science fiction sitcom created by Matt Groening for the Fox Broadcasting Company. Entertainment 1.8.0 Game Of Thrones Entertainment 0.8.0 Garment Size This class is used to generate garments sizes randomly. Base 1.6.0 Gender This class is used to generate gender randomly. Base 0.8.0 Ghostbusters Entertainment 1.5.0 Grateful Dead The Grateful Dead was an American rock band formed in 1965 in Palo Alto, California. Entertainment 1.4.0 Greek Philosopher Base 1.5.0 Hacker Base 0.8.0 Half Life Half-Life is a series of first-person shooter games developed and published by Valve. Videogame 1.8.0 Harry Potter Entertainment 0.8.0 Hashing Base 0.8.0 Hearthstone Hearthstone is a free-to-play online digital collectible card game developed and published by Blizzard Entertainment. Videogame 0.9.0 Heroes Of The Storm Heroes of the Storm is a crossover multiplayer online battle arena video game developed and published by Blizzard Entertainment. Videogame 1.7.0 Hey Arnold Hey Arnold! is an American animated comedy television series created by Craig Bartlett. Entertainment 1.4.0 Hipster Base 0.8.0 Hitchhikers Guide To The Galaxy Entertainment 0.8.0 Hobbit Entertainment 0.8.0 Hobby Base 1.3.0 Hololive Base 1.5.0 Horse Base 1.3.0 House Base 1.5.0 How IMet Your Mother Entertainment 0.8.0 How To Train Your Dragon How to Train Your Dragon is a 2010 American computer-animated action fantasy film loosely based on the 2003 book of the same name by Cressida Cowell. Entertainment 1.8.0 Id Number Base 0.8.0 Industry Segments Base 1.5.0 Internet Base 0.8.0 Job Base 0.8.0 Joke Entertainment 2.1.0 Kaamelott Entertainment 0.8.0 Kpop K-pop, short for Korean popular music, is a genre of music originating in South Korea as part of South Korean culture. Base 1.3.0 Language Code Base 2.0.3 League Of Legends League of Legends is a 2009 multiplayer online battle arena video game developed and published by Riot Games. Videogame 0.8.0 Lebowski Entertainment 0.8.0 Locality Generates random locales in different forms. Base 1.7.0 Lord Of The Rings Entertainment 0.8.0 Lorem Base 0.8.0 Marketing Generates marketing buzzwords. Base 1.2.0 Marvel Snap Marvel Snap is a digital collectible card game developed by Second Dinner and published by Nuverse for Microsoft Windows, Android and iOS. Videogame 1.8.0 Mass Effect Mass Effect is a military science fiction media franchise. Videogame 1.6.0 Matz Base 0.8.0 Mbti Myers-Briggs Type Indicator Base 1.5.0 Measurement Base 1.5.0 Medical Base 0.8.0 Military Military ranks. Base 1.2.0 Minecraft Minecraft is a sandbox game developed by Mojang Studios. Videogame 0.9.0 Money Support for different kind of money currencies. Base 1.5.0 Money Heist Entertainment 1.7.0 Mood Base 0.9.0 Mountain A generator for Mountain names and ranges. Base 1.1.0 Mountaineering Mountaineering, or alpinism, is the set of outdoor activities that involves ascending tall mountains. Base 1.4.0 Movie Entertainment 1.5.0 Music Base 0.8.0 Myst Myst is a graphic adventure/puzzle video game designed by the Miller brothers, Robyn and Rand. Videogame 1.8.0 Name Base 0.8.0 Naruto Naruto is a Japanese manga series written and illustrated by Masashi Kishimoto, that tells the story of Naruto Uzumaki. Entertainment 1.8.0 Nation Base 0.8.0 Nato Phonetic Alphabet The NATO phonetic alphabet is the most widely used radiotelephone spelling alphabet. Base 1.2.0 New Girl New Girl is an American television sitcom created by Elizabeth Meriwether. Entertainment 1.8.0 Nigeria Nigeria, officially the Federal Republic of Nigeria, is a country in West Africa. Base 1.2.0 Number Base 0.8.0 Olympic Sport Base 1.8.0 One Piece Entertainment 1.7.0 Options Base 0.8.0 Oscar Movie The Academy Awards, popularly known as the Oscars, are awards for artistic and technical merit in the film industry. Entertainment 1.4.0 Overwatch Overwatch is a free-to-play, team-based action game set in the optimistic future. Videogame 0.8.0 Passport Base 0.9.0 Phone Number Base 0.8.0 Photography Provides photography related strings. Base 0.8.0 Planet Provides planet specific metadata like length of the day, radius, mass etc. Base 2.2.0 Pokemon Entertainment 0.8.0 Princess Bride Entertainment 0.8.0 Programming Language Base 0.8.0 Red Dead Redemption2 Red Dead Redemption 2 is an action-adventure game developed and published by Rockstar Games. Videogame 2.0.0 Relationship Base 0.8.0 Resident Evil A class for generating random value of ResidentEvil series. Entertainment 0.9.0 Restaurant Base 1.2.0 Rick And Morty Entertainment 0.8.0 Robin Base 0.8.0 Rock Band Base 0.8.0 Ru Paul Drag Race RuPaul's Drag Race is a reality competition series produced by World of Wonder for the Logo TV Network. Entertainment 1.0.0 Science Base 0.8.0 Seinfeld Seinfeld is an American sitcom television series created by Larry David and Jerry Seinfeld. Entertainment 1.4.0 Shakespeare Base 0.8.0 Show Entertainment 1.8.0 Silicon Valley Entertainment 1.8.0 Simpsons Entertainment 1.5.0 Sip Faker class for generating Session Initiation Protocol (SIP) related data. Base 0.8.0 Size Base 0.8.0 Slack Emoji Base 0.8.0 Sonic The Hedgehog Sonic the Hedgehog is a Japanese video game series and media franchise created by Sega. Videogame 1.8.0 Soul Knight Soul Knight is a game made by ChillyRoom Inc. Videogame 1.4.0 South Park South Park is an American animated television series created by Trey Parker and Matt Stone. Entertainment 1.8.0 Space Base 0.8.0 Spongebob SpongeBob SquarePants (or simply SpongeBob) is an American animated comedy television series created by marine science educator and animator Stephen Hillenburg for Nickelodeon. Entertainment 1.8.0 Star Craft StarCraft is a 1998 military science fiction real-time strategy game developed and published by Blizzard Entertainment. Videogame 0.8.0 Star Trek Entertainment 0.8.0 Star Wars Entertainment 1.6.0 Stargate Stargate is a military science fiction media franchise. Entertainment 1.8.0 Stock Base 0.8.0 Stranger Things Stranger Things is an American sci-fi television series created by the Duffer Brothers. Entertainment 1.8.0 Street Fighter Street Fighter is a Japanese media franchise centered on a series of fighting video and arcade games developed and published by Capcom. Videogame 1.8.0 Studio Ghibli Entertainment 1.7.0 Subscription Base 1.3.0 Suits Suits is an American legal drama television series created and written by Aaron Korsh. Entertainment 1.8.0 Super Mario Super Mario is a platform game series created by Nintendo starring their mascot, Mario. Videogame 1.3.0 Super Smash Bros Super Smash Bros. is a crossover fighting game series published by Nintendo. Videogame 1.8.0 Superhero Base 0.8.0 Supernatural Supernatural is an American dark fantasy drama television series created by Eric Kripke. Entertainment 1.8.0 Sword Art Online Sword Art Online is a Japanese light novel series written by Reki Kawahara and illustrated by abec. Entertainment 1.8.0 Tea Food 1.4.0 Team Base 0.8.0 Text Generates random text in a flexible way. Base 1.7.0 The Expanse The Expanse is an American science fiction television series developed by Mark Fergus and Hawk Ostby for the Syfy network. Entertainment 1.8.0 The It Crowd Entertainment 0.8.0 The Kingkiller Chronicle The Kingkiller Chronicle is a fantasy trilogy by the American writer Patrick Rothfuss. Entertainment 1.8.0 The Room The Room is a 2003 American drama film written, produced, executive produced and directed by Tommy Wiseau. Entertainment 1.8.0 The Thick Of It Entertainment 1.8.0 The Venture Bros The Venture Bros. is an American adult animated action comedy TV series. Entertainment 1.8.0 Time Base 1.4.0 Tire Sources: Base 2.0.2 Touhou The Touhou Project, also known simply as Touhou, is a bullet hell shoot 'em up video game series created by one-man independent Japanese doujin soft developer Team Shanghai Alice. Videogame 0.9.0 Transport Provides different kind of transport. Base 2.0.0 Tron Tron is a 1982 American science fiction action-adventure film. Entertainment 1.4.0 Twin Peaks Twin Peaks is an American mystery serial drama television series created by Mark Frost and David Lynch. Entertainment 0.8.0 Twitter Creates fake Twitter messages. Base 0.9.0 Unique This class contains methods that ensure uniqueness across separate invocations. Base 1.6.0 University Base 0.8.0 VFor Vendetta V for Vendetta is a 2005 dystopian political action film directed by James McTeigue from a screenplay by the Wachowskis. Entertainment 1.8.0 Vehicle Base 0.8.0 Verb Base 1.5.0 Video Game Video games are electronic games that involve interaction with a user interface or input device. Videogame 1.8.0 Volleyball Sport 1.3.0 Warhammer Fantasy Warhammer Fantasy is a tabletop miniature wargame with a medieval fantasy theme. Videogame 1.8.0 Weather A generator for weather data. Base 0.8.0 Witcher Entertainment 0.8.0 World Of Warcraft World of Warcraft is a massively multiplayer online role-playing game released in 2004 by Blizzard Entertainment. Videogame 1.8.0 Yoda Base 0.8.0 Zelda The Legend of Zelda is an action-adventure game franchise created by the Japanese game designers Shigeru Miyamoto and Takashi Tezuka. Videogame 0.8.0 Zodiac This class is used to generate Zodiac signs randomly. Base 1.8.0","title":"All providers"},{"location":"documentation/providers/#fake-data-providers","text":"","title":"Fake Data Providers"},{"location":"documentation/providers/#provider-groups","text":"Base (Providers of everyday data) Entertainment (Providers for movies, shows, books) Food (Providers for different types of food) Sport (Providers for different types of sport) Videogame (Video game providers) Number of providers per Datafaker version Version Number of new providers Total number of providers 0.8.0 94 94 0.9.0 12 106 1.0.0 4 110 1.1.0 2 112 1.2.0 7 119 1.3.0 9 128 1.4.0 15 143 1.5.0 22 165 1.6.0 10 175 1.7.0 21 196 1.8.0 34 230 2.0.0 3 233 2.0.2 1 234 2.0.3 1 235 2.1.0 1 236 2.2.0 1 237 Datafaker comes with a total of 237 data providers: Name Description Group Since Address Base 0.8.0 Ancient Base 0.8.0 Animal Base 0.8.0 App Base 0.8.0 Appliance Base 1.0.0 Aqua Teen Hunger Force Entertainment 0.8.0 Artist Base 0.8.0 Australia Base 1.2.0 Avatar Entertainment 0.8.0 Aviation Generates aviation related strings. Base 0.8.0 Aws Base 1.3.0 Azure Generates data for Azure services. This is based on the Azure best practices of naming conventions: Base 1.7.0 Babylon5 Entertainment 0.9.0 Back To The Future Entertainment 0.8.0 Barcode Base 0.9.0 Baseball Generate random components of baseball game, e.g. teams, coaches, positions and players. Sport 1.7.0 Basketball Generate random components of basketball game, e.g. teams, coaches, positions and players. Sport 0.8.0 Battlefield1 Battlefield 1 is a first-person shooter game developed by DICE and published by Electronic Arts. Videogame 1.4.0 Beer Food 0.8.0 Big Bang Theory Entertainment 1.5.0 Blood Type Base 1.4.0 Bojack Horseman Generate random parts in BojackHorseman. Entertainment 0.8.0 Book Base 0.8.0 Bool Base 0.8.0 Bossa Nova Bossa nova is a style of samba developed in the late 1950s and early 1960s in Rio de Janeiro, Brazil. Entertainment 1.0.0 Brand Generate random sport wearing brand, car brand or watch brand. Only generate brand by types of products. Base 1.8.0 Breaking Bad Breaking Bad is an American neo-Western crime drama television series. Entertainment 1.0.0 Brooklyn Nine Nine Brooklyn Nine-Nine is an American police procedural comedy television series. Entertainment 1.3.0 Buffy Entertainment 0.8.0 Business Base 0.8.0 CNPJ The Brazil National Registry of Legal Entities number (CNPJ) is a company identification number that must be obtained from the Department of Federal Revenue prior to the start of any business activities. Base 1.1.0 CPF The CPF number (Cadastro de Pessoas F\u00edsicas, [sepe\u02c8\u025bfi]; Portuguese for \"Natural Persons Register\") Base 0.8.0 Camera Base 1.4.0 Cannabis Base 1.5.0 Cat Base 0.8.0 Chess Sport 1.8.0 Chiquito Base 1.6.0 Chuck Norris Entertainment 0.8.0 Clash Of Clans Clash of Clans is a 2012 free-to-play mobile strategy video game developed and published by Finnish game developer Supercell. Videogame 1.6.0 Code Generates codes such as ISBN, gin, ean and others. Base 0.8.0 Coffee Food 1.5.0 Coin Base 0.8.0 Color Base 0.8.0 Commerce Base 0.8.0 Community Community is an American television sitcom created by Dan Harmon. Base 1.6.0 Company Base 0.8.0 Compass Base 1.7.0 Computer Generates different attributes related to computers, such as operating systems, types, platforms and brands. Base 1.5.0 Construction Base 1.5.0 Control Control is an action-adventure game developed by Remedy Entertainment and published by 505 Games. Videogame 1.7.0 Cosmere The cosmere is a fictional shared universe where several of Brandon Sanderson's books take place. Base 1.7.0 Country Base 0.8.0 Cowboy Bebop Cowboy Bebop is a Japanese neo-noir science fiction anime television series, which originally ran from 1998 to 1999. Entertainment 1.8.0 Cricket Sport 1.7.0 Crypto Coin Base 1.3.0 Culture Series The Culture series is a science fiction series written by Scottish author Iain M. Banks and released from 1987 through to 2012. Base 1.7.0 Currency Base 0.8.0 Dark Souls Dark Souls is a series of action role-playing games created by Hidetaka Miyazaki of FromSoftware and published by Bandai Namco Entertainment. Videogame 1.5.0 Date And Time A generator of random dates. Base 0.8.0 Dc Comics Base 1.5.0 Demographic Base 0.8.0 Departed Entertainment 1.5.0 Dessert Food 0.9.0 Detective Conan Case Closed, also known as Detective Conan, is a Japanese detective manga series written and illustrated by Gosho Aoyama. Entertainment 1.7.0 Device Base 1.4.0 Disease Generate random, different kinds of disease. Base 0.8.0 Doctor Who Entertainment 1.8.0 Dog Base 0.8.0 Domain A domain name generator. Base 0.9.0 Doraemon Entertainment 1.7.0 Dragon Ball Entertainment 0.8.0 Driving License Base 1.5.0 Drone An unmanned aerial vehicle (UAV), commonly known as a drone, is an aircraft without any human pilot, crew, or passengers on board. Base 1.7.0 Dumb And Dumber Entertainment 1.6.0 Dune Entertainment 0.8.0 Dungeons And Dragons Dungeons and Dragons is a fantasy tabletop role-playing game originally designed by Gary Gygax and Dave Arneson. Base 1.7.0 Educator Base 0.8.0 Elden Ring Elden Ring is a 2022 action role-playing game developed by FromSoftware and published by Bandai Namco Entertainment. Videogame 1.4.0 Elder Scrolls The Elder Scrolls is a series of action role-playing video games primarily developed by Bethesda Game Studios and published by Bethesda Softworks. Videogame 0.8.0 Electrical Components Base 1.4.0 Emoji Emojis picked from Emoji 1.0 . Base 1.7.0 England Foot Ball Sport 0.9.0 Esports Esports, short for electronic sports, is a form of competition using video games. Videogame 0.8.0 Fake Duration Base 0.8.0 Fallout Fallout: A Post Nuclear Role Playing Game is a 1997 role-playing video game developed and published by Interplay Productions. Videogame 1.6.0 Family Guy Entertainment 1.7.0 Famous Last Words Base 1.5.0 File Base 0.8.0 Final Fantasy XIV Final Fantasy XIV is an MMORPG and features a persistent world in which players can interact with each other and the environment. Videogame 2.0.0 Final Space Final Space is an adult animated space opera comedy drama television series. Entertainment 1.6.0 Finance Base 0.8.0 Food Food 0.8.0 Football Sport 1.5.0 Formula1 Sport 1.2.0 Fresh Prince Of Bel Air The Fresh Prince of Bel-Air is an American television sitcom created by Andy and Susan Borowitz for NBC. Entertainment 1.7.0 Friends Entertainment 0.8.0 Fullmetal Alchemist Entertainment 1.7.0 Funny Name Base 0.8.0 Futurama Futurama is an American animated science fiction sitcom created by Matt Groening for the Fox Broadcasting Company. Entertainment 1.8.0 Game Of Thrones Entertainment 0.8.0 Garment Size This class is used to generate garments sizes randomly. Base 1.6.0 Gender This class is used to generate gender randomly. Base 0.8.0 Ghostbusters Entertainment 1.5.0 Grateful Dead The Grateful Dead was an American rock band formed in 1965 in Palo Alto, California. Entertainment 1.4.0 Greek Philosopher Base 1.5.0 Hacker Base 0.8.0 Half Life Half-Life is a series of first-person shooter games developed and published by Valve. Videogame 1.8.0 Harry Potter Entertainment 0.8.0 Hashing Base 0.8.0 Hearthstone Hearthstone is a free-to-play online digital collectible card game developed and published by Blizzard Entertainment. Videogame 0.9.0 Heroes Of The Storm Heroes of the Storm is a crossover multiplayer online battle arena video game developed and published by Blizzard Entertainment. Videogame 1.7.0 Hey Arnold Hey Arnold! is an American animated comedy television series created by Craig Bartlett. Entertainment 1.4.0 Hipster Base 0.8.0 Hitchhikers Guide To The Galaxy Entertainment 0.8.0 Hobbit Entertainment 0.8.0 Hobby Base 1.3.0 Hololive Base 1.5.0 Horse Base 1.3.0 House Base 1.5.0 How IMet Your Mother Entertainment 0.8.0 How To Train Your Dragon How to Train Your Dragon is a 2010 American computer-animated action fantasy film loosely based on the 2003 book of the same name by Cressida Cowell. Entertainment 1.8.0 Id Number Base 0.8.0 Industry Segments Base 1.5.0 Internet Base 0.8.0 Job Base 0.8.0 Joke Entertainment 2.1.0 Kaamelott Entertainment 0.8.0 Kpop K-pop, short for Korean popular music, is a genre of music originating in South Korea as part of South Korean culture. Base 1.3.0 Language Code Base 2.0.3 League Of Legends League of Legends is a 2009 multiplayer online battle arena video game developed and published by Riot Games. Videogame 0.8.0 Lebowski Entertainment 0.8.0 Locality Generates random locales in different forms. Base 1.7.0 Lord Of The Rings Entertainment 0.8.0 Lorem Base 0.8.0 Marketing Generates marketing buzzwords. Base 1.2.0 Marvel Snap Marvel Snap is a digital collectible card game developed by Second Dinner and published by Nuverse for Microsoft Windows, Android and iOS. Videogame 1.8.0 Mass Effect Mass Effect is a military science fiction media franchise. Videogame 1.6.0 Matz Base 0.8.0 Mbti Myers-Briggs Type Indicator Base 1.5.0 Measurement Base 1.5.0 Medical Base 0.8.0 Military Military ranks. Base 1.2.0 Minecraft Minecraft is a sandbox game developed by Mojang Studios. Videogame 0.9.0 Money Support for different kind of money currencies. Base 1.5.0 Money Heist Entertainment 1.7.0 Mood Base 0.9.0 Mountain A generator for Mountain names and ranges. Base 1.1.0 Mountaineering Mountaineering, or alpinism, is the set of outdoor activities that involves ascending tall mountains. Base 1.4.0 Movie Entertainment 1.5.0 Music Base 0.8.0 Myst Myst is a graphic adventure/puzzle video game designed by the Miller brothers, Robyn and Rand. Videogame 1.8.0 Name Base 0.8.0 Naruto Naruto is a Japanese manga series written and illustrated by Masashi Kishimoto, that tells the story of Naruto Uzumaki. Entertainment 1.8.0 Nation Base 0.8.0 Nato Phonetic Alphabet The NATO phonetic alphabet is the most widely used radiotelephone spelling alphabet. Base 1.2.0 New Girl New Girl is an American television sitcom created by Elizabeth Meriwether. Entertainment 1.8.0 Nigeria Nigeria, officially the Federal Republic of Nigeria, is a country in West Africa. Base 1.2.0 Number Base 0.8.0 Olympic Sport Base 1.8.0 One Piece Entertainment 1.7.0 Options Base 0.8.0 Oscar Movie The Academy Awards, popularly known as the Oscars, are awards for artistic and technical merit in the film industry. Entertainment 1.4.0 Overwatch Overwatch is a free-to-play, team-based action game set in the optimistic future. Videogame 0.8.0 Passport Base 0.9.0 Phone Number Base 0.8.0 Photography Provides photography related strings. Base 0.8.0 Planet Provides planet specific metadata like length of the day, radius, mass etc. Base 2.2.0 Pokemon Entertainment 0.8.0 Princess Bride Entertainment 0.8.0 Programming Language Base 0.8.0 Red Dead Redemption2 Red Dead Redemption 2 is an action-adventure game developed and published by Rockstar Games. Videogame 2.0.0 Relationship Base 0.8.0 Resident Evil A class for generating random value of ResidentEvil series. Entertainment 0.9.0 Restaurant Base 1.2.0 Rick And Morty Entertainment 0.8.0 Robin Base 0.8.0 Rock Band Base 0.8.0 Ru Paul Drag Race RuPaul's Drag Race is a reality competition series produced by World of Wonder for the Logo TV Network. Entertainment 1.0.0 Science Base 0.8.0 Seinfeld Seinfeld is an American sitcom television series created by Larry David and Jerry Seinfeld. Entertainment 1.4.0 Shakespeare Base 0.8.0 Show Entertainment 1.8.0 Silicon Valley Entertainment 1.8.0 Simpsons Entertainment 1.5.0 Sip Faker class for generating Session Initiation Protocol (SIP) related data. Base 0.8.0 Size Base 0.8.0 Slack Emoji Base 0.8.0 Sonic The Hedgehog Sonic the Hedgehog is a Japanese video game series and media franchise created by Sega. Videogame 1.8.0 Soul Knight Soul Knight is a game made by ChillyRoom Inc. Videogame 1.4.0 South Park South Park is an American animated television series created by Trey Parker and Matt Stone. Entertainment 1.8.0 Space Base 0.8.0 Spongebob SpongeBob SquarePants (or simply SpongeBob) is an American animated comedy television series created by marine science educator and animator Stephen Hillenburg for Nickelodeon. Entertainment 1.8.0 Star Craft StarCraft is a 1998 military science fiction real-time strategy game developed and published by Blizzard Entertainment. Videogame 0.8.0 Star Trek Entertainment 0.8.0 Star Wars Entertainment 1.6.0 Stargate Stargate is a military science fiction media franchise. Entertainment 1.8.0 Stock Base 0.8.0 Stranger Things Stranger Things is an American sci-fi television series created by the Duffer Brothers. Entertainment 1.8.0 Street Fighter Street Fighter is a Japanese media franchise centered on a series of fighting video and arcade games developed and published by Capcom. Videogame 1.8.0 Studio Ghibli Entertainment 1.7.0 Subscription Base 1.3.0 Suits Suits is an American legal drama television series created and written by Aaron Korsh. Entertainment 1.8.0 Super Mario Super Mario is a platform game series created by Nintendo starring their mascot, Mario. Videogame 1.3.0 Super Smash Bros Super Smash Bros. is a crossover fighting game series published by Nintendo. Videogame 1.8.0 Superhero Base 0.8.0 Supernatural Supernatural is an American dark fantasy drama television series created by Eric Kripke. Entertainment 1.8.0 Sword Art Online Sword Art Online is a Japanese light novel series written by Reki Kawahara and illustrated by abec. Entertainment 1.8.0 Tea Food 1.4.0 Team Base 0.8.0 Text Generates random text in a flexible way. Base 1.7.0 The Expanse The Expanse is an American science fiction television series developed by Mark Fergus and Hawk Ostby for the Syfy network. Entertainment 1.8.0 The It Crowd Entertainment 0.8.0 The Kingkiller Chronicle The Kingkiller Chronicle is a fantasy trilogy by the American writer Patrick Rothfuss. Entertainment 1.8.0 The Room The Room is a 2003 American drama film written, produced, executive produced and directed by Tommy Wiseau. Entertainment 1.8.0 The Thick Of It Entertainment 1.8.0 The Venture Bros The Venture Bros. is an American adult animated action comedy TV series. Entertainment 1.8.0 Time Base 1.4.0 Tire Sources: Base 2.0.2 Touhou The Touhou Project, also known simply as Touhou, is a bullet hell shoot 'em up video game series created by one-man independent Japanese doujin soft developer Team Shanghai Alice. Videogame 0.9.0 Transport Provides different kind of transport. Base 2.0.0 Tron Tron is a 1982 American science fiction action-adventure film. Entertainment 1.4.0 Twin Peaks Twin Peaks is an American mystery serial drama television series created by Mark Frost and David Lynch. Entertainment 0.8.0 Twitter Creates fake Twitter messages. Base 0.9.0 Unique This class contains methods that ensure uniqueness across separate invocations. Base 1.6.0 University Base 0.8.0 VFor Vendetta V for Vendetta is a 2005 dystopian political action film directed by James McTeigue from a screenplay by the Wachowskis. Entertainment 1.8.0 Vehicle Base 0.8.0 Verb Base 1.5.0 Video Game Video games are electronic games that involve interaction with a user interface or input device. Videogame 1.8.0 Volleyball Sport 1.3.0 Warhammer Fantasy Warhammer Fantasy is a tabletop miniature wargame with a medieval fantasy theme. Videogame 1.8.0 Weather A generator for weather data. Base 0.8.0 Witcher Entertainment 0.8.0 World Of Warcraft World of Warcraft is a massively multiplayer online role-playing game released in 2004 by Blizzard Entertainment. Videogame 1.8.0 Yoda Base 0.8.0 Zelda The Legend of Zelda is an action-adventure game franchise created by the Japanese game designers Shigeru Miyamoto and Takashi Tezuka. Videogame 0.8.0 Zodiac This class is used to generate Zodiac signs randomly. Base 1.8.0","title":"Provider groups:"},{"location":"documentation/schemas/","text":"Schema and transformers \u00b6 Since version 1.7.0 of Datafaker it's possible to specify transformation schema. It also provides a set of ready to use transformers: CSV JSON SQL YAML XML Java Object Schema \u00b6 Schema is a set of rules describing what should be done to transform data from Datafaker representation to one of the supported formats. One of the main advantages of Schema is that the same schema could be used to transform to different formats. Schema can be used in 2 ways: it could be used to generate data from scratch or it could be used to transform existing data. Example of schema definition: Java Kotlin Schema < String , String > schema = Schema . of ( field ( \"first_name\" , () -> faker . name (). firstName ()), field ( \"last_name\" , () -> faker . name (). lastName ()), field ( \"address\" , () -> faker . address (). streetAddress ())); val faker = BaseFaker () val schema = Schema . of ( field ( \"first_name\" , Supplier { faker . name (). firstName () }), field ( \"last_name\" , Supplier { faker . name (). lastName () }), field < String , String > ( \"address\" , Supplier { faker . address (). streetAddress () }) ) It is also supported nested(composite) fields e.g.: Java Kotlin Schema . of ( compositeField ( \"key\" , new Field [] { field ( \"key\" , () -> \"value\" )})); Schema . of ( compositeField ( \"key\" , arrayOf ( field ( \"key\" , Supplier { \"value\" })))) CSV transformation \u00b6 CSV transformer could be build with help of CsvTransformer.CsvTransformerBuilder e.g. Java Kotlin CsvTransformer < String > transformer = CsvTransformer . < String > builder (). header ( true ). separator ( separator ). build (); val transformer = CsvTransformer . builder < String > (). header ( true ). separator ( separator ). build () The following can be configured: the separator and quotes could be specified with separator() and quote() with or without header also could be specified with header() To generate data based on a schema just call generate against schema : Java Kotlin String csv = transformer . generate ( schema , limit ); val csv = transformer . generate ( schema , limit ) Also it's possible to use schemas to transform existing data. E.g. there is a collection of Name objects and we are going to build csv of first and last names based on this collection: Java Kotlin Schema < Name , String > schema = Schema . of ( field ( \"firstName\" , Name :: firstName ), field ( \"lastname\" , Name :: lastName )); CsvTransformer < Name > transformer = CsvTransformer . < Name > builder (). header ( false ). separator ( \" : \" ). build (); String csv = transformer . generate ( faker . < Name > collection (). suppliers ( faker :: name ). maxLen ( limit ). build (), schema ); val faker = BaseFaker () val schema = Schema . of ( field ( \"firstName\" , Name :: firstName ), field ( \"lastname\" , Name :: lastName )) val transformer = CsvTransformer . builder < Name > (). header ( false ). separator ( \" : \" ). build () val csv = transformer . generate ( faker . collection < Name > (). suppliers ( Supplier { faker . name () }). maxLen ( limit ). build (), schema ) JSON transformation \u00b6 JSON transformation is very similar to CSV. The main difference is that JSON supports nested values which could be handled with help of compositeField . Example of JSON generation: Java Kotlin Schema < Object , ?> schema = Schema . of ( field ( \"Text\" , () -> faker . name (). firstName ()), field ( \"Bool\" , () -> faker . bool (). bool ()) ); JsonTransformer < Object > transformer = JsonTransformer . builder (). build (); String json = transformer . generate ( schema , 2 ); val faker = BaseFaker () val schema : Schema < String , *> = Schema . of ( field ( \"Text\" , Supplier { faker . name (). firstName () }), field ( \"Bool\" , Supplier { faker . bool (). bool () }) ) val transformer = JsonTransformer . builder < String > (). build (); val json = transformer . generate ( schema , 2 ) To use composite fields it should be defined on Schema level and nothing more. SQL Transformation \u00b6 Note: right now only INSERT is supported. It generates a number of INSERT statements. There are 2 modes: batch and non batch generation. Batch generation means that one INSERT statement contains several rows to insert. Since different databases could have different syntax there is initial support for different dialects. Dialect could be specified during SQLTransformaer build e.g: Java Kotlin SqlTransformer < String > transformer = new SqlTransformer . SqlTransformerBuilder < String > () . schemaName ( tableSchemaName ). dialect ( SqlDialect . ORACLE ). build (); val transformer = SqlTransformer . SqlTransformerBuilder < String > () . schemaName ( tableSchemaName ). dialect ( SqlDialect . ORACLE ). build () Dialect also handle SQL quote identifiers, quotes and other SQL dialect specifics. An example of batch mode: Java Kotlin Faker faker = new Faker (); Schema < String , String > schema = Schema . of ( field ( \"firstName\" , () -> faker . name (). firstName ()), field ( \"lastName\" , () -> faker . name (). lastName ())); SqlTransformer < String > transformer = new SqlTransformer . SqlTransformerBuilder < String > () . batch ( 5 ) . tableName ( \"MY_TABLE\" ) . dialect ( SqlDialect . POSTGRES ) . build (); String output = transformer . generate ( schema , 10 ); val faker = Faker () val schema : Schema < String , String > = Schema . of ( field ( \"firstName\" , Supplier { faker . name (). firstName () }), field ( \"lastName\" , Supplier { faker . name (). lastName () }) ) val transformer = SqlTransformer . SqlTransformerBuilder < String > () . batch ( 5 ) . tableName ( \"MY_TABLE\" ) . dialect ( SqlDialect . POSTGRES ) . build () val output = transformer . generate ( schema , 10 ) will generate 2 INSERT each containing 5 rows e.g. INSERT INTO MY_TABLE (\"firstName\", \"lastName\") VALUES ('Billy', 'Wintheiser'), ('Fernando', 'Sanford'), ('Jamey', 'Torp'), ('Nicolette', 'Wiza'), ('Sherman', 'Miller'); INSERT INTO MY_TABLE (\"firstName\", \"lastName\") VALUES ('Marcell', 'Walsh'), ('Kareen', 'Bode'), ('Jules', 'Homenick'), ('Lashay', 'Gaylord'), ('Tyler', 'Miller'); Advanced SQL types \u00b6 It also supports generation of ARRAY , MULTISET and ROW types. Please be aware that not every database engine supports it and datafaker could do it for every dialect. To generate ARRAY schema field should supply and array. To generate MULTISET schema field should supply a list (SQL MULTISET could contain duplicates) To generate ROW schema field should supply a compositeField e.g. Java Kotlin Schema . of ( field ( \"ints\" , () -> new int [] { 1 , 2 , 3 })); val schema : Schema < String , IntArray > = Schema . of ( field ( \"ints\" , Supplier { intArrayOf ( 1 , 2 , 3 ) })) will lead to INSERT INTO \"MyTable\" (\"ints\") VALUES (ARRAY[1, 2, 3]); Java Kotlin Schema . of ( field ( \"names_multiset\" , () -> Collections . singleton ( \"hello\" )); val schema : Schema < String , Set < String >> = Schema . of ( field ( \"names_multiset\" , Supplier { Collections . singleton ( \"hello\" ) } )) will lead to INSERT INTO \"MyTable\" (\"names_multiset\") VALUES (MULTISET['hello']); Java Kotlin schema . of ( compositeField ( \"row\" , new Field [] { field ( \"name\" , () -> \"2\" )}); Schema . of ( compositeField ( \"row\" , arrayOf ( field ( \"name\" , Supplier { \"2\" })))) will lead to INSERT INTO \"MyTable\" (\"row\") VALUES (ROW('2')); YAML transformation \u00b6 YAML transformation is very similar to CSV. The following is an example on how to use it: Java final BaseFaker faker = new BaseFaker (); YamlTransformer < Object > transformer = new YamlTransformer <> (); Schema < Object , ?> schema = Schema . of ( field ( \"name\" , () -> faker . name (). firstName ()), field ( \"lastname\" , () -> faker . name (). lastName ()), field ( \"phones\" , () -> Schema . of ( field ( \"worknumbers\" , () -> (( Stream <?> ) faker . < String > stream (). suppliers (() -> faker . phoneNumber (). phoneNumber ()). maxLen ( 2 ). build (). get ()) . collect ( Collectors . toList ())), field ( \"cellphones\" , () -> (( Stream <?> ) faker . < String > stream (). suppliers (() -> faker . phoneNumber (). cellPhone ()). maxLen ( 3 ). build (). get ()) . collect ( Collectors . toList ())) )), field ( \"address\" , () -> Schema . of ( field ( \"city\" , () -> faker . address (). city ()), field ( \"country\" , () -> faker . address (). country ()), field ( \"streetAddress\" , () -> faker . address (). streetAddress ()) )) ); System . out . println ( transformer . generate ( schema , 1 )); will generate yaml with nested fields: name: Mason lastname: Bechtelar phones: worknumbers: - (520) 205-2587 x2139 - (248) 225-6912 x4880 cellphones: - 714-269-8609 - 1-512-606-8850 - 1-386-909-7996 address: city: Port Wan country: Trinidad and Tobago streetAddress: 6510 Duncan Landing Java Object transformation \u00b6 Java Object transformer could be built with help of JavaObjectTransformer. When building JavaObjectTransformer you should provide a class to be used as a template for generated objects. Java Kotlin public static class Person { private String firstName ; private String lastName ; private Date birthDate ; private int id ; } data class Person ( var firstName : String , var lastName : String , var birthDate : Date , var id : Int ) Then you should provide a schema for the class. Java Kotlin JavaObjectTransformer jTransformer = new JavaObjectTransformer (); Schema < Object , ?> schema = Schema . of ( field ( \"firstName\" , () -> faker . name (). firstName ()), field ( \"lastName\" , () -> faker . name (). lastName ()), field ( \"birthDate\" , () -> faker . date (). birthday ()), field ( \"id\" , () -> faker . number (). positive ())); System . out . println ( jTransformer . apply ( Person . class , schema )); val jTransformer = JavaObjectTransformer () val schema : Schema < Any , Any > = Schema . of ( field ( \"firstName\" , Supplier { faker . name (). firstName () }), field ( \"lastName\" , Supplier { faker . name (). lastName () }), field ( \"birthDate\" , Supplier { faker . date (). birthday () }), field ( \"id\" , Supplier { faker . number (). positive () })) println ( jTransformer . apply ( Person :: class . java , schema )) will generate object with fields populated with random values based on specified suppliers. Populating Java Object with predefined Schema \u00b6 You can use predefined schema to populate Java Object or default schema for the class. Schema should be declared as a static method with return type Schema<Object, ?> . Java Kotlin public static Schema < Object , ?> defaultSchema () { var faker = new Faker ( Locale . forLanguageTag ( \"fr-en\" ), new RandomService ( new Random ( 1 ))); return Schema . of ( field ( \"name\" , () -> faker . name (). fullName ())); } fun defaultSchema (): Schema < Any , Any > { val faker = Faker ( Locale . forLanguageTag ( \"fr-en\" ), RandomService ( Random ( 1 ))) return Schema . of ( field ( \"name\" , Supplier { faker . name (). fullName () })) } Then you should provide a class to be used as a template for generated objects. Class should be annotated with @FakeForSchema annotation with path to the schema method as a value. Note: If default schema and class template are in the same class, you can omit full path to the method and use only method name. Java Kotlin @FakeForSchema ( \"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\" ) public class Person { private String fullName ; public String getFullName () { return fullName ; } public void setFullName ( String fullName ) { this . fullName = fullName ; } } @FakeForSchema ( \"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\" ) data class Person ( var fullName : String ) Then you can use net.datafaker.providers.base.BaseFaker.populate(java.lang.Class<T>) to populate object with default predefined schema. Java Kotlin BaseFaker faker = new BaseFaker (); Person person = faker . populate ( Person . class ); val faker = BaseFaker () val person = faker . populate ( Person :: class . java ) Or you can use net.datafaker.providers.base.BaseFaker.populate(java.lang.Class<T>, net.datafaker.schema.Schema<java.lang.Object, ?>) to populate object with custom schema. Java Kotlin BaseFaker faker = new BaseFaker (); Person person = faker . populate ( Person . class , Schema . of ( field ( \"name\" , () -> faker . superhero (). name ()))); val faker = BaseFaker () val person = faker . populate ( Person :: class . java , Schema . of ( field ( \"name\" , Supplier { faker . superhero (). name () })))","title":"Transformation schemas"},{"location":"documentation/schemas/#schema-and-transformers","text":"Since version 1.7.0 of Datafaker it's possible to specify transformation schema. It also provides a set of ready to use transformers: CSV JSON SQL YAML XML Java Object","title":"Schema and transformers"},{"location":"documentation/schemas/#schema","text":"Schema is a set of rules describing what should be done to transform data from Datafaker representation to one of the supported formats. One of the main advantages of Schema is that the same schema could be used to transform to different formats. Schema can be used in 2 ways: it could be used to generate data from scratch or it could be used to transform existing data. Example of schema definition: Java Kotlin Schema < String , String > schema = Schema . of ( field ( \"first_name\" , () -> faker . name (). firstName ()), field ( \"last_name\" , () -> faker . name (). lastName ()), field ( \"address\" , () -> faker . address (). streetAddress ())); val faker = BaseFaker () val schema = Schema . of ( field ( \"first_name\" , Supplier { faker . name (). firstName () }), field ( \"last_name\" , Supplier { faker . name (). lastName () }), field < String , String > ( \"address\" , Supplier { faker . address (). streetAddress () }) ) It is also supported nested(composite) fields e.g.: Java Kotlin Schema . of ( compositeField ( \"key\" , new Field [] { field ( \"key\" , () -> \"value\" )})); Schema . of ( compositeField ( \"key\" , arrayOf ( field ( \"key\" , Supplier { \"value\" }))))","title":"Schema"},{"location":"documentation/schemas/#csv-transformation","text":"CSV transformer could be build with help of CsvTransformer.CsvTransformerBuilder e.g. Java Kotlin CsvTransformer < String > transformer = CsvTransformer . < String > builder (). header ( true ). separator ( separator ). build (); val transformer = CsvTransformer . builder < String > (). header ( true ). separator ( separator ). build () The following can be configured: the separator and quotes could be specified with separator() and quote() with or without header also could be specified with header() To generate data based on a schema just call generate against schema : Java Kotlin String csv = transformer . generate ( schema , limit ); val csv = transformer . generate ( schema , limit ) Also it's possible to use schemas to transform existing data. E.g. there is a collection of Name objects and we are going to build csv of first and last names based on this collection: Java Kotlin Schema < Name , String > schema = Schema . of ( field ( \"firstName\" , Name :: firstName ), field ( \"lastname\" , Name :: lastName )); CsvTransformer < Name > transformer = CsvTransformer . < Name > builder (). header ( false ). separator ( \" : \" ). build (); String csv = transformer . generate ( faker . < Name > collection (). suppliers ( faker :: name ). maxLen ( limit ). build (), schema ); val faker = BaseFaker () val schema = Schema . of ( field ( \"firstName\" , Name :: firstName ), field ( \"lastname\" , Name :: lastName )) val transformer = CsvTransformer . builder < Name > (). header ( false ). separator ( \" : \" ). build () val csv = transformer . generate ( faker . collection < Name > (). suppliers ( Supplier { faker . name () }). maxLen ( limit ). build (), schema )","title":"CSV transformation"},{"location":"documentation/schemas/#json-transformation","text":"JSON transformation is very similar to CSV. The main difference is that JSON supports nested values which could be handled with help of compositeField . Example of JSON generation: Java Kotlin Schema < Object , ?> schema = Schema . of ( field ( \"Text\" , () -> faker . name (). firstName ()), field ( \"Bool\" , () -> faker . bool (). bool ()) ); JsonTransformer < Object > transformer = JsonTransformer . builder (). build (); String json = transformer . generate ( schema , 2 ); val faker = BaseFaker () val schema : Schema < String , *> = Schema . of ( field ( \"Text\" , Supplier { faker . name (). firstName () }), field ( \"Bool\" , Supplier { faker . bool (). bool () }) ) val transformer = JsonTransformer . builder < String > (). build (); val json = transformer . generate ( schema , 2 ) To use composite fields it should be defined on Schema level and nothing more.","title":"JSON transformation"},{"location":"documentation/schemas/#sql-transformation","text":"Note: right now only INSERT is supported. It generates a number of INSERT statements. There are 2 modes: batch and non batch generation. Batch generation means that one INSERT statement contains several rows to insert. Since different databases could have different syntax there is initial support for different dialects. Dialect could be specified during SQLTransformaer build e.g: Java Kotlin SqlTransformer < String > transformer = new SqlTransformer . SqlTransformerBuilder < String > () . schemaName ( tableSchemaName ). dialect ( SqlDialect . ORACLE ). build (); val transformer = SqlTransformer . SqlTransformerBuilder < String > () . schemaName ( tableSchemaName ). dialect ( SqlDialect . ORACLE ). build () Dialect also handle SQL quote identifiers, quotes and other SQL dialect specifics. An example of batch mode: Java Kotlin Faker faker = new Faker (); Schema < String , String > schema = Schema . of ( field ( \"firstName\" , () -> faker . name (). firstName ()), field ( \"lastName\" , () -> faker . name (). lastName ())); SqlTransformer < String > transformer = new SqlTransformer . SqlTransformerBuilder < String > () . batch ( 5 ) . tableName ( \"MY_TABLE\" ) . dialect ( SqlDialect . POSTGRES ) . build (); String output = transformer . generate ( schema , 10 ); val faker = Faker () val schema : Schema < String , String > = Schema . of ( field ( \"firstName\" , Supplier { faker . name (). firstName () }), field ( \"lastName\" , Supplier { faker . name (). lastName () }) ) val transformer = SqlTransformer . SqlTransformerBuilder < String > () . batch ( 5 ) . tableName ( \"MY_TABLE\" ) . dialect ( SqlDialect . POSTGRES ) . build () val output = transformer . generate ( schema , 10 ) will generate 2 INSERT each containing 5 rows e.g. INSERT INTO MY_TABLE (\"firstName\", \"lastName\") VALUES ('Billy', 'Wintheiser'), ('Fernando', 'Sanford'), ('Jamey', 'Torp'), ('Nicolette', 'Wiza'), ('Sherman', 'Miller'); INSERT INTO MY_TABLE (\"firstName\", \"lastName\") VALUES ('Marcell', 'Walsh'), ('Kareen', 'Bode'), ('Jules', 'Homenick'), ('Lashay', 'Gaylord'), ('Tyler', 'Miller');","title":"SQL Transformation"},{"location":"documentation/schemas/#advanced-sql-types","text":"It also supports generation of ARRAY , MULTISET and ROW types. Please be aware that not every database engine supports it and datafaker could do it for every dialect. To generate ARRAY schema field should supply and array. To generate MULTISET schema field should supply a list (SQL MULTISET could contain duplicates) To generate ROW schema field should supply a compositeField e.g. Java Kotlin Schema . of ( field ( \"ints\" , () -> new int [] { 1 , 2 , 3 })); val schema : Schema < String , IntArray > = Schema . of ( field ( \"ints\" , Supplier { intArrayOf ( 1 , 2 , 3 ) })) will lead to INSERT INTO \"MyTable\" (\"ints\") VALUES (ARRAY[1, 2, 3]); Java Kotlin Schema . of ( field ( \"names_multiset\" , () -> Collections . singleton ( \"hello\" )); val schema : Schema < String , Set < String >> = Schema . of ( field ( \"names_multiset\" , Supplier { Collections . singleton ( \"hello\" ) } )) will lead to INSERT INTO \"MyTable\" (\"names_multiset\") VALUES (MULTISET['hello']); Java Kotlin schema . of ( compositeField ( \"row\" , new Field [] { field ( \"name\" , () -> \"2\" )}); Schema . of ( compositeField ( \"row\" , arrayOf ( field ( \"name\" , Supplier { \"2\" })))) will lead to INSERT INTO \"MyTable\" (\"row\") VALUES (ROW('2'));","title":"Advanced SQL types"},{"location":"documentation/schemas/#yaml-transformation","text":"YAML transformation is very similar to CSV. The following is an example on how to use it: Java final BaseFaker faker = new BaseFaker (); YamlTransformer < Object > transformer = new YamlTransformer <> (); Schema < Object , ?> schema = Schema . of ( field ( \"name\" , () -> faker . name (). firstName ()), field ( \"lastname\" , () -> faker . name (). lastName ()), field ( \"phones\" , () -> Schema . of ( field ( \"worknumbers\" , () -> (( Stream <?> ) faker . < String > stream (). suppliers (() -> faker . phoneNumber (). phoneNumber ()). maxLen ( 2 ). build (). get ()) . collect ( Collectors . toList ())), field ( \"cellphones\" , () -> (( Stream <?> ) faker . < String > stream (). suppliers (() -> faker . phoneNumber (). cellPhone ()). maxLen ( 3 ). build (). get ()) . collect ( Collectors . toList ())) )), field ( \"address\" , () -> Schema . of ( field ( \"city\" , () -> faker . address (). city ()), field ( \"country\" , () -> faker . address (). country ()), field ( \"streetAddress\" , () -> faker . address (). streetAddress ()) )) ); System . out . println ( transformer . generate ( schema , 1 )); will generate yaml with nested fields: name: Mason lastname: Bechtelar phones: worknumbers: - (520) 205-2587 x2139 - (248) 225-6912 x4880 cellphones: - 714-269-8609 - 1-512-606-8850 - 1-386-909-7996 address: city: Port Wan country: Trinidad and Tobago streetAddress: 6510 Duncan Landing","title":"YAML transformation"},{"location":"documentation/schemas/#java-object-transformation","text":"Java Object transformer could be built with help of JavaObjectTransformer. When building JavaObjectTransformer you should provide a class to be used as a template for generated objects. Java Kotlin public static class Person { private String firstName ; private String lastName ; private Date birthDate ; private int id ; } data class Person ( var firstName : String , var lastName : String , var birthDate : Date , var id : Int ) Then you should provide a schema for the class. Java Kotlin JavaObjectTransformer jTransformer = new JavaObjectTransformer (); Schema < Object , ?> schema = Schema . of ( field ( \"firstName\" , () -> faker . name (). firstName ()), field ( \"lastName\" , () -> faker . name (). lastName ()), field ( \"birthDate\" , () -> faker . date (). birthday ()), field ( \"id\" , () -> faker . number (). positive ())); System . out . println ( jTransformer . apply ( Person . class , schema )); val jTransformer = JavaObjectTransformer () val schema : Schema < Any , Any > = Schema . of ( field ( \"firstName\" , Supplier { faker . name (). firstName () }), field ( \"lastName\" , Supplier { faker . name (). lastName () }), field ( \"birthDate\" , Supplier { faker . date (). birthday () }), field ( \"id\" , Supplier { faker . number (). positive () })) println ( jTransformer . apply ( Person :: class . java , schema )) will generate object with fields populated with random values based on specified suppliers.","title":"Java Object transformation"},{"location":"documentation/schemas/#populating-java-object-with-predefined-schema","text":"You can use predefined schema to populate Java Object or default schema for the class. Schema should be declared as a static method with return type Schema<Object, ?> . Java Kotlin public static Schema < Object , ?> defaultSchema () { var faker = new Faker ( Locale . forLanguageTag ( \"fr-en\" ), new RandomService ( new Random ( 1 ))); return Schema . of ( field ( \"name\" , () -> faker . name (). fullName ())); } fun defaultSchema (): Schema < Any , Any > { val faker = Faker ( Locale . forLanguageTag ( \"fr-en\" ), RandomService ( Random ( 1 ))) return Schema . of ( field ( \"name\" , Supplier { faker . name (). fullName () })) } Then you should provide a class to be used as a template for generated objects. Class should be annotated with @FakeForSchema annotation with path to the schema method as a value. Note: If default schema and class template are in the same class, you can omit full path to the method and use only method name. Java Kotlin @FakeForSchema ( \"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\" ) public class Person { private String fullName ; public String getFullName () { return fullName ; } public void setFullName ( String fullName ) { this . fullName = fullName ; } } @FakeForSchema ( \"net.datafaker.annotations.FakeAnnotationTest#defaultSchema\" ) data class Person ( var fullName : String ) Then you can use net.datafaker.providers.base.BaseFaker.populate(java.lang.Class<T>) to populate object with default predefined schema. Java Kotlin BaseFaker faker = new BaseFaker (); Person person = faker . populate ( Person . class ); val faker = BaseFaker () val person = faker . populate ( Person :: class . java ) Or you can use net.datafaker.providers.base.BaseFaker.populate(java.lang.Class<T>, net.datafaker.schema.Schema<java.lang.Object, ?>) to populate object with custom schema. Java Kotlin BaseFaker faker = new BaseFaker (); Person person = faker . populate ( Person . class , Schema . of ( field ( \"name\" , () -> faker . superhero (). name ()))); val faker = BaseFaker () val person = faker . populate ( Person :: class . java , Schema . of ( field ( \"name\" , Supplier { faker . superhero (). name () })))","title":"Populating Java Object with predefined Schema"},{"location":"documentation/sequences/","text":"Sequences \u00b6 Supported fake sequences: FakeCollection FakeStream FakeSequence API \u00b6 Support of fake collections has been added to Datafaker since version 1.2.0. Support of fake streams/fake sequence has been added to Datafaker since version 1.7.0. For example, the following code will generate a list/stream of first and last names with number of elements in it between 3 and 5: List Stream List < String > names = faker . collection ( () -> faker . name (). firstName (), () -> faker . name (). lastName ()) . len ( 3 , 5 ) . generate (); Stream < String > names = faker . stream ( () -> faker . name (). firstName (), () -> faker . name (). lastName ()) . len ( 3 , 5 ) . generate (); A list/stream can also contain different types: List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . maxLen ( 5 ) . generate (); With usage of nullRate it is possible to specify how often it should contain null values. By default, it's value is 0, i.e. no null values will be generated. List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 1 ) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 1 ) . maxLen ( 5 ) . generate (); The above will generate a collection/stream where every value is null. To generate a collection/stream with only about 30% values of null, nullRate(0.3) will do it. List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 0.3 ) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 0.3 ) . maxLen ( 5 ) . generate (); FakeSequence also supports generation of an infinite stream: Java Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . generate (); It is also possible to distinguish finite and infinite FakeStreams based on FakeSequence API: Java FakeSequence < Object > fakeSequence = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . build (); System . out . println ( fakeSequence . isInfinite ()); // true For FakeCollection this function will always return false: Java FakeSequence < Object > fakeSequence = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . build (); System . out . println ( fakeSequence . isInfinite ()); // false","title":"Sequences"},{"location":"documentation/sequences/#sequences","text":"Supported fake sequences: FakeCollection FakeStream","title":"Sequences"},{"location":"documentation/sequences/#fakesequence-api","text":"Support of fake collections has been added to Datafaker since version 1.2.0. Support of fake streams/fake sequence has been added to Datafaker since version 1.7.0. For example, the following code will generate a list/stream of first and last names with number of elements in it between 3 and 5: List Stream List < String > names = faker . collection ( () -> faker . name (). firstName (), () -> faker . name (). lastName ()) . len ( 3 , 5 ) . generate (); Stream < String > names = faker . stream ( () -> faker . name (). firstName (), () -> faker . name (). lastName ()) . len ( 3 , 5 ) . generate (); A list/stream can also contain different types: List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . maxLen ( 5 ) . generate (); With usage of nullRate it is possible to specify how often it should contain null values. By default, it's value is 0, i.e. no null values will be generated. List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 1 ) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 1 ) . maxLen ( 5 ) . generate (); The above will generate a collection/stream where every value is null. To generate a collection/stream with only about 30% values of null, nullRate(0.3) will do it. List Stream List < Object > objects = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 0.3 ) . maxLen ( 5 ) . generate (); Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . nullRate ( 0.3 ) . maxLen ( 5 ) . generate (); FakeSequence also supports generation of an infinite stream: Java Stream < Object > objects = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . generate (); It is also possible to distinguish finite and infinite FakeStreams based on FakeSequence API: Java FakeSequence < Object > fakeSequence = faker . < Object > stream ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . build (); System . out . println ( fakeSequence . isInfinite ()); // true For FakeCollection this function will always return false: Java FakeSequence < Object > fakeSequence = faker . < Object > collection ( () -> faker . name (). firstName (), () -> faker . random (). nextInt ( 100 )) . build (); System . out . println ( fakeSequence . isInfinite ()); // false","title":"FakeSequence API"},{"location":"documentation/unique-values/","text":"Unique Values \u00b6 Values from YAML files \u00b6 Unique values can be retrieved from the YAML files by key, if the key references a hard-coded list of values. Java Faker faker = new Faker (); // The values returned in the following lines will never be the same. String firstUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Flute\" String secondUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Clarinet\" Note: Unique values are based on key and locale, so it's possible to get the same value if the locale is manually changed or if two different keys contain the same value. If all possible values have been returned, an exception will be thrown. Java Faker faker = new Faker (); String firstUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Ukelele\" ... String nthUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // throws NoSuchElementException Any non-string values will be converted. Java Faker faker = new Faker (); String successCode = faker . unique (). fetchFromYaml ( \"sip.response.codes.success\" )); // \"200\"","title":"Unique values"},{"location":"documentation/unique-values/#unique-values","text":"","title":"Unique Values"},{"location":"documentation/unique-values/#values-from-yaml-files","text":"Unique values can be retrieved from the YAML files by key, if the key references a hard-coded list of values. Java Faker faker = new Faker (); // The values returned in the following lines will never be the same. String firstUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Flute\" String secondUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Clarinet\" Note: Unique values are based on key and locale, so it's possible to get the same value if the locale is manually changed or if two different keys contain the same value. If all possible values have been returned, an exception will be thrown. Java Faker faker = new Faker (); String firstUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // \"Ukelele\" ... String nthUniqueInstrument = faker . unique (). fetchFromYaml ( \"music.instruments\" ); // throws NoSuchElementException Any non-string values will be converted. Java Faker faker = new Faker (); String successCode = faker . unique (). fetchFromYaml ( \"sip.response.codes.success\" )); // \"200\"","title":"Values from YAML files"},{"location":"documentation/usage/","text":"Usage \u00b6 The simplest way to use Datafaker to generate fake data is by instantiating the Faker using the default constructor. Default usage \u00b6 Java Kotlin import net.datafaker.Faker ; Faker faker = new Faker (); String name = faker . name (). fullName (); // Miss Samanta Schmidt import net.datafaker.Faker val faker = Faker() val name = faker.name().fullName() // Miss Samanta Schmidt This will instantiate a Faker using the English locale. Different locale \u00b6 To use Datafaker with a different locale, you can supply on in the constructor as such: Java Kotlin Faker faker = new Faker ( new Locale ( \"nl\" )); String name = faker . name (). fullName (); // Chelan Klijnsma val faker = Faker ( Locale ( \"nl\" )) val name = faker . name (). fullName () // Chelan Klijnsma Multiple locales \u00b6 In case you want to mix locales, the easiest way to do so is to create a Faker per locale, and mix between those fakers. For an example, see below, which produce something like the following: 8708 \u0634\u0627\u0631\u0639 \u0642\u0637\u0631, \u0645\u062f\u064a\u0646\u0629 \u062e\u0648\u0644\u0629 \u062c\u0646\u0627\u062d 385 127 \u0634\u0627\u0631\u0639 \u0627\u0644\u0639\u0634\u0631\u064a\u0646, \u0645\u0639\u0628\u0631 \u0639\u0628\u062f\u0627\u0644\u0644\u0647 Schlangenlaan 461a, Oost Jessamyingen, WV 8234 ZX 1 hoog Gritlaan 52, Margiesmeer, OK 1083 VE Java Kotlin Faker faker1 = new Faker ( new Locale ( \"nl\" )); Faker faker2 = new Faker ( new Locale ( \"ar\" )); List < Faker > fakers = Arrays . asList ( faker1 , faker2 ); for ( int i = 0 ; i < 10 ; i ++ ) { Faker randomFaker = new Faker (). options (). nextElement ( fakers ); System . out . println ( randomFaker . address (). fullAddress ()); } val faker1 = Faker ( Locale ( \"nl\" )) val faker2 = Faker ( Locale ( \"ar\" )) val fakers = listOf ( faker1 , faker2 ) repeat ( 10 ) { val randomFaker = Faker (). options (). nextElement ( fakers ) println ( randomFaker . address (). fullAddress ()) } Repeatable random results \u00b6 To generate a more predictable random result, it's possible to provide a seed value to the Faker. When providing a seed, the instantiation of Fake objects will always happen in a predictable way, which can be handy for generating results multiple times. Java Kotlin Faker faker = new Faker ( new Random ( 0 )); val faker = Faker ( Random ( 0 )) Random Java enum values \u00b6 To get a random value from a Java enum you can employ the Options.option() method. The following example assumes you want to retrieve a random value from the Day enum. Java enum Day { MONDAY , TUESDAY , WEDNESDAY , THURSDAY , FRIDAY , SATURDAY , SUNDAY } private final Options opt = faker . options (); opt . option ( Day . class );","title":"Basic usage"},{"location":"documentation/usage/#usage","text":"The simplest way to use Datafaker to generate fake data is by instantiating the Faker using the default constructor.","title":"Usage"},{"location":"documentation/usage/#default-usage","text":"Java Kotlin import net.datafaker.Faker ; Faker faker = new Faker (); String name = faker . name (). fullName (); // Miss Samanta Schmidt import net.datafaker.Faker val faker = Faker() val name = faker.name().fullName() // Miss Samanta Schmidt This will instantiate a Faker using the English locale.","title":"Default usage"},{"location":"documentation/usage/#different-locale","text":"To use Datafaker with a different locale, you can supply on in the constructor as such: Java Kotlin Faker faker = new Faker ( new Locale ( \"nl\" )); String name = faker . name (). fullName (); // Chelan Klijnsma val faker = Faker ( Locale ( \"nl\" )) val name = faker . name (). fullName () // Chelan Klijnsma","title":"Different locale"},{"location":"documentation/usage/#multiple-locales","text":"In case you want to mix locales, the easiest way to do so is to create a Faker per locale, and mix between those fakers. For an example, see below, which produce something like the following: 8708 \u0634\u0627\u0631\u0639 \u0642\u0637\u0631, \u0645\u062f\u064a\u0646\u0629 \u062e\u0648\u0644\u0629 \u062c\u0646\u0627\u062d 385 127 \u0634\u0627\u0631\u0639 \u0627\u0644\u0639\u0634\u0631\u064a\u0646, \u0645\u0639\u0628\u0631 \u0639\u0628\u062f\u0627\u0644\u0644\u0647 Schlangenlaan 461a, Oost Jessamyingen, WV 8234 ZX 1 hoog Gritlaan 52, Margiesmeer, OK 1083 VE Java Kotlin Faker faker1 = new Faker ( new Locale ( \"nl\" )); Faker faker2 = new Faker ( new Locale ( \"ar\" )); List < Faker > fakers = Arrays . asList ( faker1 , faker2 ); for ( int i = 0 ; i < 10 ; i ++ ) { Faker randomFaker = new Faker (). options (). nextElement ( fakers ); System . out . println ( randomFaker . address (). fullAddress ()); } val faker1 = Faker ( Locale ( \"nl\" )) val faker2 = Faker ( Locale ( \"ar\" )) val fakers = listOf ( faker1 , faker2 ) repeat ( 10 ) { val randomFaker = Faker (). options (). nextElement ( fakers ) println ( randomFaker . address (). fullAddress ()) }","title":"Multiple locales"},{"location":"documentation/usage/#repeatable-random-results","text":"To generate a more predictable random result, it's possible to provide a seed value to the Faker. When providing a seed, the instantiation of Fake objects will always happen in a predictable way, which can be handy for generating results multiple times. Java Kotlin Faker faker = new Faker ( new Random ( 0 )); val faker = Faker ( Random ( 0 ))","title":"Repeatable random results"},{"location":"documentation/usage/#random-java-enum-values","text":"To get a random value from a Java enum you can employ the Options.option() method. The following example assumes you want to retrieve a random value from the Day enum. Java enum Day { MONDAY , TUESDAY , WEDNESDAY , THURSDAY , FRIDAY , SATURDAY , SUNDAY } private final Options opt = faker . options (); opt . option ( Day . class );","title":"Random Java enum values"},{"location":"in-the-media/links/","text":"Articles and news \u00b6 June 15, 2023 We published an article on DZone about major release of Datafaker 2.0, which you can find here: https://dzone.com/articles/datafaker-20 June 9, 2023 Christophe Vaudry started writing a French series about Datafaker, which you can find here: https://medium.com/norsys-octogone/introduction-%C3%A0-datafaker-1-fournisseurs-de-donn%C3%A9es-factices-dad4cd901e97 October 20, 2022 Eugene Kovko wrote an excellent getting started guide for Baeldung, which you can find here: https://www.baeldung.com/java-datafaker October 11, 2022 Jaap Coomans , who also helped contribute data to Datafaker, updated his excellent presentation which now features Datafaker to help in generating real looking test data: https://youtu.be/HZoHzp4Rb3E?t=730 July 17, 2022 Philip Riecks updated his Javafaker article by using Datafaker instead: https://rieckpil.de/howto-generate-random-data-in-java-using-java-faker/ May 22, 2022 We published an article on DZone to demonstrate some of the new features of Datafaker: https://dzone.com/articles/datafaker-a-solid-alternative-to-using-production March 5, 2022 We were mentioned as featured library of the day, by The Artifact Podcast : The Artifact: Multicloud vs polycloud, Jakarta EE and other news (Ep 3) on Apple Podcasts (24:40) https://podcasts.apple.com/au/podcast/the-artifact/id1609827559?i=1000553024398 February 13, 2022 Coffee and Tips wrote a tutorial about how to generate random data using Datafaker: https://www.coffeeandtips.com/post/how-to-generate-random-data-using-datafaker-lib February 11, 2022 Piotr Minkowski was one of the first people to tweet about Datafaker: https://twitter.com/piotr_minkowski/status/1491780736847810560/photo/1 January 4, 2022 The first article by Jworks which is about how to use Datafaker to be an alternative for using production data. https://jworks.io/datafaker-an-alternative-to-production-data/","title":"In the news"},{"location":"in-the-media/links/#articles-and-news","text":"June 15, 2023 We published an article on DZone about major release of Datafaker 2.0, which you can find here: https://dzone.com/articles/datafaker-20 June 9, 2023 Christophe Vaudry started writing a French series about Datafaker, which you can find here: https://medium.com/norsys-octogone/introduction-%C3%A0-datafaker-1-fournisseurs-de-donn%C3%A9es-factices-dad4cd901e97 October 20, 2022 Eugene Kovko wrote an excellent getting started guide for Baeldung, which you can find here: https://www.baeldung.com/java-datafaker October 11, 2022 Jaap Coomans , who also helped contribute data to Datafaker, updated his excellent presentation which now features Datafaker to help in generating real looking test data: https://youtu.be/HZoHzp4Rb3E?t=730 July 17, 2022 Philip Riecks updated his Javafaker article by using Datafaker instead: https://rieckpil.de/howto-generate-random-data-in-java-using-java-faker/ May 22, 2022 We published an article on DZone to demonstrate some of the new features of Datafaker: https://dzone.com/articles/datafaker-a-solid-alternative-to-using-production March 5, 2022 We were mentioned as featured library of the day, by The Artifact Podcast : The Artifact: Multicloud vs polycloud, Jakarta EE and other news (Ep 3) on Apple Podcasts (24:40) https://podcasts.apple.com/au/podcast/the-artifact/id1609827559?i=1000553024398 February 13, 2022 Coffee and Tips wrote a tutorial about how to generate random data using Datafaker: https://www.coffeeandtips.com/post/how-to-generate-random-data-using-datafaker-lib February 11, 2022 Piotr Minkowski was one of the first people to tweet about Datafaker: https://twitter.com/piotr_minkowski/status/1491780736847810560/photo/1 January 4, 2022 The first article by Jworks which is about how to use Datafaker to be an alternative for using production data. https://jworks.io/datafaker-an-alternative-to-production-data/","title":"Articles and news"},{"location":"releases/0.9.0/","text":"Datafaker 0.9.0 (1 Jan 2022) \u00b6 This release is a direct fork of Javafaker, with most of the more than 100 open PR's merged, and several other bugs fixed. Changes \u00b6 PR Description 692 Add Size (adjective) and Mood (feeling, emotion, tone) feature 685 Add random locale selection/rotation for internationalization/localization testing 603 683 IDEA: random java.time.Duration 677 682 Added cell phone support for the Dutch (NL) language. 680 Fix issue 668 676 I can see ar.yaml, Apparently you seem to support Arabic lang 675 Feature: Issue-666 673 US ZipCode should be specific about 5 or 5+4 digits (591) 672 add MG on state_abbr pt-br 596 659 (658) Fix typo in StarTrek species 656 Improve Travis CI build Performance 655 Shade snakeyml to avoid conflicts on consumers requiring higher versions 653 Removes trailing space in instrument name 650 Add es-PY.yml, based on es-MX.yml 645 Solving problem 414 644 Solve issue 450 643 Add Hearthstone feature 636 issue 571 635 Resident evil feature 633 Fix issue 391 Offer the possibility to generate a top and second level domain for a company 631 Fix issue 629 and issue 458 628 fix issue 626: Typo in the faker.subscription.plans variable inside es.yml 625 Add Minecraft and Touhou fakers 622 Fix bug 598 fake food ingredient has no support to hebrew 619 Fix issue 566 \"en-ZA\" ID number is invalid 617 Remove trailing space from animal name: turtle 616 Fix issue # 584: Internet.password doesn't always return expected value 614 Solve StarCraftTest Failed issue 611# 613 Fixed issue 584 606 Set country_code for NL.yml 604 Adds Portuguese VAT identification number (NIF) 602 Correctly handle generating a password of fixed length 595 Added hr locale support 594 ko.yml Faker Data Update 593 Changing the Turkish adage to its correct usage 583 Update ru.yml 582 Improve de-CH.yml 576 Added Dessert Faker 574 This PR fixes issue 568 (missing quote) 565 Fix russian translations 557 Update the IBAN code based on the latest version of iban_registry 511 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 509 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 506 Fiex testHungarianZipCodeByState() 499 Fixed Zh_CN IdNumber invalid issue 495 Added locale sensivity on longitute, latitude. 492 Complied regular expression patterns and applied some other performance suggestions 480 Vehicle Faker 462 Adding proper set of area codes for phone numbers in Canada for both 'ca' and 'en-CA' locales 453 add Science service and elementary particles 449 Add CS yaml 423 Babylon5 408 Fix inability to resolve dota.yml path. Add more dota heroes and items 387 Barcode generator 382 Fix german material names 354 Creates locale for es-AR 333 Update ru.yml 314 Add Singaporean ID numbers 264 Add CPF generation (identification number in Brazil like social security number)","title":"0.9.0"},{"location":"releases/0.9.0/#datafaker-090-1-jan-2022","text":"This release is a direct fork of Javafaker, with most of the more than 100 open PR's merged, and several other bugs fixed.","title":"Datafaker 0.9.0 (1 Jan 2022)"},{"location":"releases/0.9.0/#changes","text":"PR Description 692 Add Size (adjective) and Mood (feeling, emotion, tone) feature 685 Add random locale selection/rotation for internationalization/localization testing 603 683 IDEA: random java.time.Duration 677 682 Added cell phone support for the Dutch (NL) language. 680 Fix issue 668 676 I can see ar.yaml, Apparently you seem to support Arabic lang 675 Feature: Issue-666 673 US ZipCode should be specific about 5 or 5+4 digits (591) 672 add MG on state_abbr pt-br 596 659 (658) Fix typo in StarTrek species 656 Improve Travis CI build Performance 655 Shade snakeyml to avoid conflicts on consumers requiring higher versions 653 Removes trailing space in instrument name 650 Add es-PY.yml, based on es-MX.yml 645 Solving problem 414 644 Solve issue 450 643 Add Hearthstone feature 636 issue 571 635 Resident evil feature 633 Fix issue 391 Offer the possibility to generate a top and second level domain for a company 631 Fix issue 629 and issue 458 628 fix issue 626: Typo in the faker.subscription.plans variable inside es.yml 625 Add Minecraft and Touhou fakers 622 Fix bug 598 fake food ingredient has no support to hebrew 619 Fix issue 566 \"en-ZA\" ID number is invalid 617 Remove trailing space from animal name: turtle 616 Fix issue # 584: Internet.password doesn't always return expected value 614 Solve StarCraftTest Failed issue 611# 613 Fixed issue 584 606 Set country_code for NL.yml 604 Adds Portuguese VAT identification number (NIF) 602 Correctly handle generating a password of fixed length 595 Added hr locale support 594 ko.yml Faker Data Update 593 Changing the Turkish adage to its correct usage 583 Update ru.yml 582 Improve de-CH.yml 576 Added Dessert Faker 574 This PR fixes issue 568 (missing quote) 565 Fix russian translations 557 Update the IBAN code based on the latest version of iban_registry 511 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 509 Add some lastnames with \u00f1 for \"es\" and \"es-mx\" 506 Fiex testHungarianZipCodeByState() 499 Fixed Zh_CN IdNumber invalid issue 495 Added locale sensivity on longitute, latitude. 492 Complied regular expression patterns and applied some other performance suggestions 480 Vehicle Faker 462 Adding proper set of area codes for phone numbers in Canada for both 'ca' and 'en-CA' locales 453 add Science service and elementary particles 449 Add CS yaml 423 Babylon5 408 Fix inability to resolve dota.yml path. Add more dota heroes and items 387 Barcode generator 382 Fix german material names 354 Creates locale for es-AR 333 Update ru.yml 314 Add Singaporean ID numbers 264 Add CPF generation (identification number in Brazil like social security number)","title":"Changes"},{"location":"releases/1.0.0/","text":"Datafaker 1.0.0 (3 Jan 2022) \u00b6 The first 1.x release! This release is backwards incompatible with previous versions since while the structure of the code is still the same, the package names have changed to net.datafaker . To migrate to this version of Datafaker, all you need to do is replace the imports from com.github.javafaker to net.datafaker . No other changes are needed. Notable changes \u00b6 Added ICD-10, ICD-10-AM, ICD-10-CM and ICD-10-PCS support to Medical Added Appliance provider Added Breaking Bad provider Added Bossa Nova provider Added RuPaul's Drag Race provider","title":"1.0.0"},{"location":"releases/1.0.0/#datafaker-100-3-jan-2022","text":"The first 1.x release! This release is backwards incompatible with previous versions since while the structure of the code is still the same, the package names have changed to net.datafaker . To migrate to this version of Datafaker, all you need to do is replace the imports from com.github.javafaker to net.datafaker . No other changes are needed.","title":"Datafaker 1.0.0 (3 Jan 2022)"},{"location":"releases/1.0.0/#notable-changes","text":"Added ICD-10, ICD-10-AM, ICD-10-CM and ICD-10-PCS support to Medical Added Appliance provider Added Breaking Bad provider Added Bossa Nova provider Added RuPaul's Drag Race provider","title":"Notable changes"},{"location":"releases/1.1.0/","text":"Datafaker 1.1.0 (1 Feb 2022) \u00b6 Datafaker 1.1.0 reduces the number of external dependencies and provides a few minor bug fixes. It also includes a few internal improvements, mostly related to an improved level of code coverage. See for the full release notes below. Contributors \u00b6 For this release, we'd like thank Elton Andr\u00e9, Sergey Nuyanzin and Amit Solankurkar for their contributions to Datafaker. Notable changes \u00b6 Breaking (minor) change: Relationships has been renamed to Relationship . Bugfix: Fixed Russian translation ( PR #693 by Sergey Nuyanzin) Improvement: Added mountain ranges ( PR #696 by Sergey Nuyanzin) Improvement: Minimised external dependencies. Removed Guava and Apache Commons from production dependencies, and logging from test dependencies. Improvement: New examplify method in Faker, which generates a value by example, with the same pattern as the input value. (See the Javadoc for examples). PR #4 by Amit Solankurkar. Bugfix: Removed 226 area code as reported here Issue #698 . Improvement: Now supports valid Swedish (sv_SE) phone numbers based on Telephone Numbers in Sweden . Improvement: Now supports valid Dutch (nl_NL) phone numbers based on Telephone numbers in the Netherlands . Improvement: Now supports (mostly) valid Norwegian (nb_NO) phone numbers based on Telephone numbers in the Norway . Improvement: Now supports valid Czech Republic (cs_SZ) phone numbers based on Telephone numbers in the Czech Republic . Improvement: Now supports (mostly) valid Great Britain (en_UK) phone numbers based on Telephone numbers in the United Kingdom . Improvement: We now support Brazilian CPF and CNPJ numbers ( PR #5 ), thanks to Elton Andr\u00e9.","title":"1.1.0"},{"location":"releases/1.1.0/#datafaker-110-1-feb-2022","text":"Datafaker 1.1.0 reduces the number of external dependencies and provides a few minor bug fixes. It also includes a few internal improvements, mostly related to an improved level of code coverage. See for the full release notes below.","title":"Datafaker 1.1.0 (1 Feb 2022)"},{"location":"releases/1.1.0/#contributors","text":"For this release, we'd like thank Elton Andr\u00e9, Sergey Nuyanzin and Amit Solankurkar for their contributions to Datafaker.","title":"Contributors"},{"location":"releases/1.1.0/#notable-changes","text":"Breaking (minor) change: Relationships has been renamed to Relationship . Bugfix: Fixed Russian translation ( PR #693 by Sergey Nuyanzin) Improvement: Added mountain ranges ( PR #696 by Sergey Nuyanzin) Improvement: Minimised external dependencies. Removed Guava and Apache Commons from production dependencies, and logging from test dependencies. Improvement: New examplify method in Faker, which generates a value by example, with the same pattern as the input value. (See the Javadoc for examples). PR #4 by Amit Solankurkar. Bugfix: Removed 226 area code as reported here Issue #698 . Improvement: Now supports valid Swedish (sv_SE) phone numbers based on Telephone Numbers in Sweden . Improvement: Now supports valid Dutch (nl_NL) phone numbers based on Telephone numbers in the Netherlands . Improvement: Now supports (mostly) valid Norwegian (nb_NO) phone numbers based on Telephone numbers in the Norway . Improvement: Now supports valid Czech Republic (cs_SZ) phone numbers based on Telephone numbers in the Czech Republic . Improvement: Now supports (mostly) valid Great Britain (en_UK) phone numbers based on Telephone numbers in the United Kingdom . Improvement: We now support Brazilian CPF and CNPJ numbers ( PR #5 ), thanks to Elton Andr\u00e9.","title":"Notable changes"},{"location":"releases/1.2.0/","text":"Datafaker 1.2.0 (5 March 2022) \u00b6 Contributors \u00b6 For this release, we'd like thank the following people: Sergey Nuyanzin for adding 90% of the features of this release. Sergey added support for file formats, custom fakers, speed improvements, and many, many other items. Alexandre Saudate for adding multi-branch CNPJ generation ( PR #71 ) David Ogar for contributing the Nigeria faker.( PR #70 ) zolv for adding add PESEL number generator ( PR #54 ) Marius Larsen for adding Formula 1 data ( PR #20 ) Valery Yatsynovich for changing AdoptJDK to Temurin ( PR #14 ) Koen de Bruijn for updating a code example in the usage documentation ( PR #6 ) To all of the above: we really appreciate all your contributions, and thank you all for making this library the way it is! Providers added \u00b6 In this release, more providers have been added: Australia The IT Crowd Marketing, mostly buzzwords for now Restaurant, with names, types, reviews, etc Nato Phonetic Alphabet Nigeria, thanks to David Ogar The CNPJ provider has been improved, and now supports multiple branches, thanks to Alexandre Saudate. For a complete list of providers, see the providers overview . Notable changes \u00b6 Improvement: Support for custom providers! Improvement: Support for CSV, XML, YML and JSON fileformat. Improvement: Support for specifying date formats for dates and timestamps. Improvement: Added nextInt and nextFloat methods to Faker to make the random() method a better Random replacement. Improvement: Added nextDouble and nextLong methods to Faker to generate random numbers between bounds. Add support of methods with varargs and #{options.option ...} ( PR #7 ), thanks to Sergey Nuyanzin. Fixes and several improvements in Datafaker dependency management ( PR #8 ) and ( PR #9 ), thanks to Sergey Nuyanzin. Added generation of ISO language and countries based on java Locale#getISOLanguages and Locale#getISOCountries ( PR #19 ) Many fixes and improvements in the build stability, lots of performance improvements and many fixes for flakey tests","title":"1.2.0"},{"location":"releases/1.2.0/#datafaker-120-5-march-2022","text":"","title":"Datafaker 1.2.0 (5 March 2022)"},{"location":"releases/1.2.0/#contributors","text":"For this release, we'd like thank the following people: Sergey Nuyanzin for adding 90% of the features of this release. Sergey added support for file formats, custom fakers, speed improvements, and many, many other items. Alexandre Saudate for adding multi-branch CNPJ generation ( PR #71 ) David Ogar for contributing the Nigeria faker.( PR #70 ) zolv for adding add PESEL number generator ( PR #54 ) Marius Larsen for adding Formula 1 data ( PR #20 ) Valery Yatsynovich for changing AdoptJDK to Temurin ( PR #14 ) Koen de Bruijn for updating a code example in the usage documentation ( PR #6 ) To all of the above: we really appreciate all your contributions, and thank you all for making this library the way it is!","title":"Contributors"},{"location":"releases/1.2.0/#providers-added","text":"In this release, more providers have been added: Australia The IT Crowd Marketing, mostly buzzwords for now Restaurant, with names, types, reviews, etc Nato Phonetic Alphabet Nigeria, thanks to David Ogar The CNPJ provider has been improved, and now supports multiple branches, thanks to Alexandre Saudate. For a complete list of providers, see the providers overview .","title":"Providers added"},{"location":"releases/1.2.0/#notable-changes","text":"Improvement: Support for custom providers! Improvement: Support for CSV, XML, YML and JSON fileformat. Improvement: Support for specifying date formats for dates and timestamps. Improvement: Added nextInt and nextFloat methods to Faker to make the random() method a better Random replacement. Improvement: Added nextDouble and nextLong methods to Faker to generate random numbers between bounds. Add support of methods with varargs and #{options.option ...} ( PR #7 ), thanks to Sergey Nuyanzin. Fixes and several improvements in Datafaker dependency management ( PR #8 ) and ( PR #9 ), thanks to Sergey Nuyanzin. Added generation of ISO language and countries based on java Locale#getISOLanguages and Locale#getISOCountries ( PR #19 ) Many fixes and improvements in the build stability, lots of performance improvements and many fixes for flakey tests","title":"Notable changes"},{"location":"releases/1.3.0/","text":"Datafaker 1.3.0 (2 April 2022) \u00b6 Another new release of Datafaker. We found out that in some cases, the 1.2.0 version of Datafaker is too aggressive with caching results. This version fixes that, so we'd advise all users to upgrade to 1.3.0. Also, this version contains many new features, such as many new providers, new APIs to work with JSON data, improved caching, and more. Contributors \u00b6 For this release, we'd like thank the following people: Sergey Nuyanzin again for adding most of the features of this release, such as nested JSON support, adding a Maven wrapper, enabling JDK 18 support, Alexandre Saudate for contributing the AWS faker! Very handy, thanks! Valery Yatsynovich for making the documentation just a bit better! Thanks! Julio Gutierrez for adding more caching to Datafaker. and Dependabot for keeping our dependencies up to date :) Providers added \u00b6 AWS Brooklyn Nine Nine Crypto Coin Hobby Horse Kpop Subscription Super Mario Volleyball Note: The Crypto provider has been renamed to Hashing, since they only contained one way Hashing functions. It can still be accessed using the crypto method, but this will be removed in one of the upcoming releases.","title":"1.3.0"},{"location":"releases/1.3.0/#datafaker-130-2-april-2022","text":"Another new release of Datafaker. We found out that in some cases, the 1.2.0 version of Datafaker is too aggressive with caching results. This version fixes that, so we'd advise all users to upgrade to 1.3.0. Also, this version contains many new features, such as many new providers, new APIs to work with JSON data, improved caching, and more.","title":"Datafaker 1.3.0 (2 April 2022)"},{"location":"releases/1.3.0/#contributors","text":"For this release, we'd like thank the following people: Sergey Nuyanzin again for adding most of the features of this release, such as nested JSON support, adding a Maven wrapper, enabling JDK 18 support, Alexandre Saudate for contributing the AWS faker! Very handy, thanks! Valery Yatsynovich for making the documentation just a bit better! Thanks! Julio Gutierrez for adding more caching to Datafaker. and Dependabot for keeping our dependencies up to date :)","title":"Contributors"},{"location":"releases/1.3.0/#providers-added","text":"AWS Brooklyn Nine Nine Crypto Coin Hobby Horse Kpop Subscription Super Mario Volleyball Note: The Crypto provider has been renamed to Hashing, since they only contained one way Hashing functions. It can still be accessed using the crypto method, but this will be removed in one of the upcoming releases.","title":"Providers added"},{"location":"releases/1.4.0/","text":"Datafaker 1.4.0 (20 May 2022) \u00b6 Thanks to the hard work of Sergey Nuyanzin and a lot of contributors, I'm pleased to say we have another new release of Datafaker. Lots of things have improved in this relase, such as (as usual), a lot of new providers, performance improvements in the generation of data, CSV and JSON generation through expressions, etc. Internally, we've recently migrated from JUnit 4 to JUnit 5, and from Hamcrest to AssertJ. This is a slightly better approach to testing to making sure our library is without any errors. Fun fact : at the moment, we have close to 30.000 tests, with a code coverage of around 93%. Despite having this amount of tests, all the tests run in less than 20 seconds! Contributors \u00b6 A big thanks to our contributes, without who this release wouldn't have been possible! Thanks to Tahanima for providing more fake data providers (Tea and Camera) Alexander Ilinykh for providing Philippino data Ilya Pantsyr for providing the Electrical Components provider Lance-Azrael for providing the Blood Type provider Izsak for providing the Oscar Movie provider Cooljj for providing the Battlefield 1 provider zhou mintao for providing the Soul Knight provider Providers added \u00b6 Battlefield 1 Blood Types Camera Device EldenRing Electrical Components Grateful Dead Hey Arnold Mountaineering Oscar Movie Seinfeld Soul Knight Tea Time Tron","title":"1.4.0"},{"location":"releases/1.4.0/#datafaker-140-20-may-2022","text":"Thanks to the hard work of Sergey Nuyanzin and a lot of contributors, I'm pleased to say we have another new release of Datafaker. Lots of things have improved in this relase, such as (as usual), a lot of new providers, performance improvements in the generation of data, CSV and JSON generation through expressions, etc. Internally, we've recently migrated from JUnit 4 to JUnit 5, and from Hamcrest to AssertJ. This is a slightly better approach to testing to making sure our library is without any errors. Fun fact : at the moment, we have close to 30.000 tests, with a code coverage of around 93%. Despite having this amount of tests, all the tests run in less than 20 seconds!","title":"Datafaker 1.4.0 (20 May 2022)"},{"location":"releases/1.4.0/#contributors","text":"A big thanks to our contributes, without who this release wouldn't have been possible! Thanks to Tahanima for providing more fake data providers (Tea and Camera) Alexander Ilinykh for providing Philippino data Ilya Pantsyr for providing the Electrical Components provider Lance-Azrael for providing the Blood Type provider Izsak for providing the Oscar Movie provider Cooljj for providing the Battlefield 1 provider zhou mintao for providing the Soul Knight provider","title":"Contributors"},{"location":"releases/1.4.0/#providers-added","text":"Battlefield 1 Blood Types Camera Device EldenRing Electrical Components Grateful Dead Hey Arnold Mountaineering Oscar Movie Seinfeld Soul Knight Tea Time Tron","title":"Providers added"},{"location":"releases/1.5.0/","text":"Datafaker 1.5.0 (25 July 2022) \u00b6 A little later than expected, but well worth the wait: another release of Datafaker, improved generation of phone numbers, 20(!) new providers, and many small improvements. Thanks everyone for supporting this library! Contributors \u00b6 A big thanks to our contributes, without who this release wouldn't have been possible! Big shouts out to: Sergejs Visockis Ilya Pantsyr Iago Saito Tahanima Chowdhury A special shoutout to Ilya, who did so many PR's that we had no other choice to make him part of the team! Welcome Ilya! Providers added \u00b6 Big Bang Theory Cannabis Coffee Dark Soul DC Comics Departed Driving License Famous Last Words Ghost Busters Greek Philosopher Hololive House Football Industry Segments MBTI (Myers-Briggs Type Indicator) Measurement Money Movie Simpsons Verb","title":"1.5.0"},{"location":"releases/1.5.0/#datafaker-150-25-july-2022","text":"A little later than expected, but well worth the wait: another release of Datafaker, improved generation of phone numbers, 20(!) new providers, and many small improvements. Thanks everyone for supporting this library!","title":"Datafaker 1.5.0 (25 July 2022)"},{"location":"releases/1.5.0/#contributors","text":"A big thanks to our contributes, without who this release wouldn't have been possible! Big shouts out to: Sergejs Visockis Ilya Pantsyr Iago Saito Tahanima Chowdhury A special shoutout to Ilya, who did so many PR's that we had no other choice to make him part of the team! Welcome Ilya!","title":"Contributors"},{"location":"releases/1.5.0/#providers-added","text":"Big Bang Theory Cannabis Coffee Dark Soul DC Comics Departed Driving License Famous Last Words Ghost Busters Greek Philosopher Hololive House Football Industry Segments MBTI (Myers-Briggs Type Indicator) Measurement Money Movie Simpsons Verb","title":"Providers added"},{"location":"releases/1.6.0/","text":"Datafaker 1.6.0 (11 Sept 2022) \u00b6 Another release of Datafaker. In this release, 'we', but mostly @panilya , have improved the generation of valid phone numbers. While in older version of Datafaker every locale generates a phone number, more often than not they're invalid. With this release, for many locales this issue has been fixed, so our thanks to @panilya for addressing this! Also @panilya fixed the documentation using a generator, so now our list of providers is finally up to date! We've also received contributions from 5 new contributors! We appreciate all contributions, thank you all! New Contributors \u00b6 @andrinmeier made their first contribution in https://github.com/datafaker-net/datafaker/pull/286 @p4pupro made their first contribution in https://github.com/datafaker-net/datafaker/pull/289 @MEGarrusVakarian made their first contribution in https://github.com/datafaker-net/datafaker/pull/301 @redhell made their first contribution in https://github.com/datafaker-net/datafaker/pull/307 @yuokada made their first contribution in https://github.com/datafaker-net/datafaker/pull/328 What's Changed \u00b6 Phone number fixes \u00b6 Fix phone number formats for hu_HU by @panilya in https://github.com/datafaker-net/datafaker/pull/290 Fix phone number formats for lv_LV by @panilya in https://github.com/datafaker-net/datafaker/pull/291 Fix phone number formats for pt-BR by @panilya in https://github.com/datafaker-net/datafaker/pull/248 Fix phone number formats for fr-CH by @panilya in https://github.com/datafaker-net/datafaker/pull/249 Fix phone number formats for sk_SK by @panilya in https://github.com/datafaker-net/datafaker/pull/293 Fix phone number formats for fi_FI by @panilya in https://github.com/datafaker-net/datafaker/pull/294 Fix phone number formats for en_IND locale by @panilya in https://github.com/datafaker-net/datafaker/pull/311 Fix phone number formats for 'de_AT' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/312 Fix phone number formats for 'th_TH' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/313 Fix phone number formats for hr_HR locale by @panilya in https://github.com/datafaker-net/datafaker/pull/306 Fix phone number formats for en-GB by @panilya in https://github.com/datafaker-net/datafaker/pull/274 Fix phone number formats for tr_TR by @panilya in https://github.com/datafaker-net/datafaker/pull/284 Fix phone number formats for by-BY by @panilya in https://github.com/datafaker-net/datafaker/pull/259 Other fixes and improvements \u00b6 Fix broken 'Address.streetName' faker for 'bg' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/253 Make delimiter for latLon and lonLat configurable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/258 Use faker's locale to generate decimal separator for lon/lat address \u2026 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/260 Add 'Computer' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/261 Add space between providers' names by @panilya in https://github.com/datafaker-net/datafaker/pull/264 Introduce AbstractProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/262 Allow configure required and optional symbols for password generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/251 Add possibility to pass seed to FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/222 Allow tests running concurrently by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/267 Renamed IT test to Test. There's no need for integration tests. Relat\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/270 Revert of #253 by @bodiam in https://github.com/datafaker-net/datafaker/pull/271 Better usage of java.util.Locale. See #266 by @bodiam in https://github.com/datafaker-net/datafaker/pull/272 Make concurrent tests more stable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/273 Add 'Fallout' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/279 Partial fix for #268 , few supported countries, and got rid of the bro\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/269 Add 'en_CA' passport number by @panilya in https://github.com/datafaker-net/datafaker/pull/280 Error when generation passport without specifying locale by @panilya in https://github.com/datafaker-net/datafaker/pull/282 Issue 285: Add internet().uuidv3() by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/286 Add CSV format example using a fake collection builder by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/287 Fix incorrect phone number formats in phone_number.yml by @panilya in https://github.com/datafaker-net/datafaker/pull/281 Add 'Community' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/292 Feature/garments sizes by @p4pupro in https://github.com/datafaker-net/datafaker/pull/289 Change error count threshold value in PhoneNumberValidityFinderTest.testAllPhoneNumber by @panilya in https://github.com/datafaker-net/datafaker/pull/295 Add Chiquito provider, and fixed the provider generator. by @bodiam in https://github.com/datafaker-net/datafaker/pull/298 Add 'Clash of Clans' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/304 Add \"Mass Effect\" faker by @MEGarrusVakarian in https://github.com/datafaker-net/datafaker/pull/301 Add JShell example by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/303 Add 'Dumb and Dumber' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/305 Stabilize build for the case of concurrent tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/275 Correction of Country in de.yml by @redhell in https://github.com/datafaker-net/datafaker/pull/307 Add german license plates by @redhell in https://github.com/datafaker-net/datafaker/pull/308 Vehicle update in german by @redhell in https://github.com/datafaker-net/datafaker/pull/309 Add 'Final Space' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/310 Add faker for pulling unique values from files by @giunto in https://github.com/datafaker-net/datafaker/pull/296 Utility for generating 'providers.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/297 Bring back StarWars by @redhell in https://github.com/datafaker-net/datafaker/pull/314 Add passport number format for en_GB locale by @panilya in https://github.com/datafaker-net/datafaker/pull/316 Add markdown documentation for unique faker by @giunto in https://github.com/datafaker-net/datafaker/pull/321 Improved documentation and slightly improved documentation generator \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/315 Starwars by @bodiam in https://github.com/datafaker-net/datafaker/pull/323 Support japan passport number by @yuokada in https://github.com/datafaker-net/datafaker/pull/328 Full Changelog : https://github.com/datafaker-net/datafaker/compare/datafaker-1.5.0...v1.6.0 Providers added \u00b6 See https://www.datafaker.net/documentation/providers/","title":"1.6.0"},{"location":"releases/1.6.0/#datafaker-160-11-sept-2022","text":"Another release of Datafaker. In this release, 'we', but mostly @panilya , have improved the generation of valid phone numbers. While in older version of Datafaker every locale generates a phone number, more often than not they're invalid. With this release, for many locales this issue has been fixed, so our thanks to @panilya for addressing this! Also @panilya fixed the documentation using a generator, so now our list of providers is finally up to date! We've also received contributions from 5 new contributors! We appreciate all contributions, thank you all!","title":"Datafaker 1.6.0 (11 Sept 2022)"},{"location":"releases/1.6.0/#new-contributors","text":"@andrinmeier made their first contribution in https://github.com/datafaker-net/datafaker/pull/286 @p4pupro made their first contribution in https://github.com/datafaker-net/datafaker/pull/289 @MEGarrusVakarian made their first contribution in https://github.com/datafaker-net/datafaker/pull/301 @redhell made their first contribution in https://github.com/datafaker-net/datafaker/pull/307 @yuokada made their first contribution in https://github.com/datafaker-net/datafaker/pull/328","title":"New Contributors"},{"location":"releases/1.6.0/#whats-changed","text":"","title":"What's Changed"},{"location":"releases/1.6.0/#phone-number-fixes","text":"Fix phone number formats for hu_HU by @panilya in https://github.com/datafaker-net/datafaker/pull/290 Fix phone number formats for lv_LV by @panilya in https://github.com/datafaker-net/datafaker/pull/291 Fix phone number formats for pt-BR by @panilya in https://github.com/datafaker-net/datafaker/pull/248 Fix phone number formats for fr-CH by @panilya in https://github.com/datafaker-net/datafaker/pull/249 Fix phone number formats for sk_SK by @panilya in https://github.com/datafaker-net/datafaker/pull/293 Fix phone number formats for fi_FI by @panilya in https://github.com/datafaker-net/datafaker/pull/294 Fix phone number formats for en_IND locale by @panilya in https://github.com/datafaker-net/datafaker/pull/311 Fix phone number formats for 'de_AT' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/312 Fix phone number formats for 'th_TH' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/313 Fix phone number formats for hr_HR locale by @panilya in https://github.com/datafaker-net/datafaker/pull/306 Fix phone number formats for en-GB by @panilya in https://github.com/datafaker-net/datafaker/pull/274 Fix phone number formats for tr_TR by @panilya in https://github.com/datafaker-net/datafaker/pull/284 Fix phone number formats for by-BY by @panilya in https://github.com/datafaker-net/datafaker/pull/259","title":"Phone number fixes"},{"location":"releases/1.6.0/#other-fixes-and-improvements","text":"Fix broken 'Address.streetName' faker for 'bg' locale by @panilya in https://github.com/datafaker-net/datafaker/pull/253 Make delimiter for latLon and lonLat configurable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/258 Use faker's locale to generate decimal separator for lon/lat address \u2026 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/260 Add 'Computer' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/261 Add space between providers' names by @panilya in https://github.com/datafaker-net/datafaker/pull/264 Introduce AbstractProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/262 Allow configure required and optional symbols for password generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/251 Add possibility to pass seed to FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/222 Allow tests running concurrently by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/267 Renamed IT test to Test. There's no need for integration tests. Relat\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/270 Revert of #253 by @bodiam in https://github.com/datafaker-net/datafaker/pull/271 Better usage of java.util.Locale. See #266 by @bodiam in https://github.com/datafaker-net/datafaker/pull/272 Make concurrent tests more stable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/273 Add 'Fallout' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/279 Partial fix for #268 , few supported countries, and got rid of the bro\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/269 Add 'en_CA' passport number by @panilya in https://github.com/datafaker-net/datafaker/pull/280 Error when generation passport without specifying locale by @panilya in https://github.com/datafaker-net/datafaker/pull/282 Issue 285: Add internet().uuidv3() by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/286 Add CSV format example using a fake collection builder by @andrinmeier in https://github.com/datafaker-net/datafaker/pull/287 Fix incorrect phone number formats in phone_number.yml by @panilya in https://github.com/datafaker-net/datafaker/pull/281 Add 'Community' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/292 Feature/garments sizes by @p4pupro in https://github.com/datafaker-net/datafaker/pull/289 Change error count threshold value in PhoneNumberValidityFinderTest.testAllPhoneNumber by @panilya in https://github.com/datafaker-net/datafaker/pull/295 Add Chiquito provider, and fixed the provider generator. by @bodiam in https://github.com/datafaker-net/datafaker/pull/298 Add 'Clash of Clans' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/304 Add \"Mass Effect\" faker by @MEGarrusVakarian in https://github.com/datafaker-net/datafaker/pull/301 Add JShell example by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/303 Add 'Dumb and Dumber' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/305 Stabilize build for the case of concurrent tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/275 Correction of Country in de.yml by @redhell in https://github.com/datafaker-net/datafaker/pull/307 Add german license plates by @redhell in https://github.com/datafaker-net/datafaker/pull/308 Vehicle update in german by @redhell in https://github.com/datafaker-net/datafaker/pull/309 Add 'Final Space' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/310 Add faker for pulling unique values from files by @giunto in https://github.com/datafaker-net/datafaker/pull/296 Utility for generating 'providers.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/297 Bring back StarWars by @redhell in https://github.com/datafaker-net/datafaker/pull/314 Add passport number format for en_GB locale by @panilya in https://github.com/datafaker-net/datafaker/pull/316 Add markdown documentation for unique faker by @giunto in https://github.com/datafaker-net/datafaker/pull/321 Improved documentation and slightly improved documentation generator \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/315 Starwars by @bodiam in https://github.com/datafaker-net/datafaker/pull/323 Support japan passport number by @yuokada in https://github.com/datafaker-net/datafaker/pull/328 Full Changelog : https://github.com/datafaker-net/datafaker/compare/datafaker-1.5.0...v1.6.0","title":"Other fixes and improvements"},{"location":"releases/1.6.0/#providers-added","text":"See https://www.datafaker.net/documentation/providers/","title":"Providers added"},{"location":"releases/1.7.0/","text":"Datafaker 1.7.0 (27 Nov 2022) \u00b6 One of the biggest releases has just been created, with the help of no less than 12(!) new contributors. Absolutely amazing, we couldn't have done it without you! Thanks to everyone involved, Datafaker now has more than a 100.000 monthly downloads, and is used by projects at Netflix, Alibaba, Bytedance and many others! It's great to see that this library is being used, and again, thanks! In this release, you'll find many new features, such as: 21 new providers Many performance improvements Far better SQL, XML, CSV and JSON generation Far better phone number generation. Almost all generated phone numbers are now valid numbers! Several bugfixes, mostly in the data generation. Have fun with this release! What's Changed \u00b6 Apply renaming master to main by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/343 Enrich ja.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/345 Refactor barcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/344 Improve naming of ci jobs by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/348 Add missing state (Flevoland) for Netherlands. by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/352 Added Tesla make and models. by @bodiam in https://github.com/datafaker-net/datafaker/pull/351 Add new JSON generation example in file formats docs by @panilya in https://github.com/datafaker-net/datafaker/pull/354 Add upholstery fabrics and colors to Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/355 Fix flaky test by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/358 Make sure that padding is used in Hashing by @CucumisSativus in https://github.com/datafaker-net/datafaker/pull/360 Fix for #359 : Future and past is no longer 1 second into the future, \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/361 Issue #268 : More realistic passport generators for several countries. by @bodiam in https://github.com/datafaker-net/datafaker/pull/362 Add 'es' passport number, add tests for uncoveraged passport numbers by @panilya in https://github.com/datafaker-net/datafaker/pull/363 Move all provider registration to a separate interface by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/365 Put open mocks in try catch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/366 Introduce SportFaker and move all sport related fakers under it by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/369 Move providers to base package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/371 Extract food providers into a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/372 Extract video games into a separate provider type by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/373 Extract movie to a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/375 Rename IProviders to BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/376 Move id number objects to final fields to decrease number of object creations by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/379 Add more European makes and models for the Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/380 Typos in BaseFaker by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/382 Added Mazda as a car make and simplified BaseFakerTest. by @bodiam in https://github.com/datafaker-net/datafaker/pull/383 Added links section by @bodiam in https://github.com/datafaker-net/datafaker/pull/385 Datafaker wasn't 100% identical when repeating with the same seed, no\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/384 Added Nio and Xpeng cars by @bodiam in https://github.com/datafaker-net/datafaker/pull/386 Added Detective Conan and cleaned up integration test. by @bodiam in https://github.com/datafaker-net/datafaker/pull/387 Added Dungeons and Dragons for Bart by @bodiam in https://github.com/datafaker-net/datafaker/pull/388 Add FakerContext info to error log by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/390 Support Bot User Agent by @yuokada in https://github.com/datafaker-net/datafaker/pull/392 Added more Cities, State, State code, free email provider, area codes\u2026 by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/393 Changed user agent any to slightly better name. by @bodiam in https://github.com/datafaker-net/datafaker/pull/394 Move 'Overwatch' faker to videogame group by @panilya in https://github.com/datafaker-net/datafaker/pull/397 Update 'CONTRIBUTING.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/396 Add 'Heroes of the Storm' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/395 Move 'MassEffect' faker to videogames group by @panilya in https://github.com/datafaker-net/datafaker/pull/398 Harden templates for getProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/400 Reorganised provider documentation by @bodiam in https://github.com/datafaker-net/datafaker/pull/402 Add 'Locality' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/401 Fix ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/405 Fix typo in class name by @panilya in https://github.com/datafaker-net/datafaker/pull/407 Add science unit provider by @panilya in https://github.com/datafaker-net/datafaker/pull/408 Add http method provider by @panilya in https://github.com/datafaker-net/datafaker/pull/406 Implemented LoremPicsum by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/410 Add port provider by @panilya in https://github.com/datafaker-net/datafaker/pull/409 Improved Credit card utility by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/414 Added Cricket Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/417 Made all test methods non-public to be more consistent. by @bodiam in https://github.com/datafaker-net/datafaker/pull/418 Added MoneyHeist Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/419 Remove redundant 'blood.yml' file by @panilya in https://github.com/datafaker-net/datafaker/pull/420 Add 'Family Guy' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/421 Add 'Fullmetal Alchemist: Brotherhood' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/422 Add missing @since tags, add description of Locality provider by @panilya in https://github.com/datafaker-net/datafaker/pull/423 Add jdk19 to ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/426 Move providers under their own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/427 feat/build_without_gpg by @TGITS in https://github.com/datafaker-net/datafaker/pull/431 zh-CN.yml\u589e\u52a0\u6a21\u62df\u6570\u636e by @LiuHao0606 in https://github.com/datafaker-net/datafaker/pull/432 Use getParameterCount rather than getParameterTypes where possible by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/436 Reorder method calls in FakeValuesService#resolveExpression by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/437 Extract retrieveMethodAccessor method, optimize javaNameToYamlName by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/438 Updated the news section by @bodiam in https://github.com/datafaker-net/datafaker/pull/439 Replace isAssignableFrom with == for final classes, refactor retrieveMethodAccessor by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/440 Introduce transformation schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/430 Make DateAndTime#between taking both date and timestamp by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/441 FakeStream implementation by @NarekDW in https://github.com/datafaker-net/datafaker/pull/435 Correct main branch name by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/442 add documentation for FakeSequence/FakeStream by @NarekDW in https://github.com/datafaker-net/datafaker/pull/443 Add support of sql dialect while sql generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/445 fix/pokemon_fr_localization by @TGITS in https://github.com/datafaker-net/datafaker/pull/446 feat(adding_moves_to_pokemon_provider) by @TGITS in https://github.com/datafaker-net/datafaker/pull/448 Correct typo by @carehart in https://github.com/datafaker-net/datafaker/pull/449 Credit card fix for Visa, Mastercard, Discover and Diners Club. Fixes\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/451 Fixed edit url in documentation. Fixes #450 by @bodiam in https://github.com/datafaker-net/datafaker/pull/452 Add support of groups to 'ProvidersDocsGenerator' by @panilya in https://github.com/datafaker-net/datafaker/pull/433 Colorize Maven output in GitHub Actions by @timtebeek in https://github.com/datafaker-net/datafaker/pull/453 Run AssertJ best practices OpenRewrite recipe by @timtebeek in https://github.com/datafaker-net/datafaker/pull/456 Changed casing of Australian animals to lowercase where needed. by @bodiam in https://github.com/datafaker-net/datafaker/pull/457 Added support for nonzero number generation using \u00d8 in numerify. by @bodiam in https://github.com/datafaker-net/datafaker/pull/458 Small refactoring to make number generation more clear. by @bodiam in https://github.com/datafaker-net/datafaker/pull/460 Rework Generics of Transformer interface by @NarekDW in https://github.com/datafaker-net/datafaker/pull/447 Fix sql quote identifier for mysql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/461 feat/adding_type_to_pokemon_provider by @TGITS in https://github.com/datafaker-net/datafaker/pull/464 Fix formatting by @bodiam in https://github.com/datafaker-net/datafaker/pull/465 Add issue navigator link for idea by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/466 Introduce international and national phone number formats by @panilya in https://github.com/datafaker-net/datafaker/pull/425 Add more constellations by @panilya in https://github.com/datafaker-net/datafaker/pull/467 Add MariaDB sql dialect by @panilya in https://github.com/datafaker-net/datafaker/pull/470 Use name to get length to prevent IndexOutOfBoundException by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/471 Add support for table schema in sql transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/472 Update JShell csv example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/473 Add csv as header by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/474 Add batch support and keyword case support for sql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/475 Move batch flag on dialect level by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/476 Add support for batch insert for Oracle by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/477 Use array and switch for numerify by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/478 Add icon for Intellijidea toolbox by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/468 Make FakeSequence Iterable by @NarekDW in https://github.com/datafaker-net/datafaker/pull/479 Added Baeldung link by @bodiam in https://github.com/datafaker-net/datafaker/pull/482 Fixed for flaky phone numbers. by @bodiam in https://github.com/datafaker-net/datafaker/pull/484 [bug-fix] generate separated SQL statements by @NarekDW in https://github.com/datafaker-net/datafaker/pull/483 Small cleanup in tests by @bodiam in https://github.com/datafaker-net/datafaker/pull/485 fix(small_misprint_in_the_doc) by @TGITS in https://github.com/datafaker-net/datafaker/pull/487 Add support for force usage of sql quote identifiers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/488 Add support for array and multiset by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/489 Add possibility to specify size of batch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/490 SQL arrays and multisets could be nested by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/492 Multiset could contain duplicates by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/493 Move sql transformer in it's own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/494 Use sql quote identifier if schema or table or field name contain catalog separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/495 Add tests for sql row by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/497 Remove redundant bank.yml file by @panilya in https://github.com/datafaker-net/datafaker/pull/496 Add compass provider by @panilya in https://github.com/datafaker-net/datafaker/pull/486 Update javaparser dependency by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/502 Use line separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/503 Add StudioGhibli provider by @panilya in https://github.com/datafaker-net/datafaker/pull/501 Generate from FakeSequence instead of List + bug fix in sql generator by @NarekDW in https://github.com/datafaker-net/datafaker/pull/499 Add Control provider by @panilya in https://github.com/datafaker-net/datafaker/pull/504 Add Doraemon provider by @panilya in https://github.com/datafaker-net/datafaker/pull/505 CNPJ test was flaky, fixed now. by @bodiam in https://github.com/datafaker-net/datafaker/pull/507 Speed up hex by using getRandomByteArray by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/510 Speed up digit generation by using random byte array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/508 Added text generator, made Password generator deprecated. by @bodiam in https://github.com/datafaker-net/datafaker/pull/509 Speed up bothify by making it via one run by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/511 Add Doctor Who provider by @panilya in https://github.com/datafaker-net/datafaker/pull/514 Add tests for uncovered method in Time provider by @panilya in https://github.com/datafaker-net/datafaker/pull/515 Cosmere by @bodiam in https://github.com/datafaker-net/datafaker/pull/516 Added Drone support by @bodiam in https://github.com/datafaker-net/datafaker/pull/518 Added Culture Series support by @bodiam in https://github.com/datafaker-net/datafaker/pull/519 Add test for period method by @panilya in https://github.com/datafaker-net/datafaker/pull/517 Added Fresh Prince of Bel Air support by @bodiam in https://github.com/datafaker-net/datafaker/pull/520 Add test for characters method with fixed length, uppercase and digit\u2026 by @panilya in https://github.com/datafaker-net/datafaker/pull/521 Adds Microsoft Azure provider by @agoncal in https://github.com/datafaker-net/datafaker/pull/524 Small fix for Azure Javadoc. by @bodiam in https://github.com/datafaker-net/datafaker/pull/525 10x times speed up Code#isbnGroup and Code#isbnGs1 by usage of Options by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/526 Support transformation schema for YAML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/512 Add hex upper/lower case by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/527 20x times speed up Aws and Azure by using hex by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/528 Add One Piece provider by @panilya in https://github.com/datafaker-net/datafaker/pull/529 Use getRandomBytes and specific hashcode to speed up text generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/530 Use cast to char instead of Math.abs, use value of first symbols for hashcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/531 3x times speed up Aws#route53ZoneId by moving textConfig in Aws to class field by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/532 Add documentation for schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/533 Speed up text generation, remove faker from text config builder by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/534 Format table by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/536 Add more tests by @panilya in https://github.com/datafaker-net/datafaker/pull/523 Use fork instead of port by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/538 Small typo fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/539 Speed up text generation by removal map by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/540 Add caching of remove underscore result by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/545 Use already found dot index by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/546 Updated documentation for sequences. by @bodiam in https://github.com/datafaker-net/datafaker/pull/550 Add Baseball provider by @Blackcows in https://github.com/datafaker-net/datafaker/pull/548 Support transformation schema for XML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/549 Disabled checkout by @bodiam in https://github.com/datafaker-net/datafaker/pull/553 Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/554 Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/555 Add Emoji provider by @ghusta in https://github.com/datafaker-net/datafaker/pull/556 Update Emoji provider with cats by @ghusta in https://github.com/datafaker-net/datafaker/pull/558 Restaurant names were generated incorrectly. Drone attributes were ge\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/559 New Contributors \u00b6 @jaapcoomans made their first contribution in https://github.com/datafaker-net/datafaker/pull/352 @CucumisSativus made their first contribution in https://github.com/datafaker-net/datafaker/pull/360 @ChiragMangukia made their first contribution in https://github.com/datafaker-net/datafaker/pull/393 @TGITS made their first contribution in https://github.com/datafaker-net/datafaker/pull/431 @LiuHao0606 made their first contribution in https://github.com/datafaker-net/datafaker/pull/432 @NarekDW made their first contribution in https://github.com/datafaker-net/datafaker/pull/435 @carehart made their first contribution in https://github.com/datafaker-net/datafaker/pull/449 @timtebeek made their first contribution in https://github.com/datafaker-net/datafaker/pull/453 @agoncal made their first contribution in https://github.com/datafaker-net/datafaker/pull/524 @RVRhub made their first contribution in https://github.com/datafaker-net/datafaker/pull/512 @Blackcows made their first contribution in https://github.com/datafaker-net/datafaker/pull/548 @ghusta made their first contribution in https://github.com/datafaker-net/datafaker/pull/556 Providers added \u00b6 Azure Compass Cosmere Culture Series Drone Dungeons And Dragons Emoji Fresh Prince Of BelAir Locality Text Detective Conan Doraemon Family Guy Fullmetal Alchemist Money Heist One Piece Baseball Cricket Control Heroes Of The Storm Studio Ghibli See https://www.datafaker.net/documentation/providers/","title":"1.7.0"},{"location":"releases/1.7.0/#datafaker-170-27-nov-2022","text":"One of the biggest releases has just been created, with the help of no less than 12(!) new contributors. Absolutely amazing, we couldn't have done it without you! Thanks to everyone involved, Datafaker now has more than a 100.000 monthly downloads, and is used by projects at Netflix, Alibaba, Bytedance and many others! It's great to see that this library is being used, and again, thanks! In this release, you'll find many new features, such as: 21 new providers Many performance improvements Far better SQL, XML, CSV and JSON generation Far better phone number generation. Almost all generated phone numbers are now valid numbers! Several bugfixes, mostly in the data generation. Have fun with this release!","title":"Datafaker 1.7.0 (27 Nov 2022)"},{"location":"releases/1.7.0/#whats-changed","text":"Apply renaming master to main by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/343 Enrich ja.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/345 Refactor barcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/344 Improve naming of ci jobs by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/348 Add missing state (Flevoland) for Netherlands. by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/352 Added Tesla make and models. by @bodiam in https://github.com/datafaker-net/datafaker/pull/351 Add new JSON generation example in file formats docs by @panilya in https://github.com/datafaker-net/datafaker/pull/354 Add upholstery fabrics and colors to Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/355 Fix flaky test by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/358 Make sure that padding is used in Hashing by @CucumisSativus in https://github.com/datafaker-net/datafaker/pull/360 Fix for #359 : Future and past is no longer 1 second into the future, \u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/361 Issue #268 : More realistic passport generators for several countries. by @bodiam in https://github.com/datafaker-net/datafaker/pull/362 Add 'es' passport number, add tests for uncoveraged passport numbers by @panilya in https://github.com/datafaker-net/datafaker/pull/363 Move all provider registration to a separate interface by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/365 Put open mocks in try catch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/366 Introduce SportFaker and move all sport related fakers under it by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/369 Move providers to base package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/371 Extract food providers into a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/372 Extract video games into a separate provider type by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/373 Extract movie to a separate package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/375 Rename IProviders to BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/376 Move id number objects to final fields to decrease number of object creations by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/379 Add more European makes and models for the Vehicle provider by @jaapcoomans in https://github.com/datafaker-net/datafaker/pull/380 Typos in BaseFaker by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/382 Added Mazda as a car make and simplified BaseFakerTest. by @bodiam in https://github.com/datafaker-net/datafaker/pull/383 Added links section by @bodiam in https://github.com/datafaker-net/datafaker/pull/385 Datafaker wasn't 100% identical when repeating with the same seed, no\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/384 Added Nio and Xpeng cars by @bodiam in https://github.com/datafaker-net/datafaker/pull/386 Added Detective Conan and cleaned up integration test. by @bodiam in https://github.com/datafaker-net/datafaker/pull/387 Added Dungeons and Dragons for Bart by @bodiam in https://github.com/datafaker-net/datafaker/pull/388 Add FakerContext info to error log by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/390 Support Bot User Agent by @yuokada in https://github.com/datafaker-net/datafaker/pull/392 Added more Cities, State, State code, free email provider, area codes\u2026 by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/393 Changed user agent any to slightly better name. by @bodiam in https://github.com/datafaker-net/datafaker/pull/394 Move 'Overwatch' faker to videogame group by @panilya in https://github.com/datafaker-net/datafaker/pull/397 Update 'CONTRIBUTING.md' by @panilya in https://github.com/datafaker-net/datafaker/pull/396 Add 'Heroes of the Storm' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/395 Move 'MassEffect' faker to videogames group by @panilya in https://github.com/datafaker-net/datafaker/pull/398 Harden templates for getProvider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/400 Reorganised provider documentation by @bodiam in https://github.com/datafaker-net/datafaker/pull/402 Add 'Locality' faker by @panilya in https://github.com/datafaker-net/datafaker/pull/401 Fix ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/405 Fix typo in class name by @panilya in https://github.com/datafaker-net/datafaker/pull/407 Add science unit provider by @panilya in https://github.com/datafaker-net/datafaker/pull/408 Add http method provider by @panilya in https://github.com/datafaker-net/datafaker/pull/406 Implemented LoremPicsum by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/410 Add port provider by @panilya in https://github.com/datafaker-net/datafaker/pull/409 Improved Credit card utility by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/414 Added Cricket Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/417 Made all test methods non-public to be more consistent. by @bodiam in https://github.com/datafaker-net/datafaker/pull/418 Added MoneyHeist Provider by @ChiragMangukia in https://github.com/datafaker-net/datafaker/pull/419 Remove redundant 'blood.yml' file by @panilya in https://github.com/datafaker-net/datafaker/pull/420 Add 'Family Guy' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/421 Add 'Fullmetal Alchemist: Brotherhood' provider by @panilya in https://github.com/datafaker-net/datafaker/pull/422 Add missing @since tags, add description of Locality provider by @panilya in https://github.com/datafaker-net/datafaker/pull/423 Add jdk19 to ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/426 Move providers under their own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/427 feat/build_without_gpg by @TGITS in https://github.com/datafaker-net/datafaker/pull/431 zh-CN.yml\u589e\u52a0\u6a21\u62df\u6570\u636e by @LiuHao0606 in https://github.com/datafaker-net/datafaker/pull/432 Use getParameterCount rather than getParameterTypes where possible by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/436 Reorder method calls in FakeValuesService#resolveExpression by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/437 Extract retrieveMethodAccessor method, optimize javaNameToYamlName by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/438 Updated the news section by @bodiam in https://github.com/datafaker-net/datafaker/pull/439 Replace isAssignableFrom with == for final classes, refactor retrieveMethodAccessor by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/440 Introduce transformation schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/430 Make DateAndTime#between taking both date and timestamp by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/441 FakeStream implementation by @NarekDW in https://github.com/datafaker-net/datafaker/pull/435 Correct main branch name by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/442 add documentation for FakeSequence/FakeStream by @NarekDW in https://github.com/datafaker-net/datafaker/pull/443 Add support of sql dialect while sql generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/445 fix/pokemon_fr_localization by @TGITS in https://github.com/datafaker-net/datafaker/pull/446 feat(adding_moves_to_pokemon_provider) by @TGITS in https://github.com/datafaker-net/datafaker/pull/448 Correct typo by @carehart in https://github.com/datafaker-net/datafaker/pull/449 Credit card fix for Visa, Mastercard, Discover and Diners Club. Fixes\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/451 Fixed edit url in documentation. Fixes #450 by @bodiam in https://github.com/datafaker-net/datafaker/pull/452 Add support of groups to 'ProvidersDocsGenerator' by @panilya in https://github.com/datafaker-net/datafaker/pull/433 Colorize Maven output in GitHub Actions by @timtebeek in https://github.com/datafaker-net/datafaker/pull/453 Run AssertJ best practices OpenRewrite recipe by @timtebeek in https://github.com/datafaker-net/datafaker/pull/456 Changed casing of Australian animals to lowercase where needed. by @bodiam in https://github.com/datafaker-net/datafaker/pull/457 Added support for nonzero number generation using \u00d8 in numerify. by @bodiam in https://github.com/datafaker-net/datafaker/pull/458 Small refactoring to make number generation more clear. by @bodiam in https://github.com/datafaker-net/datafaker/pull/460 Rework Generics of Transformer interface by @NarekDW in https://github.com/datafaker-net/datafaker/pull/447 Fix sql quote identifier for mysql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/461 feat/adding_type_to_pokemon_provider by @TGITS in https://github.com/datafaker-net/datafaker/pull/464 Fix formatting by @bodiam in https://github.com/datafaker-net/datafaker/pull/465 Add issue navigator link for idea by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/466 Introduce international and national phone number formats by @panilya in https://github.com/datafaker-net/datafaker/pull/425 Add more constellations by @panilya in https://github.com/datafaker-net/datafaker/pull/467 Add MariaDB sql dialect by @panilya in https://github.com/datafaker-net/datafaker/pull/470 Use name to get length to prevent IndexOutOfBoundException by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/471 Add support for table schema in sql transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/472 Update JShell csv example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/473 Add csv as header by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/474 Add batch support and keyword case support for sql by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/475 Move batch flag on dialect level by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/476 Add support for batch insert for Oracle by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/477 Use array and switch for numerify by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/478 Add icon for Intellijidea toolbox by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/468 Make FakeSequence Iterable by @NarekDW in https://github.com/datafaker-net/datafaker/pull/479 Added Baeldung link by @bodiam in https://github.com/datafaker-net/datafaker/pull/482 Fixed for flaky phone numbers. by @bodiam in https://github.com/datafaker-net/datafaker/pull/484 [bug-fix] generate separated SQL statements by @NarekDW in https://github.com/datafaker-net/datafaker/pull/483 Small cleanup in tests by @bodiam in https://github.com/datafaker-net/datafaker/pull/485 fix(small_misprint_in_the_doc) by @TGITS in https://github.com/datafaker-net/datafaker/pull/487 Add support for force usage of sql quote identifiers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/488 Add support for array and multiset by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/489 Add possibility to specify size of batch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/490 SQL arrays and multisets could be nested by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/492 Multiset could contain duplicates by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/493 Move sql transformer in it's own package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/494 Use sql quote identifier if schema or table or field name contain catalog separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/495 Add tests for sql row by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/497 Remove redundant bank.yml file by @panilya in https://github.com/datafaker-net/datafaker/pull/496 Add compass provider by @panilya in https://github.com/datafaker-net/datafaker/pull/486 Update javaparser dependency by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/502 Use line separator by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/503 Add StudioGhibli provider by @panilya in https://github.com/datafaker-net/datafaker/pull/501 Generate from FakeSequence instead of List + bug fix in sql generator by @NarekDW in https://github.com/datafaker-net/datafaker/pull/499 Add Control provider by @panilya in https://github.com/datafaker-net/datafaker/pull/504 Add Doraemon provider by @panilya in https://github.com/datafaker-net/datafaker/pull/505 CNPJ test was flaky, fixed now. by @bodiam in https://github.com/datafaker-net/datafaker/pull/507 Speed up hex by using getRandomByteArray by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/510 Speed up digit generation by using random byte array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/508 Added text generator, made Password generator deprecated. by @bodiam in https://github.com/datafaker-net/datafaker/pull/509 Speed up bothify by making it via one run by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/511 Add Doctor Who provider by @panilya in https://github.com/datafaker-net/datafaker/pull/514 Add tests for uncovered method in Time provider by @panilya in https://github.com/datafaker-net/datafaker/pull/515 Cosmere by @bodiam in https://github.com/datafaker-net/datafaker/pull/516 Added Drone support by @bodiam in https://github.com/datafaker-net/datafaker/pull/518 Added Culture Series support by @bodiam in https://github.com/datafaker-net/datafaker/pull/519 Add test for period method by @panilya in https://github.com/datafaker-net/datafaker/pull/517 Added Fresh Prince of Bel Air support by @bodiam in https://github.com/datafaker-net/datafaker/pull/520 Add test for characters method with fixed length, uppercase and digit\u2026 by @panilya in https://github.com/datafaker-net/datafaker/pull/521 Adds Microsoft Azure provider by @agoncal in https://github.com/datafaker-net/datafaker/pull/524 Small fix for Azure Javadoc. by @bodiam in https://github.com/datafaker-net/datafaker/pull/525 10x times speed up Code#isbnGroup and Code#isbnGs1 by usage of Options by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/526 Support transformation schema for YAML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/512 Add hex upper/lower case by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/527 20x times speed up Aws and Azure by using hex by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/528 Add One Piece provider by @panilya in https://github.com/datafaker-net/datafaker/pull/529 Use getRandomBytes and specific hashcode to speed up text generation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/530 Use cast to char instead of Math.abs, use value of first symbols for hashcode by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/531 3x times speed up Aws#route53ZoneId by moving textConfig in Aws to class field by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/532 Add documentation for schemas by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/533 Speed up text generation, remove faker from text config builder by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/534 Format table by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/536 Add more tests by @panilya in https://github.com/datafaker-net/datafaker/pull/523 Use fork instead of port by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/538 Small typo fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/539 Speed up text generation by removal map by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/540 Add caching of remove underscore result by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/545 Use already found dot index by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/546 Updated documentation for sequences. by @bodiam in https://github.com/datafaker-net/datafaker/pull/550 Add Baseball provider by @Blackcows in https://github.com/datafaker-net/datafaker/pull/548 Support transformation schema for XML by @RVRhub in https://github.com/datafaker-net/datafaker/pull/549 Disabled checkout by @bodiam in https://github.com/datafaker-net/datafaker/pull/553 Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/554 Release test by @bodiam in https://github.com/datafaker-net/datafaker/pull/555 Add Emoji provider by @ghusta in https://github.com/datafaker-net/datafaker/pull/556 Update Emoji provider with cats by @ghusta in https://github.com/datafaker-net/datafaker/pull/558 Restaurant names were generated incorrectly. Drone attributes were ge\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/559","title":"What's Changed"},{"location":"releases/1.7.0/#new-contributors","text":"@jaapcoomans made their first contribution in https://github.com/datafaker-net/datafaker/pull/352 @CucumisSativus made their first contribution in https://github.com/datafaker-net/datafaker/pull/360 @ChiragMangukia made their first contribution in https://github.com/datafaker-net/datafaker/pull/393 @TGITS made their first contribution in https://github.com/datafaker-net/datafaker/pull/431 @LiuHao0606 made their first contribution in https://github.com/datafaker-net/datafaker/pull/432 @NarekDW made their first contribution in https://github.com/datafaker-net/datafaker/pull/435 @carehart made their first contribution in https://github.com/datafaker-net/datafaker/pull/449 @timtebeek made their first contribution in https://github.com/datafaker-net/datafaker/pull/453 @agoncal made their first contribution in https://github.com/datafaker-net/datafaker/pull/524 @RVRhub made their first contribution in https://github.com/datafaker-net/datafaker/pull/512 @Blackcows made their first contribution in https://github.com/datafaker-net/datafaker/pull/548 @ghusta made their first contribution in https://github.com/datafaker-net/datafaker/pull/556","title":"New Contributors"},{"location":"releases/1.7.0/#providers-added","text":"Azure Compass Cosmere Culture Series Drone Dungeons And Dragons Emoji Fresh Prince Of BelAir Locality Text Detective Conan Doraemon Family Guy Fullmetal Alchemist Money Heist One Piece Baseball Cricket Control Heroes Of The Storm Studio Ghibli See https://www.datafaker.net/documentation/providers/","title":"Providers added"},{"location":"releases/1.8.0/","text":"Datafaker 1.8.0 (11 Feb 2023) \u00b6 The first release of 2023 of Datafaker has been created. After one year of Datafaker, this marks the release of the last version compatible with Java 1.8. After this, Datafaker 2.x will have Java 17 as a minimum baseline. Why 17, and not migrate from 8 to 11? Well, we think that Java 11 hardly has any benefits for Datafaker, while Java 17 might have some more interesting features, such as records, compact number formatting, and who knows, maybe some other features. Just to be clear: our 1.x branch will no longer be supported or maintained. New Contributors \u00b6 A special shout out to @kingthorin , who has contributed numerous improvements in Datafaker, and who is now a co-maintainer of Datafaker. Rick, welcome to the team, and absolutely appreciate your amazing work! @isvora made their first contribution in https://github.com/datafaker-net/datafaker/pull/557 @danilopiazza made their first contribution in https://github.com/datafaker-net/datafaker/pull/565 @NULL0xFF made their first contribution in https://github.com/datafaker-net/datafaker/pull/569 @benelog made their first contribution in https://github.com/datafaker-net/datafaker/pull/585 @alx-mag made their first contribution in https://github.com/datafaker-net/datafaker/pull/598 @robosoul made their first contribution in https://github.com/datafaker-net/datafaker/pull/638 @HattoriHenzo made their first contribution in https://github.com/datafaker-net/datafaker/pull/654 @mesketh made their first contribution in https://github.com/datafaker-net/datafaker/pull/653 @kingthorin made their first contribution in https://github.com/datafaker-net/datafaker/pull/657 @AlexJFerreira made their first contribution in https://github.com/datafaker-net/datafaker/pull/661 What's Changed \u00b6 Documentation update by @bodiam in https://github.com/datafaker-net/datafaker/pull/560 Update spotless-maven-plugin to 2.28.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/563 Do not call Random for singletone lists by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/564 Add Marvel Snap Provider by @isvora in https://github.com/datafaker-net/datafaker/pull/557 Documentation update: rename IProviders to BaseProviders by @danilopiazza in https://github.com/datafaker-net/datafaker/pull/565 Add Korean resident registration number by @NULL0xFF in https://github.com/datafaker-net/datafaker/pull/569 Use builder for csv and sql transformers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/573 Update dependencies by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/576 Make call to FakeValues#loadValues once by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/575 Speed up javaNameToYamlName by usage of array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/578 Speed up FakeValues#toJavaNames by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/579 Add Silicon Valley faker by @panilya in https://github.com/datafaker-net/datafaker/pull/580 Create map only if it is required by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/581 Remove deprecated Password provider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/582 Remove useless class var by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/583 Fix wrong names in ko.yml by @benelog in https://github.com/datafaker-net/datafaker/pull/585 Fix generation of invalid links in ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/588 Reduce number of internal failures because of empty filename by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/590 Precollect buzzwords by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/591 Refactor: extract some vars by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/592 Return supported locales by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/589 Log error instead of throwing and catching by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/594 Preload classes and methods while parsing yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/597 Add .yml files for 'be' and 'en-PK' locales by @alx-mag in https://github.com/datafaker-net/datafaker/pull/598 Add Naruto provider by @panilya in https://github.com/datafaker-net/datafaker/pull/601 Add Futurama provider by @panilya in https://github.com/datafaker-net/datafaker/pull/602 Update spotless maven plugin by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/604 Update junit to 5.9.2 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/605 Set version 1.4.0 for perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/606 Alphabetical order of provider names in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/603 Show by @bodiam in https://github.com/datafaker-net/datafaker/pull/608 More tv shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/609 Count generators by @bodiam in https://github.com/datafaker-net/datafaker/pull/610 More shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/611 Bump year in docs copyright by @valfirst in https://github.com/datafaker-net/datafaker/pull/612 Add perf tests for 1.7.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/613 Add java object transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/513 More video games by @bodiam in https://github.com/datafaker-net/datafaker/pull/614 Clarify providers section in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/616 Ruby faker fixes by @bodiam in https://github.com/datafaker-net/datafaker/pull/615 More shows 2 by @bodiam in https://github.com/datafaker-net/datafaker/pull/617 Cache calculated locale chains by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/618 Reformat table in perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/619 Misprint in tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/620 Add missing break in switch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/621 Fix concurrent modification exception by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/622 Move toLower to cache by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/625 Use Locale#forLanguageTag by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/626 Update maven to 3.8.7 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/627 Update spotless to 2.30.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/628 Add Kotlin examples for formats in schemas.md (docs) by @panilya in https://github.com/datafaker-net/datafaker/pull/633 Fix broken link in the docs by @panilya in https://github.com/datafaker-net/datafaker/pull/630 Introduce singletone Locale to use identity hash maps by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/631 Issue #635 - Expand SV local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/638 Issue #637 - Expand DK local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/640 Issue #636 - Expand NO local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/639 Docu fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/634 Enhance NL local company name and suffix by @robosoul in https://github.com/datafaker-net/datafaker/pull/641 Issue #642 - Language code for Denmark is 'da' by @robosoul in https://github.com/datafaker-net/datafaker/pull/643 Issue #644 - reusable merge of male/female names in the first_name collection by @robosoul in https://github.com/datafaker-net/datafaker/pull/645 Use https for schemaLocation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/650 Provider groups description and new providers per version table in DOCS by @panilya in https://github.com/datafaker-net/datafaker/pull/649 Computer brands feature request by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/654 JsonTransformer enhancement to support import scenarios by @mesketh in https://github.com/datafaker-net/datafaker/pull/653 Make properties ordered by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/655 Add configuration for comma in json, refactor jsontransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/656 Garment Size Test Tweak by @kingthorin in https://github.com/datafaker-net/datafaker/pull/657 Add Zodiac Signs provider by @kingthorin in https://github.com/datafaker-net/datafaker/pull/658 Rename 'Show' group to 'Entertainment' and add new provider by @panilya in https://github.com/datafaker-net/datafaker/pull/647 Enforce EOL=LF by @kingthorin in https://github.com/datafaker-net/datafaker/pull/659 Correct custom provider example by @AlexJFerreira in https://github.com/datafaker-net/datafaker/pull/661 Improve unit testing by @kingthorin in https://github.com/datafaker-net/datafaker/pull/660 Remove usage Format Json from BaseFaker by @RVRhub in https://github.com/datafaker-net/datafaker/pull/663 Include XML files in .gitattributes as text by @kingthorin in https://github.com/datafaker-net/datafaker/pull/664 Add computer brands by @kingthorin in https://github.com/datafaker-net/datafaker/pull/665 Add Brand faker by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/668 Add static builder method for json transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/669 Use CsvTransformer#builder in doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/671 Use Csv transformer instead of format csv in FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/672 Adjust copyright to 2023 by @kingthorin in https://github.com/datafaker-net/datafaker/pull/674 Add Chess faker by @panilya in https://github.com/datafaker-net/datafaker/pull/676 Apply comparison against yaml file content for tests within entertainment package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/677 Fix Dermatology typo by @kingthorin in https://github.com/datafaker-net/datafaker/pull/680 Make arg for generate Transformer Iterable rather than FakeSequence by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/683 Remove deprecated csv by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/684 Remove deprecated Yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/685 Entertainment Fixes by @kingthorin in https://github.com/datafaker-net/datafaker/pull/686 Providers added \u00b6 A total of 34 new providers were added, brining the total now to 230 different data providers! See https://www.datafaker.net/documentation/providers/ for the full overview of providers.","title":"1.8.0"},{"location":"releases/1.8.0/#datafaker-180-11-feb-2023","text":"The first release of 2023 of Datafaker has been created. After one year of Datafaker, this marks the release of the last version compatible with Java 1.8. After this, Datafaker 2.x will have Java 17 as a minimum baseline. Why 17, and not migrate from 8 to 11? Well, we think that Java 11 hardly has any benefits for Datafaker, while Java 17 might have some more interesting features, such as records, compact number formatting, and who knows, maybe some other features. Just to be clear: our 1.x branch will no longer be supported or maintained.","title":"Datafaker 1.8.0 (11 Feb 2023)"},{"location":"releases/1.8.0/#new-contributors","text":"A special shout out to @kingthorin , who has contributed numerous improvements in Datafaker, and who is now a co-maintainer of Datafaker. Rick, welcome to the team, and absolutely appreciate your amazing work! @isvora made their first contribution in https://github.com/datafaker-net/datafaker/pull/557 @danilopiazza made their first contribution in https://github.com/datafaker-net/datafaker/pull/565 @NULL0xFF made their first contribution in https://github.com/datafaker-net/datafaker/pull/569 @benelog made their first contribution in https://github.com/datafaker-net/datafaker/pull/585 @alx-mag made their first contribution in https://github.com/datafaker-net/datafaker/pull/598 @robosoul made their first contribution in https://github.com/datafaker-net/datafaker/pull/638 @HattoriHenzo made their first contribution in https://github.com/datafaker-net/datafaker/pull/654 @mesketh made their first contribution in https://github.com/datafaker-net/datafaker/pull/653 @kingthorin made their first contribution in https://github.com/datafaker-net/datafaker/pull/657 @AlexJFerreira made their first contribution in https://github.com/datafaker-net/datafaker/pull/661","title":"New Contributors"},{"location":"releases/1.8.0/#whats-changed","text":"Documentation update by @bodiam in https://github.com/datafaker-net/datafaker/pull/560 Update spotless-maven-plugin to 2.28.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/563 Do not call Random for singletone lists by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/564 Add Marvel Snap Provider by @isvora in https://github.com/datafaker-net/datafaker/pull/557 Documentation update: rename IProviders to BaseProviders by @danilopiazza in https://github.com/datafaker-net/datafaker/pull/565 Add Korean resident registration number by @NULL0xFF in https://github.com/datafaker-net/datafaker/pull/569 Use builder for csv and sql transformers by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/573 Update dependencies by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/576 Make call to FakeValues#loadValues once by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/575 Speed up javaNameToYamlName by usage of array by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/578 Speed up FakeValues#toJavaNames by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/579 Add Silicon Valley faker by @panilya in https://github.com/datafaker-net/datafaker/pull/580 Create map only if it is required by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/581 Remove deprecated Password provider by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/582 Remove useless class var by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/583 Fix wrong names in ko.yml by @benelog in https://github.com/datafaker-net/datafaker/pull/585 Fix generation of invalid links in ProvidersDocsGenerator by @panilya in https://github.com/datafaker-net/datafaker/pull/588 Reduce number of internal failures because of empty filename by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/590 Precollect buzzwords by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/591 Refactor: extract some vars by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/592 Return supported locales by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/589 Log error instead of throwing and catching by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/594 Preload classes and methods while parsing yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/597 Add .yml files for 'be' and 'en-PK' locales by @alx-mag in https://github.com/datafaker-net/datafaker/pull/598 Add Naruto provider by @panilya in https://github.com/datafaker-net/datafaker/pull/601 Add Futurama provider by @panilya in https://github.com/datafaker-net/datafaker/pull/602 Update spotless maven plugin by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/604 Update junit to 5.9.2 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/605 Set version 1.4.0 for perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/606 Alphabetical order of provider names in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/603 Show by @bodiam in https://github.com/datafaker-net/datafaker/pull/608 More tv shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/609 Count generators by @bodiam in https://github.com/datafaker-net/datafaker/pull/610 More shows by @bodiam in https://github.com/datafaker-net/datafaker/pull/611 Bump year in docs copyright by @valfirst in https://github.com/datafaker-net/datafaker/pull/612 Add perf tests for 1.7.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/613 Add java object transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/513 More video games by @bodiam in https://github.com/datafaker-net/datafaker/pull/614 Clarify providers section in the README by @panilya in https://github.com/datafaker-net/datafaker/pull/616 Ruby faker fixes by @bodiam in https://github.com/datafaker-net/datafaker/pull/615 More shows 2 by @bodiam in https://github.com/datafaker-net/datafaker/pull/617 Cache calculated locale chains by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/618 Reformat table in perf doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/619 Misprint in tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/620 Add missing break in switch by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/621 Fix concurrent modification exception by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/622 Move toLower to cache by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/625 Use Locale#forLanguageTag by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/626 Update maven to 3.8.7 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/627 Update spotless to 2.30.0 by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/628 Add Kotlin examples for formats in schemas.md (docs) by @panilya in https://github.com/datafaker-net/datafaker/pull/633 Fix broken link in the docs by @panilya in https://github.com/datafaker-net/datafaker/pull/630 Introduce singletone Locale to use identity hash maps by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/631 Issue #635 - Expand SV local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/638 Issue #637 - Expand DK local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/640 Issue #636 - Expand NO local names by @robosoul in https://github.com/datafaker-net/datafaker/pull/639 Docu fix by @bodiam in https://github.com/datafaker-net/datafaker/pull/634 Enhance NL local company name and suffix by @robosoul in https://github.com/datafaker-net/datafaker/pull/641 Issue #642 - Language code for Denmark is 'da' by @robosoul in https://github.com/datafaker-net/datafaker/pull/643 Issue #644 - reusable merge of male/female names in the first_name collection by @robosoul in https://github.com/datafaker-net/datafaker/pull/645 Use https for schemaLocation by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/650 Provider groups description and new providers per version table in DOCS by @panilya in https://github.com/datafaker-net/datafaker/pull/649 Computer brands feature request by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/654 JsonTransformer enhancement to support import scenarios by @mesketh in https://github.com/datafaker-net/datafaker/pull/653 Make properties ordered by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/655 Add configuration for comma in json, refactor jsontransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/656 Garment Size Test Tweak by @kingthorin in https://github.com/datafaker-net/datafaker/pull/657 Add Zodiac Signs provider by @kingthorin in https://github.com/datafaker-net/datafaker/pull/658 Rename 'Show' group to 'Entertainment' and add new provider by @panilya in https://github.com/datafaker-net/datafaker/pull/647 Enforce EOL=LF by @kingthorin in https://github.com/datafaker-net/datafaker/pull/659 Correct custom provider example by @AlexJFerreira in https://github.com/datafaker-net/datafaker/pull/661 Improve unit testing by @kingthorin in https://github.com/datafaker-net/datafaker/pull/660 Remove usage Format Json from BaseFaker by @RVRhub in https://github.com/datafaker-net/datafaker/pull/663 Include XML files in .gitattributes as text by @kingthorin in https://github.com/datafaker-net/datafaker/pull/664 Add computer brands by @kingthorin in https://github.com/datafaker-net/datafaker/pull/665 Add Brand faker by @HattoriHenzo in https://github.com/datafaker-net/datafaker/pull/668 Add static builder method for json transformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/669 Use CsvTransformer#builder in doc by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/671 Use Csv transformer instead of format csv in FakeValuesService by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/672 Adjust copyright to 2023 by @kingthorin in https://github.com/datafaker-net/datafaker/pull/674 Add Chess faker by @panilya in https://github.com/datafaker-net/datafaker/pull/676 Apply comparison against yaml file content for tests within entertainment package by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/677 Fix Dermatology typo by @kingthorin in https://github.com/datafaker-net/datafaker/pull/680 Make arg for generate Transformer Iterable rather than FakeSequence by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/683 Remove deprecated csv by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/684 Remove deprecated Yaml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/685 Entertainment Fixes by @kingthorin in https://github.com/datafaker-net/datafaker/pull/686","title":"What's Changed"},{"location":"releases/1.8.0/#providers-added","text":"A total of 34 new providers were added, brining the total now to 230 different data providers! See https://www.datafaker.net/documentation/providers/ for the full overview of providers.","title":"Providers added"},{"location":"releases/1.9.0/","text":"Datafaker 1.9.0 (18 April 2023) \u00b6 A small maintenance release for Java 1.8 with some fixes and updated dependendencies. What's Changed \u00b6 Update dependencies for 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/771 Add annotation support for data classes based on JavaObjectTransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/773 Backport of determenistic methods issue and add url issue to 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/776","title":"1.9.0"},{"location":"releases/1.9.0/#datafaker-190-18-april-2023","text":"A small maintenance release for Java 1.8 with some fixes and updated dependendencies.","title":"Datafaker 1.9.0 (18 April 2023)"},{"location":"releases/1.9.0/#whats-changed","text":"Update dependencies for 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/771 Add annotation support for data classes based on JavaObjectTransformer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/773 Backport of determenistic methods issue and add url issue to 1.x by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/776","title":"What's Changed"},{"location":"releases/2.0.0/","text":"Datafaker 2.0.0 (11 June 2023) \u00b6 Today, we're pleased to announce a new milestone for the Datafaker project: Datafaker 2.0 has been released! The biggest change in Datafaker 2.0 is that the minimum Java version is now version 17. After Spring Boot moved to Java 17, we thought that moving to Java 11 wouldn't have much benefit, so we decided to jump a version and support Java 17+ instead. This allows us to support newer Java features such as Java Records. Please checkout the documentation for more info. Besides that, there are numerous small improvements, which you can find in the release notes below. As always, and while we changed the major version, we aim to keep upgrades smooth, and besides the change in Java version, no (or not many...) breaking changes should have been introduced. Thanks to all our users for the great support; it's been a great journey so far, and here's to many more Datafaker releases! Breaking Change \u00b6 internet().url() will now return a web URL. The previous implementation returned just a domain name. Here's a sample of the new generation: https://www.garry-damore.co/iure/recusandaesint https://www.bertha-jacobson.biz/?animi=sed&aspernatur=voluptatem https://www.arlene-mclaughlin.info:40819/iusto/id?repudiandae=dignissimos&voluptatem=atque# ab https://www.fred-ledner.name/beatae/voluptatemreiciendis?ab=deleniti&repudiandae=atque# voluptate https://www.melissa-tromp.info:43154/ https://www.un-langosh.co:52266/in?numquam=ipsa&ut=blanditiis# voluptatem https://www.robbin-hamill.biz:24492/deleniti/utveniam https://www.una-luettgen.info/?ab=ea&quis=soluta# voluptas https://www.wilber-harber.net/dolor/praesentiumquas# numquam https://www.santana-stiedemann.com/tempore?ad=repellat&atque=odit# ex https://www.logan-yundt.org/fuga?quaerat=voluptas&est=ipsa For further details see: https://github.com/datafaker-net/datafaker/issues/840 . New Contributors \u00b6 A big shout to our new contributors, without who Datafaker wouldn't be the project which it is today. @jamievasales made their first contribution in https://github.com/datafaker-net/datafaker/pull/717 @ColinShorts made their first contribution in https://github.com/datafaker-net/datafaker/pull/723 @tcttk made their first contribution in https://github.com/datafaker-net/datafaker/pull/727 @almasfiza made their first contribution in https://github.com/datafaker-net/datafaker/pull/744 @Majid-J made their first contribution in https://github.com/datafaker-net/datafaker/pull/755 @novozhilov35 made their first contribution in https://github.com/datafaker-net/datafaker/pull/756 @L-Evg made their first contribution in https://github.com/datafaker-net/datafaker/pull/758 @bowen5 made their first contribution in https://github.com/datafaker-net/datafaker/pull/834 Thank you all for helping out, your contributions are appreciated! What's Changed \u00b6 Documentation 1.8/2.0 update. by @bodiam in https://github.com/datafaker-net/datafaker/pull/688 Java 17 by @bodiam in https://github.com/datafaker-net/datafaker/pull/689 More unit test improvements by @kingthorin in https://github.com/datafaker-net/datafaker/pull/682 Formatting fix for release notes. by @bodiam in https://github.com/datafaker-net/datafaker/pull/691 Migrated Java 8 code to Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/696 Support list of objects for JSON by @RVRhub in https://github.com/datafaker-net/datafaker/pull/693 Rewrite nested json tests for stream and remove deprecated json by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/699 Few more Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/697 Removal of deprecated code. by @bodiam in https://github.com/datafaker-net/datafaker/pull/706 Fix non-capturing groups by @kingthorin in https://github.com/datafaker-net/datafaker/pull/707 Reformat and Enrich device.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/715 Add first time contributor guide by @jamievasales in https://github.com/datafaker-net/datafaker/pull/717 Added Qodana support (experiment) by @bodiam in https://github.com/datafaker-net/datafaker/pull/703 Do not cache methods of expressions with args by @valfirst in https://github.com/datafaker-net/datafaker/pull/719 Add allergens in Food provider by @panilya in https://github.com/datafaker-net/datafaker/pull/724 Fix Kotlin examples in Transformers documentation by @panilya in https://github.com/datafaker-net/datafaker/pull/725 Improve aviation provider by @panilya in https://github.com/datafaker-net/datafaker/pull/726 Update Australia resource typo and add places and animals by @jamievasales in https://github.com/datafaker-net/datafaker/pull/728 Update README for latest release by @kingthorin in https://github.com/datafaker-net/datafaker/pull/732 Enable jdk20 in ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/736 Added 'addUrl' method by @tcttk in https://github.com/datafaker-net/datafaker/pull/727 OscarMovie should store rules to access data but not the actual field names by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/742 Add test of deterministic and non deterministic provider's methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/743 Increase numberOfTestsPerMethod to 100 for testDeterministicAndNonDeterministicProvidersReturnValues by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/745 Refactor1 : Worked on the failed build for previous PR #739 by @almasfiza in https://github.com/datafaker-net/datafaker/pull/744 Extract common part from FakerContext#localeChain by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/748 Update spotless and refactor WordUtils by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/749 Return input value instead of intantiating a new one by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/750 Remove from doc removed formats, update example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/753 Feature/hacker localization nb no by @Majid-J in https://github.com/datafaker-net/datafaker/pull/755 Update expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/756 Aviation provider: Added general and cargo airplanes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/758 fix csv expression example in expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/757 Aviation provider: Added more aircraft. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/761 Fix aviation empty entry and formatting. by @bodiam in https://github.com/datafaker-net/datafaker/pull/762 Add annotation support for data classes based on JavaObjectTransformer by @RVRhub in https://github.com/datafaker-net/datafaker/pull/754 Red Dead Redemption 2 Provider by @Majid-J in https://github.com/datafaker-net/datafaker/pull/766 BaseFakerTest - Assert that provider lists should not have blank entries by @kingthorin in https://github.com/datafaker-net/datafaker/pull/769 Introduce FakeValuesContext and FAKE_VALUES_MAP by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/767 Remove unused package private method and tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/772 Aviation provider: added more airlines. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/765 Add Norwegian localization for olympic sports by @Majid-J in https://github.com/datafaker-net/datafaker/pull/775 Aviation provider: Airport names and more ICAO airport codes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/774 Add Final Fantasy XIV faker by @panilya in https://github.com/datafaker-net/datafaker/pull/783 Moved CreditCardType to an internal class. Cleaned up a few Qodana wa\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/786 Add degree in University faker by @panilya in https://github.com/datafaker-net/datafaker/pull/785 Use spotless to enforce format of en yaml files by @kingthorin in https://github.com/datafaker-net/datafaker/pull/781 Vehicle provider: Added more Italian cars. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/789 Different types of transport fake data by @sergejsvisockis in https://github.com/datafaker-net/datafaker/pull/791 Introduce cache of suppliers and remove usage of Objects.hash to speed up by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/792 Add call for super constructors by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/795 Replace deprecated class#newInstance by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/796 Keep abc order in BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/798 Remove unused class and methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/801 Add shading for generex and automaton by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/797 Configured Maven to create a MANIFEST file. Renamed Data Faker to Datafaker by @bodiam in https://github.com/datafaker-net/datafaker/pull/802 Update dependabot.yml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/804 Various Dutch address and name improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/805 Improved Australian addresses and general secondary addresses. by @bodiam in https://github.com/datafaker-net/datafaker/pull/808 Add support populate Java Object with custom schema without FakeForSc\u2026 by @RVRhub in https://github.com/datafaker-net/datafaker/pull/787 Introduce cache of default schemas to FakeResolver by @RVRhub in https://github.com/datafaker-net/datafaker/pull/809 Cache suppliers for java transformers, improve hashing by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/810 Use consumer rather than consumer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/811 Make FakeValuesService thread safe by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/770 Generating US routing number (ABA RTN) in Finance provider. by @polarfish in https://github.com/datafaker-net/datafaker/pull/821 Eliminate System.out.println, speed up Finance#usRoutingNumber by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/825 Add Java Record support in JavaObjectTransformer by @panilya in https://github.com/datafaker-net/datafaker/pull/824 Add support for Azure Spring Apps by @bowen5 in https://github.com/datafaker-net/datafaker/pull/834 Make repeatability test comparing per entry to simplify analisys by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/835 Make FakerRepeatabilityIntegrationTest running in same thread by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/837 Make pastDateExpression test more stable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/836 Speed up Number#numberBetween for int values by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/838 Internet provider: re-implement url, add webdomain method by @kingthorin in https://github.com/datafaker-net/datafaker/pull/841 Providers added \u00b6 Final Fantasy XIV Red Dead Redemption 2 Transport See https://www.datafaker.net/documentation/providers/ for the full overview of providers.","title":"2.0.0"},{"location":"releases/2.0.0/#datafaker-200-11-june-2023","text":"Today, we're pleased to announce a new milestone for the Datafaker project: Datafaker 2.0 has been released! The biggest change in Datafaker 2.0 is that the minimum Java version is now version 17. After Spring Boot moved to Java 17, we thought that moving to Java 11 wouldn't have much benefit, so we decided to jump a version and support Java 17+ instead. This allows us to support newer Java features such as Java Records. Please checkout the documentation for more info. Besides that, there are numerous small improvements, which you can find in the release notes below. As always, and while we changed the major version, we aim to keep upgrades smooth, and besides the change in Java version, no (or not many...) breaking changes should have been introduced. Thanks to all our users for the great support; it's been a great journey so far, and here's to many more Datafaker releases!","title":"Datafaker 2.0.0 (11 June 2023)"},{"location":"releases/2.0.0/#breaking-change","text":"internet().url() will now return a web URL. The previous implementation returned just a domain name. Here's a sample of the new generation: https://www.garry-damore.co/iure/recusandaesint https://www.bertha-jacobson.biz/?animi=sed&aspernatur=voluptatem https://www.arlene-mclaughlin.info:40819/iusto/id?repudiandae=dignissimos&voluptatem=atque# ab https://www.fred-ledner.name/beatae/voluptatemreiciendis?ab=deleniti&repudiandae=atque# voluptate https://www.melissa-tromp.info:43154/ https://www.un-langosh.co:52266/in?numquam=ipsa&ut=blanditiis# voluptatem https://www.robbin-hamill.biz:24492/deleniti/utveniam https://www.una-luettgen.info/?ab=ea&quis=soluta# voluptas https://www.wilber-harber.net/dolor/praesentiumquas# numquam https://www.santana-stiedemann.com/tempore?ad=repellat&atque=odit# ex https://www.logan-yundt.org/fuga?quaerat=voluptas&est=ipsa For further details see: https://github.com/datafaker-net/datafaker/issues/840 .","title":"Breaking Change"},{"location":"releases/2.0.0/#new-contributors","text":"A big shout to our new contributors, without who Datafaker wouldn't be the project which it is today. @jamievasales made their first contribution in https://github.com/datafaker-net/datafaker/pull/717 @ColinShorts made their first contribution in https://github.com/datafaker-net/datafaker/pull/723 @tcttk made their first contribution in https://github.com/datafaker-net/datafaker/pull/727 @almasfiza made their first contribution in https://github.com/datafaker-net/datafaker/pull/744 @Majid-J made their first contribution in https://github.com/datafaker-net/datafaker/pull/755 @novozhilov35 made their first contribution in https://github.com/datafaker-net/datafaker/pull/756 @L-Evg made their first contribution in https://github.com/datafaker-net/datafaker/pull/758 @bowen5 made their first contribution in https://github.com/datafaker-net/datafaker/pull/834 Thank you all for helping out, your contributions are appreciated!","title":"New Contributors"},{"location":"releases/2.0.0/#whats-changed","text":"Documentation 1.8/2.0 update. by @bodiam in https://github.com/datafaker-net/datafaker/pull/688 Java 17 by @bodiam in https://github.com/datafaker-net/datafaker/pull/689 More unit test improvements by @kingthorin in https://github.com/datafaker-net/datafaker/pull/682 Formatting fix for release notes. by @bodiam in https://github.com/datafaker-net/datafaker/pull/691 Migrated Java 8 code to Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/696 Support list of objects for JSON by @RVRhub in https://github.com/datafaker-net/datafaker/pull/693 Rewrite nested json tests for stream and remove deprecated json by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/699 Few more Java 17 syntax improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/697 Removal of deprecated code. by @bodiam in https://github.com/datafaker-net/datafaker/pull/706 Fix non-capturing groups by @kingthorin in https://github.com/datafaker-net/datafaker/pull/707 Reformat and Enrich device.yml by @yuokada in https://github.com/datafaker-net/datafaker/pull/715 Add first time contributor guide by @jamievasales in https://github.com/datafaker-net/datafaker/pull/717 Added Qodana support (experiment) by @bodiam in https://github.com/datafaker-net/datafaker/pull/703 Do not cache methods of expressions with args by @valfirst in https://github.com/datafaker-net/datafaker/pull/719 Add allergens in Food provider by @panilya in https://github.com/datafaker-net/datafaker/pull/724 Fix Kotlin examples in Transformers documentation by @panilya in https://github.com/datafaker-net/datafaker/pull/725 Improve aviation provider by @panilya in https://github.com/datafaker-net/datafaker/pull/726 Update Australia resource typo and add places and animals by @jamievasales in https://github.com/datafaker-net/datafaker/pull/728 Update README for latest release by @kingthorin in https://github.com/datafaker-net/datafaker/pull/732 Enable jdk20 in ci by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/736 Added 'addUrl' method by @tcttk in https://github.com/datafaker-net/datafaker/pull/727 OscarMovie should store rules to access data but not the actual field names by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/742 Add test of deterministic and non deterministic provider's methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/743 Increase numberOfTestsPerMethod to 100 for testDeterministicAndNonDeterministicProvidersReturnValues by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/745 Refactor1 : Worked on the failed build for previous PR #739 by @almasfiza in https://github.com/datafaker-net/datafaker/pull/744 Extract common part from FakerContext#localeChain by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/748 Update spotless and refactor WordUtils by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/749 Return input value instead of intantiating a new one by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/750 Remove from doc removed formats, update example in readme by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/753 Feature/hacker localization nb no by @Majid-J in https://github.com/datafaker-net/datafaker/pull/755 Update expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/756 Aviation provider: Added general and cargo airplanes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/758 fix csv expression example in expressions.md by @novozhilov35 in https://github.com/datafaker-net/datafaker/pull/757 Aviation provider: Added more aircraft. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/761 Fix aviation empty entry and formatting. by @bodiam in https://github.com/datafaker-net/datafaker/pull/762 Add annotation support for data classes based on JavaObjectTransformer by @RVRhub in https://github.com/datafaker-net/datafaker/pull/754 Red Dead Redemption 2 Provider by @Majid-J in https://github.com/datafaker-net/datafaker/pull/766 BaseFakerTest - Assert that provider lists should not have blank entries by @kingthorin in https://github.com/datafaker-net/datafaker/pull/769 Introduce FakeValuesContext and FAKE_VALUES_MAP by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/767 Remove unused package private method and tests by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/772 Aviation provider: added more airlines. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/765 Add Norwegian localization for olympic sports by @Majid-J in https://github.com/datafaker-net/datafaker/pull/775 Aviation provider: Airport names and more ICAO airport codes. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/774 Add Final Fantasy XIV faker by @panilya in https://github.com/datafaker-net/datafaker/pull/783 Moved CreditCardType to an internal class. Cleaned up a few Qodana wa\u2026 by @bodiam in https://github.com/datafaker-net/datafaker/pull/786 Add degree in University faker by @panilya in https://github.com/datafaker-net/datafaker/pull/785 Use spotless to enforce format of en yaml files by @kingthorin in https://github.com/datafaker-net/datafaker/pull/781 Vehicle provider: Added more Italian cars. by @L-Evg in https://github.com/datafaker-net/datafaker/pull/789 Different types of transport fake data by @sergejsvisockis in https://github.com/datafaker-net/datafaker/pull/791 Introduce cache of suppliers and remove usage of Objects.hash to speed up by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/792 Add call for super constructors by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/795 Replace deprecated class#newInstance by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/796 Keep abc order in BaseProviders by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/798 Remove unused class and methods by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/801 Add shading for generex and automaton by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/797 Configured Maven to create a MANIFEST file. Renamed Data Faker to Datafaker by @bodiam in https://github.com/datafaker-net/datafaker/pull/802 Update dependabot.yml by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/804 Various Dutch address and name improvements. by @bodiam in https://github.com/datafaker-net/datafaker/pull/805 Improved Australian addresses and general secondary addresses. by @bodiam in https://github.com/datafaker-net/datafaker/pull/808 Add support populate Java Object with custom schema without FakeForSc\u2026 by @RVRhub in https://github.com/datafaker-net/datafaker/pull/787 Introduce cache of default schemas to FakeResolver by @RVRhub in https://github.com/datafaker-net/datafaker/pull/809 Cache suppliers for java transformers, improve hashing by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/810 Use consumer rather than consumer by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/811 Make FakeValuesService thread safe by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/770 Generating US routing number (ABA RTN) in Finance provider. by @polarfish in https://github.com/datafaker-net/datafaker/pull/821 Eliminate System.out.println, speed up Finance#usRoutingNumber by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/825 Add Java Record support in JavaObjectTransformer by @panilya in https://github.com/datafaker-net/datafaker/pull/824 Add support for Azure Spring Apps by @bowen5 in https://github.com/datafaker-net/datafaker/pull/834 Make repeatability test comparing per entry to simplify analisys by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/835 Make FakerRepeatabilityIntegrationTest running in same thread by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/837 Make pastDateExpression test more stable by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/836 Speed up Number#numberBetween for int values by @snuyanzin in https://github.com/datafaker-net/datafaker/pull/838 Internet provider: re-implement url, add webdomain method by @kingthorin in https://github.com/datafaker-net/datafaker/pull/841","title":"What's Changed"},{"location":"releases/2.0.0/#providers-added","text":"Final Fantasy XIV Red Dead Redemption 2 Transport See https://www.datafaker.net/documentation/providers/ for the full overview of providers.","title":"Providers added"},{"location":"releases/2.0.1/","text":"Datafaker 2.0.1 (18 June 2023) \u00b6 What's Changed \u00b6 This is a bugfix release. It was no longer possible to specify the type of credit card and the type of compass due to a missing public keyword. Also, there was a small typo in the list of IATA airlines. Both items have been fixed now. Thank you SaraMahdy for reporting this issue here https://github.com/datafaker-net/datafaker/issues/860 Providers added \u00b6 No new providers were added. See https://www.datafaker.net/documentation/providers/","title":"2.0.1"},{"location":"releases/2.0.1/#datafaker-201-18-june-2023","text":"","title":"Datafaker 2.0.1 (18 June 2023)"},{"location":"releases/2.0.1/#whats-changed","text":"This is a bugfix release. It was no longer possible to specify the type of credit card and the type of compass due to a missing public keyword. Also, there was a small typo in the list of IATA airlines. Both items have been fixed now. Thank you SaraMahdy for reporting this issue here https://github.com/datafaker-net/datafaker/issues/860","title":"What's Changed"},{"location":"releases/2.0.1/#providers-added","text":"No new providers were added. See https://www.datafaker.net/documentation/providers/","title":"Providers added"},{"location":"releases/2.0.2/","text":"Datafaker 2.0.2 (3 October 2023) \u00b6 What's Changed \u00b6 Various bugfixes and performance enhancements. Providers added \u00b6 No new providers were added. See https://www.datafaker.net/documentation/providers/","title":"2.0.2"},{"location":"releases/2.0.2/#datafaker-202-3-october-2023","text":"","title":"Datafaker 2.0.2 (3 October 2023)"},{"location":"releases/2.0.2/#whats-changed","text":"Various bugfixes and performance enhancements.","title":"What's Changed"},{"location":"releases/2.0.2/#providers-added","text":"No new providers were added. See https://www.datafaker.net/documentation/providers/","title":"Providers added"},{"location":"releases/2.1.0/","text":"Datafaker 2.1.0 \u00b6 What's Changed \u00b6 Various bugfixes and performance enhancements. Providers added \u00b6 Joke See https://www.datafaker.net/documentation/providers/","title":"2.1.0"},{"location":"releases/2.1.0/#datafaker-210","text":"","title":"Datafaker 2.1.0"},{"location":"releases/2.1.0/#whats-changed","text":"Various bugfixes and performance enhancements.","title":"What's Changed"},{"location":"releases/2.1.0/#providers-added","text":"Joke See https://www.datafaker.net/documentation/providers/","title":"Providers added"},{"location":"releases/2.2.0-SNAPSHOT/","text":"Datafaker 2.1.0 (SNAPSHOT) \u00b6 New Contributors \u00b6 What's Changed \u00b6 Providers added \u00b6 See https://www.datafaker.net/documentation/providers/","title":"2.2.0-SNAPSHOT"},{"location":"releases/2.2.0-SNAPSHOT/#datafaker-210-snapshot","text":"","title":"Datafaker 2.1.0 (SNAPSHOT)"},{"location":"releases/2.2.0-SNAPSHOT/#new-contributors","text":"","title":"New Contributors"},{"location":"releases/2.2.0-SNAPSHOT/#whats-changed","text":"","title":"What's Changed"},{"location":"releases/2.2.0-SNAPSHOT/#providers-added","text":"See https://www.datafaker.net/documentation/providers/","title":"Providers added"}]}